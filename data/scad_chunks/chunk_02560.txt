function rounded_polygon(points, _tangents = undef) = //! Return the rounded polygon from the point list, can pass the tangent list to save it being calculated
    let(
        len = len(points),
        tangents = _tangents ? _tangents : rounded_polygon_tangents(points),
        arcs = rounded_polygon_arcs(points, tangents)
    ) [for(i = [0 : len - 1], last = (i - 1 + len) % len)
        let(
            t0 = vec2(tangents[last]),
            t1 = vec2(tangents[i]),
            p = line_intersection(t0, t1),                              // Do the tangents cross?
            R = points[i][2]
        )
        if(!is_undef(p))                                                // Tangents intersect, so just add the intersection point
            p
        else
            each [                                                      // Else link the two tangent ends with an arc
                t0[1],                                                  // End of last tangent
                if(R)                                                   // If rounded
                    let(r = abs(R),                                     // Get radius
                        n = r2sides4n(r),                               // Decide number of vertices
                        step = 360 / n,                                 // Angular step
                        arc = arcs[i],                                  // Get corner arc details
                        start = ceil(arc[1] / step + eps),              // Starting index
                        end = floor((arc[0] + arc[1]) / step - eps),    // Ending index
                        c = vec2(points[i])                             // Centre of arc
                    ) for(j = R > 0 ? [end : -1 : start] : [start : 1 : end], a = j * step)
                        c + r * [cos(a), sin(a)],                       // Points on the arc
                if(R)
                    t1[0],                                              // Start of next tangent
            ]
       ];