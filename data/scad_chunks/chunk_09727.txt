function convex_hull3d(points) = 
	(len(points) < 3)? list_range(len(points)) : let (	
		// start with a single triangle
		a=0, b=1, c=2,
		plane = plane3pt_indexed(points, a, b, c),
		d = _find_first_noncoplanar(plane, points, 3)
	) (d == len(points))? /* all coplanar*/ let (
		pts2d = [ for (p = points) xyz_to_planar(p, points[a], points[b], points[c]) ],
		hull2d = convex_hull2d(pts2d)
	) hull2d : let(
		remaining = [for (i = [3:len(points)-1]) if (i != d) i],
		// Build an initial tetrahedron.
		// Swap b, c if d is in front of triangle t.
		ifop = in_front_of_plane(plane, points[d]),
		bc = ifop? [c,b] : [b,c],
		b = bc[0],
		c = bc[1],
		triangles = [
			[a,b,c],
			[d,b,a],
			[c,d,a],
			[b,d,c]
		],
		// calculate the plane equations
		planes = [ for (t = triangles) plane3pt_indexed(points, t[0], t[1], t[2]) ]
	) _convex_hull_iterative(points, triangles, planes, remaining);


// Adds the remaining points one by one to the convex hull