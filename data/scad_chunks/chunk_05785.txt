module cubetruss(extents=6, clips=[], bracing, size, strut, clipthick, anchor=CENTER, spin=0, orient=UP) {
    clips = is_vector(clips)? [clips] : clips;
    size = is_undef(size)? $cubetruss_size : size;
    strut = is_undef(strut)? $cubetruss_strut_size : strut;
    bracing = is_undef(bracing)? $cubetruss_bracing : bracing;
    clipthick = is_undef(clipthick)? $cubetruss_clip_thickness : clipthick;
    extents = is_vector(extents)? point3d(extents,fill=1) : [1,extents,1];
    w = extents[0];
    l = extents[1];
    h = extents[2];
    s = [cubetruss_dist(w,1,size,strut), cubetruss_dist(l,1,size,strut), cubetruss_dist(h,1,size,strut)];
    attachable(anchor,spin,orient, size=s) {
        union() {
            for (zrow = [0:h-1]) {
                up((zrow-(h-1)/2)*(size-strut)) {
                    for (xcol = [0:w-1]) {
                        right((xcol-(w-1)/2)*(size-strut)) {
                            for (ycol = [0:l-1]) {
                                back((ycol-(l-1)/2)*(size-strut)) {
                                    cubetruss_segment(size=size, strut=strut, bracing=bracing);
                                }
                            }
                        }
                    }
                }
            }
            if (clipthick > 0) {
                for (vec = clips) {
                    exts = v_abs(rot(from=FWD, to=vec, p=extents));
                    rot(from=FWD,to=vec) {
                        for (zrow = [0:1:exts.z-1]) {
                            up((zrow-(exts.z-1)/2)*(size-strut)) {
                                fwd((exts.y*(size-strut)+strut)/2) {
                                    cubetruss_clip(size=size, strut=strut, extents=exts.x, clipthick=clipthick);
                                }
                            }
                        }
                    }
                }
            }
        }
        children();
    }
}


// Module: cubetruss_corner()
// Synopsis: Creates a multi-cube corner cubetruss shape.
// SynTags: Geom
// Topics: Trusses, CubeTruss, FDM Optimized, Parts
// See Also: cubetruss_segment(), cubetruss_support(), cubetruss(), cubetruss_corner()
// Usage:
//   cubetruss_corner(h, extents, [bracing=], [size=], [strut=], [clipthick=]);
// Description:
//   Creates a corner cubetruss with extents jutting out in one or more directions.
// Arguments:
//   h = The number of cubes high to make the base and horizontal extents.
//   extents = The number of cubes to extend beyond the corner.  If given as a vector of cube counts, gives the number of cubes to extend right, back, left, front, and up in order.  If the vector is shorter than length 5 the extra cube counts are taken to be zero.  
//   bracing = If true, adds internal cross-braces.  Default: `$cubetruss_bracing` (usually true)
//   size = The length of each side of the cubetruss cubes.  Default: `$cubetruss_size` (usually 30)
//   strut = The width of the struts on the cubetruss cubes.  Default: `$cubetruss_strut_size` (usually 3)
//   clipthick = The thickness of the clips.  Default: `$cubetruss_clip_thickness` (usually 1.6)
//   ---
//   anchor = Translate so anchor point is at origin (0,0,0).  See [anchor](attachments.scad#subsection-anchor).  Default: `CENTER`
//   spin = Rotate this many degrees around the Z axis.  See [spin](attachments.scad#subsection-spin).  Default: `0`
//   orient = Vector to rotate top towards.  See [orient](attachments.scad#subsection-orient).  Default: `UP`
// Examples:
//   cubetruss_corner(extents=2);
//   cubetruss_corner(extents=2, h=2);
//   cubetruss_corner(extents=[3,3,0,0,2]);
//   cubetruss_corner(extents=[3,0,3,0,2]);
//   cubetruss_corner(extents=[3,3,3,3,2]);