function _belt_points_info(type, points, open, twist, auto_twist, start_twist) = //! Helper function that calculates [twist, istwisted, points, tangents, arcs]
let(
    len = len(points),
    isleft = function(i) let(
            p = vec2(points[i]),
            p0 = vec2(points[(i - 1 + len) % len]),
            p1 = vec2(points[(i + 1) % len])
        ) cross(p-p0,p1-p) > 0,
    dotwist = function(i, istwisted) let( in = (i + 1) % len )
        is_list(twist) ? twist[i] :
        !is_undef(twist) ? i == twist :
        open && is_list(points[in][2]) && auto_twist ? !pulley_teeth(points[in][2]) && !xor(isleft(in), istwisted) :
        false,
    twisted = [
        for (
            i = 0,
            istwisted = start_twist,
            twist = dotwist(i, istwisted),
            nexttwisted = xor(twist, istwisted);
            i < len;
            i = i + 1,
            istwisted = nexttwisted,
            twist = dotwist(i, istwisted),
            nexttwisted = xor(twist, istwisted)
        ) [twist, istwisted] ],
    pointsx = mapi(points, function(i, p) !is_list(p[2]) ? p : [p.x, p.y, let( // if p[2] is not a list it is just r, otherwise it is taken to be a pulley and we calculate r
            isleft = isleft(i),
            r = belt_pulley_pr(type, p[2], twisted = !xor(pulley_teeth(p[2]), xor(isleft, twisted[i][1])))
        ) isleft ? -r : r ] ),
    tangents = rounded_polygon_tangents(pointsx),
    arcs = rounded_polygon_arcs(pointsx, tangents)
) [ [ for (t = twisted) t[0] ], [ for (t = twisted) t[1] ], pointsx, tangents, arcs];