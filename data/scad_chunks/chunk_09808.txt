module half_of(v=V_UP, cp=[0,0,0], s=100, planar=false)
{
	cp = is_scalar(cp)? cp*normalize(v) : cp;
	if (cp != [0,0,0]) {
		translate(cp) half_of(v=v, s=s, planar=planar) translate(-cp) children();
	} else if (planar) {
		v = (v==V_UP)? V_BACK : (v==V_DOWN)? V_FWD : v;
		ang = atan2(v.y, v.x);
		difference() {
			children();
			rotate(ang+90) {
				back(s/2) square(s, center=true);
			}
		}
	} else {
		difference() {
			children();
			rot(from=V_UP, to=-v) {
				up(s/2) cube(s, center=true);
			}
		}
	}
}


// Module: top_half()
//
// Usage:
//   top_half([z|cp], [s]) ...
//
// Description:
//   Slices an object at a horizontal X-Y cut plane, and masks away everything that is below it.
//
// Arguments:
//   cp = If given as a scalar, moves the cut plane up by the given amount.  If given as a point, specifies a point on the cut plane.  Default: [0,0,0]
//   z = The Z coordinate of the cut-plane, if given.  Use instead of `cp`.
//   s = Mask size to use.  Use a number larger than twice your object's largest axis.  If you make this too large, it messes with centering your view.  Default: 100
//   planar = If true, this becomes equivalent to a planar `back_half()`.
//
// Examples(Spin):
//   top_half() sphere(r=20);
//   top_half(z=5) sphere(r=20);
//   top_half(cp=5) sphere(r=20);
//   top_half(cp=[0,0,-8]) sphere(r=20);
// Example(2D):
//   top_half(planar=true) circle(r=20);