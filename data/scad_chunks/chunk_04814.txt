function _pb_intersect_sort(list, sort_idx=2) =
    len(list)<=1 ? list : let(
        pivot   = list[floor(len(list)/2)][sort_idx],
        lesser  = [ for (d = list) if (d[sort_idx] < pivot) d ],
        equal   = [ for (d = list) if (d[sort_idx] == pivot) d ],
        greater = [ for (d = list) if (d[sort_idx] > pivot) d ]        
    ) concat( _pb_intersect_sort(lesser, sort_idx), equal, _pb_intersect_sort(greater, sort_idx) );


//  function pb_parseNum(s)
//
//  Converts a string into a number. this can be an integer or a floating point variable.
//  The function can not handle hex notation.
//  s       (list)  String representing a number. Valid characters are +-0123456789e and .
//  return  (number)  Can be either integer positive or negative or floating point value positive or negative