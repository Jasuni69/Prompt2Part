function vnf_join(vnfs) =
    assert(is_vnf_list(vnfs) , "\nInput must be a list of VNFs.")
    len(vnfs)==1 ? vnfs[0]
    :
    let (
        offs  = cumsum([ 0, for (vnf = vnfs) len(vnf[0]) ]),
        verts = [for (vnf=vnfs) each vnf[0]],
        faces =
            [ for (i = idx(vnfs))
                let( faces = vnfs[i][1] )
                for (face = faces)
                    if ( len(face) >= 3 )
                        [ for (j = face)
                            assert( j>=0 && j<len(vnfs[i][0]),
                                    str("\nVNF number ", i, " has a face indexing an nonexistent vertex.") )
                            offs[i] + j ]
            ]
    )
    [verts,faces];



// Function: vnf_from_polygons()
// Synopsis: Returns a VNF from a list of 3D polygons.
// SynTags: VNF
// Topics: VNF Generators, Lists
// See Also: vnf_tri_array(), vnf_join(), vnf_vertex_array(), vnf_from_region()
// Usage:
//   vnf = vnf_from_polygons(polygons, [eps]);
// Description:
//   Given a list of 3D polygons, produces a VNF containing those polygons.
//   It is up to the caller to make sure that the points are in the correct order to make the face
//   normals point outward.  No checking for duplicate vertices is done.  If you want to
//   remove duplicate vertices use {{vnf_merge_points()}}.  Polygons with zero area are discarded from the face list by default.
//   If you give non-coplanar faces an error is displayed.  These checks increase run time by about 2x for triangular polygons, but
//   about 10x for pentagons; the checks can be disabled by setting fast=true.  
// Arguments:
//   polygons = The list of 3D polygons to turn into a VNF
//   fast = Set to true to skip area and coplanarity checks for increased speed.  Default: false
//   eps = Polygons with area smaller than this are discarded.  Default: EPSILON
// Example(3D,VPR=[60,0,40]): Construction of a dodecahedron from pentagon faces.
//   dihedral = 2*atan(PHI);   // dodecahedron face dihedral
//   rpenta = 10;              // pentagon face radius
//   edge = 2*rpenta*sin(36);  // edge length
//   inrad = 0.5*edge * PHI*PHI/sqrt(3-PHI);   // inner radius
//   face3d = path3d(pentagon(rpenta), inrad); // single face
//   facepoints = [
//       face3d,
//       for(a=[36:72:360]) zrot(a, yrot(180-dihedral, face3d)),
//       for(a=[36:72:360]) zrot(a, yrot(360-dihedral, face3d)),
//       yrot(180, face3d)
//   ];
//   vnf = vnf_from_polygons(facepoints, fast=true);
//   vnf_polyhedron(vnf);