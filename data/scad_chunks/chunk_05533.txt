function find_first(func, list, start=0) =
    assert(is_function(func))
    assert(is_list(list))
    assert(is_finite(start))
    let(
        listlen = len(list),
        _find_first = function(indexnum) (
            indexnum >= listlen? undef :
            func(list[indexnum])? indexnum :
            _find_first(indexnum+1)
        )
    )
    _find_first(start);


// Function: binsearch()
// Synopsis: Does a binary search of a sorted list to find the index of a given value.
// Topics: Function Literals, Data Structures, Searching
// See Also: map(), filter(), reduce(), accumulate(), hashmap(), find_all(), find_first()
// Usage:
//   idx = binsearch(key,list, [cmp]);
// Description:
//   Searches a sorted list for an entry with the given key, using a binary search strategy.
//   Returns the index of the matching item found.  If none found, returns undef.
// Arguments:
//   key = The key to look for.
//   list = The list of items to search through.
//   idx = If given, the index of the item sublists to use as the item key.
//   cmp = The comparator function literal to use.  Default: `f_cmp()`
// Example:
//   items = unique(rands(0,100,10000));
//   idx = binsearch(44, items);
// Example:
//   items = unique(rands(0,100,10000));
//   idx = binsearch(44, items, cmp=function(a,b) a-b);
// Example:
//   items = [for (i=[32:126]) [chr(i), i]];
//   idx = binsearch("G", items, idx=0);