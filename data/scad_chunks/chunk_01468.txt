module rail(type, length, colour = grey(90), use_polycircles = false) { //! Draw the specified rail
    width = rail_width(type);
    height = rail_height(type);

    vitamin(str("rail(", type[0], ", ", length, "): Linear rail ", type[0], " x ", length, "mm"));
    assert(rail_end(type) < (rail_pitch(type) - rail_bore(type)) / 2, type[0]);

    color(colour) {
        rbr = rail_bore(type) / 2;
        w = corrected_radius(rbr) * 2 + 2 * eps; // width of core big enough for the holes
        linear_extrude(height - rail_bore_depth(type)) difference() {
            square([length, w], center = true);

            rail_hole_positions(type, length)
                if (use_polycircles)
                    poly_circle(rail_hole(type) / 2);
                else
                    circle(d = rail_hole(type));
        }
        translate_z(rail_height(type) - rail_bore_depth(type))
            linear_extrude(rail_bore_depth(type)) difference() {
                square([length, w], center = true);

                rail_hole_positions(type, length)
                    if (use_polycircles)
                        poly_circle(rbr);
                    else
                        circle(rbr);
            }

        go = height - rail_groove_offset(type);
        gw = rail_groove_width(type);
        gd = gw / 2;
        sw = (width - w) / 2;
        for (m = [0, 1])
            mirror([0, m, 0])
                translate([0, -width / 2])
                    rotate([0, -90, 0])
                        linear_extrude(length, center = true)
                            polygon([ [0, 0], [0, sw], [height, sw], [height, 0], [go + gw/2, 0], [go, gd], [go - gw/2, 0] ]);
    }
}