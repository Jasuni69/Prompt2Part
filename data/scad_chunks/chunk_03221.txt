module SmoothHollowCube(size, wall_width, inner_curv=0) {
  $fa = ($fa >= 12) ? 1 : $fa;
  $fs = ($fs >= 2) ? 0.4 : $fs;

  size = is_num(size) ? [size, size, size] : size;

  min_ww_size = min(size[0]/2, size[1]/2, size[2]);
  wall_width = wall_width < min_ww_size ? wall_width : min_ww_size;
  max_inner_curv = (min(size[0], size[1])-2*wall_width)/2;
  inner_curv = inner_curv < max_inner_curv ? inner_curv : max_inner_curv;

  SmoothCorner(size[2], wall_width, inner_curv);
  translate([size[0], 0, 0])
    rotate([0, 0, 90])
    SmoothCorner(size[2], wall_width, inner_curv);
  translate([size[0], size[1], 0])
    rotate([0, 0, 180])
    SmoothCorner(size[2], wall_width, inner_curv);
  translate([0, size[1], 0])
    rotate([0, 0, 270])
    SmoothCorner(size[2], wall_width, inner_curv);

  wall_lengthx = size[0]-2*wall_width-2*inner_curv+0.002;
  wall_lengthy = size[1]-2*wall_width-2*inner_curv+0.002;
  wall_height = size[2];

  translate([size[0], wall_width+inner_curv-0.001, 0])
    rotate([0, 0, 90])
    SmoothWall(wall_lengthy, wall_height, wall_width);
  translate([wall_width, wall_width+inner_curv-0.001, 0])
    rotate([0, 0, 90])
    SmoothWall(wall_lengthy, wall_height, wall_width);
  translate([wall_width+inner_curv-0.001, 0, 0])
    SmoothWall(wall_lengthx, wall_height, wall_width);
  translate([wall_width+inner_curv-0.001, size[1]-wall_width, 0])
    SmoothWall(wall_lengthx, wall_height, wall_width);
}