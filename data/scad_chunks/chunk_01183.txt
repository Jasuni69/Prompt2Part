module camera(type, show_lens = true, fov_distance = 0, fov = undef) {           //! Draw specified PCB camera
    vitamin(str("camera(", type[0], "): ", type[1]));
    pcb = camera_pcb(type);

    not_on_bom()
        pcb(pcb);

    translate_z(pcb_thickness(pcb)) {
        camera_lens(type, show_lens = show_lens);
        if (show_lens&& fov_distance > 0) {
            lens = camera_lens(type);
            fov = is_undef(fov) ? camera_fov(type) : fov;
            if (is_list(fov))
                #translate_z(lens[2][0].z) // note: use of # is deliberate, to show highlighted field of view
                    translate(camera_lens_offset(type))
                        hull() {
                            cube([lens[1][1]/2, lens[1][1]/2, eps], center=true);
                            translate_z(fov_distance)
                                cube([2 * fov_distance * tan(fov.x / 2), 2 * fov_distance * tan(fov.y / 2), eps], center=true);
                        }
        }

        conn = camera_connector_size(type);
        if(conn) {
            pos = camera_connector_pos(type);
            color(grey(20))
                translate(pos)
                    rounded_rectangle(conn, 0.5);

            flex = [5, 0.1];
            color("orange")
                hull() {
                    translate_z(flex.y /2)
                        translate(camera_lens_offset(type) + [0, sign(pos.y) * camera_lens(type)[0][0].y / 2, 0])
                            cube([flex.x, eps, flex.y], center = true);

                    translate_z(conn.z - flex.y)
                        translate([camera_lens_offset(type).x, pos.y] - [0, conn.y / 2])
                             cube([flex.x, eps, flex.y], center = true);
                }
        }
    }
}