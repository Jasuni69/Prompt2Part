module nut_trap_side(trap_width, spec, shape, thickness, nutwidth, anchor=BOT, orient, spin, poke_len=0, poke_diam) {
  dummy9=assert(is_num(trap_width), "trap_width is missing or the wrong type");
  tempspec = _get_spec(spec, "nut_info", "nut_trap", shape=shape, thickness=thickness);
  nutdata = _struct_reset(tempspec, [["width", nutwidth]]);
  $screw_spec = is_def(spec) ? nutdata : $screw_spec;
  dummy8 = _validate_nut_spec(nutdata);
  nutwidth = struct_val(nutdata,"width")+2*get_slop();
  dummy = assert(is_num(poke_len) && poke_len>=0, "poke_len must be a nonnegative number")
          assert(is_undef(poke_diam) || (is_num(poke_diam) && poke_diam>0), "poke_diam must be a positive number")
          assert(is_num(trap_width) && trap_width>=nutwidth/2, str("trap_width is smaller than nut width: ",nutwidth));
  nutthickness = struct_val(nutdata, "thickness")+2*get_slop();
  cubesize = [trap_width, nutwidth,nutthickness];
  halfwidth = shape=="square" ? nutwidth/2 : nutwidth/sqrt(3);
  shift = cubesize[0]/2 - halfwidth/2;
  default_tag("remove")
    attachable(size=cubesize+[halfwidth,0,0], offset=[shift,0,0],anchor=anchor,orient=orient,spin=spin)
    {
       union(){
         if (shape=="square") left(nutwidth/2) cuboid(cubesize+[halfwidth,0,0],anchor=LEFT);
         else {
            cuboid(cubesize,anchor=LEFT);
            linear_extrude(height=nutthickness,center=true)hexagon(id=nutwidth);
         }
         if (poke_len>0)
           xcyl(l=poke_len, d=default(poke_diam, nutthickness), anchor=RIGHT);
       }
       children();
    }     
}

// Module: nut_trap_inline()
// Synopsis: Creates an inline nut trap mask.
// SynTags: Geom
// Topics: Threading, Screws
// See Also: screw(), screw_hole()
// Usage:
//   nut_trap_inline(length|l|heigth|h, [spec], [shape], [$slop=], [anchor=], [orient=], [spin=]) [ATTACHMENTS];
// Description:
//   Create a nut trap that extends along the axis of the screw.  The nut width
//   will be increased by `2*$slop` to allow adjusting the fit of the trap for your printer.
//   If no tag is present the trap will be tagged with "remove".  Note that you can omit the specification
//   and it will be inherited from a parent screw_hole to provide the screw size.  It's also possible to 
//   do this backwards, to declare a trap at a screw size and make a child screw hole, which will inherit
//   the screw dimensions.  
// Arguments:
//   length/l/height/h = length/height of nut trap
//   spec = nut specification, e.g. "M5" or "#8".  See [screw naming](#subsection-screw-naming).  This can also be a screw or nut specification structure of the form produced by {{nut_info()}} or {{screw_info()}}.  
//   shape = "hex" or "square to determine type of nut.  Default: "hex"
//   ---
//   $slop = extra space left to account for printing over-extrusion.  Default: 0
//   anchor = Translate so anchor point is at origin (0,0,0).  See [anchor](attachments.scad#subsection-anchor).  Default: `TOP`
//   spin = Rotate this many degrees around the Z axis after anchor.  See [spin](attachments.scad#subsection-spin).  Default: `0`
//   orient = Vector to rotate top towards, after spin.  See [orient](attachments.scad#subsection-orient).  Default: `UP`
// Side Effects:
//   `$screw_spec` is set to the spec specification structure. 
// Example: Basic trap
//   nut_trap_inline(10, "#8");
// Example: Basic trap with allowance for a looser fit
//   nut_trap_inline(10, "#8", $slop=.1);
// Example: Square trap (just a cube, but hopefully just the right size)
//   nut_trap_inline(10, "#8", shape="square");
// Example: Attached to a screw hole
//   screw_hole("#8,1",head="socket",counterbore=true, $fn=32) 
//     position(BOT) nut_trap_inline(10);
// Example: Nut trap with child screw hole
//   nut_trap_inline(10, "#8")
//     position(TOP)screw_hole(length=10,anchor=BOT,head="flat",$fn=32);
// Example(Med,NoAxes): a pipe clamp
//   $fa=5;$fs=0.5;
//   bardiam = 32;
//   bandwidth = 10;
//   thickness = 3;
//   back_half()
//   diff()
//     tube(id=bardiam, wall = thickness, h=bandwidth, orient=BACK)
//       left(thickness/2) position(RIGHT) cube([bandwidth, bandwidth, 14], anchor = LEFT, orient=FWD)
//       {
//          screw_hole("#4",length=12, head="socket",counterbore=6,anchor=CENTER)
//             position(BOT) nut_trap_inline(l=6,anchor=BOT);
//          tag("remove")right(1)position(RIGHT)cube([11+thickness, 11, 2], anchor = RIGHT);
//       }