function _extrusion_isect(geom,line,bounded,flip) =
   let(
       region=geom[1],
       length=geom[2],
       twist = geom[3],
       scale=point2d(geom[4]),
       shift=point2d(geom[5]),

       reg=region_parts(region),
       check1 = assert(len(reg)==1, "Region has multiple disconnected components, which is not supported"),
       path = reg[0][0],
       
       bot_top = [path3d(path, -length/2),
                  move(shift,zrot(twist,scale(scale,path3d(path, length/2))))],

       btisect = [for(poly=bot_top) polygon_line_intersection(poly, line, bounded)],
       tbhit = [for(i=[0:1]) if (is_vector(btisect[i])) i],

       tbresult = len(tbhit)==0 ? undef
                :
                  let(
                      anchor = [0,0,2*tbhit[0]-1],
                      anch = _find_anchor(anchor,geom),
                      z = anch[2],
                      y = rot(from=UP,to=z, p=zrot(anch[3], BACK)),
                      x = cross(y,z),
                      shift = (!flip?ident(2):[[0,1],[-1,0]])*[x,y]*(btisect[tbhit[0]]-anch[1])
                   )
                   [anchor,shift]
    )
    is_def(tbresult) ? tbresult
  : 
    assert(twist==0, "Extrusion has nonzero twist which is not supported")
    assert(shift==[0,0], "Extrusion has nonzero shift, which is not supported.")
    assert(scale==[1,1], "Extrusion is conical, which is not supposrted")
    let(
        isect = polygon_line_intersection(path, path2d(line), RAY),
        check1=assert(is_def(isect), "Cannot find side anchor to extrusion"),
        
        pt = let(
                 pts = flatten(isect),
                 dists = [for(pt=pts) norm(pt-line[0])]
             )
             pts[max_index(dists)],
        ray = line[1]-line[0],
        anchor = point3d(unit(point2d(ray))),
        slope = ray.z/norm([ray.x,ray.y]),
        anch = _find_anchor(anchor,geom),
        z = anch[2],
        y = rot(from=UP,to=z,p=zrot(anch[3], BACK)),
        shift = (norm(pt)*slope)
    )
    [anchor,shift*RIGHT];