module rd_transistor(type, value, kind = "Transistor", lead_positions = undef, z = 5, tail = 3) { //! Draw a radial lead transistor
    vitamin(str("rd_transistor(", type[0], ", \"", value, "\"): ", kind, " ", type[0], " ", value));

    size = rd_transistor_size(type);
    colours = rd_transistor_colours(type);

    $fs = fs; $fa = fa;
    translate_z(z) {
        if(type[0] == "TO92") {
            color(colours[0])
                linear_extrude(size.z)
                    difference() {
                        circle(d = size.z);

                        translate([0, size.x / 2])
                            square([size.x + 1, 2 * (size.x - size.y)], center = true);
                    }

            color(colours[1])
                translate([0, -size.x / 2 + size.y, size.z / 2])
                    rotate([0, 90, 90])
                        linear_extrude(eps)
                            resize([size.z * 0.8, 0], auto = true)
                                text(value, valign = "center", halign = "center");
        }

        if(type[0] == "E_LINE") {
            color(colours[0])
                linear_extrude(size.z)
                    hull() {
                        for(side = [-1, 1])
                            translate([side * (size.x - size.y) / 2, 0])
                                circle(d = size.y);

                        translate([-size.x / 2, 0])
                            square([size.x, size.y / 2]);
                    }

            color(colours[1])
                translate([0, size.y / 2, size.z / 2])
                    rotate([-90, 180, 0])
                        linear_extrude(eps)
                            resize([size.x * 0.85, 0], auto = true)
                                text(value, valign = "center", halign = "center");
        }
    }

    lead_positions = is_undef(lead_positions) ? [for(i = [-1:1]) [inch(0.1 * i), 0]] : lead_positions;
    lead_starts = rd_transistor_lead_posns(type);
    lead = rd_transistor_lead(type);

    assert(len(lead_positions) == len(lead_starts), "must give a position for each lead");

    for(i = [0 : len(lead_starts) - 1]) {
        start = lead_starts[i];
        end = lead_positions[i];

        radial_lead(start, end, z, tail, lead);
    }
}