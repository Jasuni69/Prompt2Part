module offset3d(r, size=1000, convexity=10) {
    req_children($children);
    n = quant(max(8,segs(abs(r))),4);
    attachable(){
      if (r==0) {
          children();
      } else if (r>0) {
          render(convexity=convexity)
          minkowski() {
              children();
              sphere(r, $fn=n);
          }
      } else {
          size2 = size * [1,1,1];
          size1 = size2 * 1.02;
          render(convexity=convexity)
          difference() {
              cube(size2, center=true);
              minkowski() {
                  difference() {
                      cube(size1, center=true);
                      children();
                  }
                  sphere(-r, $fn=n);
              }
          }
      }
      union();
    }
}


// Module: round3d()
// Synopsis: Rounds arbitrary 3d objects.
// SynTags: Geom
// Topics: Rounding, Miscellaneous
// See Also: offset3d(), minkowski_difference()
// Usage:
//   round3d(r) CHILDREN;
//   round3d(or) CHILDREN;
//   round3d(ir) CHILDREN;
//   round3d(or, ir) CHILDREN;
// Description:
//   Rounds arbitrary 3D objects.  Giving `r` rounds all concave and convex corners.  Giving just `ir`
//   rounds just concave corners.  Giving just `or` rounds convex corners.  Giving both `ir` and `or`
//   can let you round to different radii for concave and convex corners.  The 3D object must not have
//   any parts narrower than twice the `or` radius.  Such parts will disappear.   The children must fit
//   inside a cube of the specified size.  This is an *extremely*
//   slow operation.  I cannot emphasize enough just how slow it is.  It uses `minkowski()` multiple times.
//   Use this as a last resort.  This is so slow that no example images will be rendered.
// Arguments:
//   r = Radius to round all concave and convex corners to.
//   or = Radius to round only outside (convex) corners to.  Use instead of `r`.
//   ir = Radius to round only inside (concave) corners to.  Use instead of `r`.
//   size = size of centered cube that contains the children.  Default: 1000