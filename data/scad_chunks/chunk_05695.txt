module egg(length,r1,r2,R,d1,d2,D,anchor=CENTER, spin=0)
{
  path = egg(length,r1,r2,R,d1,d2,D);
  r1 = get_radius(r1=r1,d1=d1);
  r2 = get_radius(r1=r2,d1=d2);
  anchors = [named_anchor("left", [-length/2+r1,0], BACK, 0),
             named_anchor("right", [length/2-r2,0], BACK, 0)];
  attachable(anchor, spin, two_d=true, path=path, extent=true, anchors=anchors){
    polygon(path);
    children();
  }
}


// Function&Module: ring()
// Synopsis: Draws a 2D ring or partial ring or returns a region or path
// SynTags: Geom, Region, Path
// Topics: Shapes (2D), Paths (2D), Path Generators, Regions, Attachable
// See Also: arc(), circle()
//
// Usage: ring or partial ring from radii/diameters
//   region=ring(n, r1=|d1=, r2=|d2=, [full=], [angle=], [start=]);
// Usage: ring or partial ring from radius and ring width
//   region=ring(n, ring_width, r=|d=, [full=], [angle=], [start=]);
// Usage: ring or partial ring passing through three points
//   region=ring(n, [ring_width], [r=,d=], points=[P0,P1,P2], [full=]);
// Usage: ring or partial ring from tangent point on segment `[P0,P1]` to the tangent point on segment `[P1,P2]`.
//   region=ring(n, corner=[P0,P1,P2], r1=|d1=, r2=|d2=, [full=]);
// Usage: ring or partial ring based on setting a width at the X axis and height above the X axis
//   region=ring(n, [ring_width], [r=|d=], width=, thickness=, [full=]);
// Usage: as a module
//   ring(...) [ATTACHMENTS];
// Description:
//   If called as a function, returns a region or path for a ring or part of a ring.  If called as a module, creates the corresponding 2D ring or partial ring shape.
//   The geometry of the ring can be specified using any of the methods supported by {{arc()}}.  If `full` is true (the default) the ring will be complete and the
//   returned value a region.  If `full` is false then the return is a path describing a partial ring.  The returned path is always clockwise with the larger radius arc first.
//   .
//   You can specify the ring dimensions in a variety of ways similar to how you can use {{arc()}}.
//   * Provide two radii or diameters using `r1` or `d1` and `r2` or `d2`.
//   * Specify `r` or `d` and `ring_width`.  A positive `ring_width` value will grow the ring outward from your given radius/diameter; if you give a negative `ring_width` then the ring will grow inward from your given radius/diameter.
//   * Set `points` to a list of three points then an arc is chosen to pass through those points and the second arc of the ring is defined by either `ring_width`, `r` or `d`. 
//   * Give `width`, `thickness`, and either `r`, `d` or `ring_width`.  The `width` and `thickness` define an arc whose endpoints lie on the X axis with the specified width between them, and whose height is `thickness`.  The ring is defined by that arc, combined with either `ring_width` or the given radius/diameter.
//   .
//   If you specify the ring using `points` or using `width` and `thickness` then that determine its location.  Otherwise the ring appears centered at the origin.
//   In that case, you can shift it to a different center point by setting `cp`.  Alternatively you can set `corner` to a list of three points defining a corner and the
//   ring will be placed tangent to that corner.  
// Arguments:
//   n = Number of vertices to use for the inner and outer portions of the ring
//   ring_width = width of the ring.  Can be positive or negative
//   ---
//   r1/d1 = one of the radii or diameters of the ring.  Must combine with `r2/d2`.
//   r2/d2 = one of the radii or diameters of the ring.  Must combine with `r1/d1`.
//   r/d = radius or diameter of the ring.  Must combine with `ring_width`, `points` or `center`
//   full = if true create a full ring, if false create a partial ring.  Default: true unless `angle` is given
//   cp = Centerpoint of ring.
//   points = Points on the ring boundary.  Combine with `r/d` or `ring_width`
//   corner = A path of two segments to fit the ring tangent to.  Combine with `r1/d1` and `r2/d2` or with `r/d` and `ring_width`.  
//   long = if given with cp and points takes the long arc instead of the default short arc.  Default: false
//   cw = if given with cp and 2 points takes the arc in the clockwise direction.  Default: false
//   ccw = if given with cp and 2 points takes the arc in the counter-clockwise direction.  Default: false
//   width = If given with `thickness`, ring is defined based on an arc with ends on X axis.  Must combine with `thickness` and one of `ring_width`, `r` or `d`. 
//   thickness = If given with `width`, ring is defined based on an arc with ends on X axis, and this height above the X axis.   Must combine with `width` and one of`ring_width`, `r` or `d`. 
//   start = Start angle of ring.  Default: 0
//   angle = If scalar, the end angle in degrees relative to start parameter.  If a vector specifies start and end angles of ring.  
//   anchor = Translate so anchor point is at origin (0,0,0).  See [anchor](attachments.scad#subsection-anchor).  (Module only) Default: `CENTER`
//   spin = Rotate this many degrees around the Z axis after anchor.  See [spin](attachments.scad#subsection-spin).  (Module only) Default: `0`
// Examples(2D):
//   ring(r1=5,r2=7, n=32);
//   ring(r=5,ring_width=-1, n=32);
//   ring(r=7, n=5, ring_width=-4);
//   ring(points=[[0,0],[3,3],[5,2]], ring_width=2, n=32);
//   ring(points=[[0,0],[3,3],[5,2]], r=1, n=32);
//   ring(cp=[3,3], points=[[4,4],[1,3]], ring_width=1);
//   ring(corner=[[0,0],[4,4],[7,3]], r2=2, r1=1.5,n=22,full=false);
//   ring(r1=5,r2=7, angle=[33,110], n=32);
//   ring(r1=5,r2=7, angle=[0,360], n=32);  // full circle
//   ring(r=5, points=[[0,0],[3,3],[5,2]], full=false, n=32);
//   ring(32,-2, cp=[1,1], points=[[4,4],[-3,6]], full=false);
// Example(2D): Using corner, the outer radius is the one tangent to the corner
//   corner = [[0,0],[4,4],[7,3]];
//   ring(corner=corner, r2=3, r1=2,n=22);
//   stroke(corner, width=.1,color="red");
// Example(2D): For inner radius tangent to a corner, specify `r=` and `ring_width`.
//   corner = [[0,0],[4,4],[7,3]];
//   ring(corner=corner, r=3, ring_width=1,n=22,full=false);
//   stroke(corner, width=.1,color="red");
// Example(2D): Here the red dashed area shows the partial ring bounded by the specified width and thickness arc at the inside and then expanding by the ring width of 2.   
//   $fn=128;
//   region = ring(width=5,thickness=1.5,ring_width=2);   
//   path = ring(width=5,thickness=1.5,ring_width=2,full=false);
//   stroke(region,width=.25);
//   color("red") dashed_stroke(path,dashpat=[1.5,1.5],closed=true,width=.25);