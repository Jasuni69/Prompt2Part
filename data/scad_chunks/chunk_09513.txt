module trapezoidal_threaded_rod(
	d=10,
	l=100,
	pitch=2,
	thread_angle=15,
	thread_depth=undef,
	left_handed=false,
	bevel=false,
	bevel1=false,
	bevel2=false,
	starts=1,
	profile=undef,
	internal=false,
	slop=undef,
	orient=ORIENT_Z,
	align=V_CENTER,
	center=undef
) {
	function _thread_pt(thread, threads, start, starts, astep, asteps, part, parts) =
		astep + asteps * (thread + threads * (part + parts * start));

	d = internal? d+default(slop,PRINTER_SLOP)*3 : d;
	astep = 360 / quantup(segs(d/2), starts);
	asteps = ceil(360/astep);
	threads = ceil(l/pitch/starts)+(starts<4?4-starts:1);
	depth = min((thread_depth==undef? pitch/2 : thread_depth), pitch/2/tan(thread_angle));
	pa_delta = min(pitch/4-0.01,depth*tan(thread_angle)/2)/pitch;
	dir = left_handed? -1 : 1;
	r1 = -depth/pitch;
	z1 = 1/4-pa_delta;
	z2 = 1/4+pa_delta;
	profile = profile!=undef? profile : [
		[-z2, r1],
		[-z1,  0],
		[ z1,  0],
		[ z2, r1],
	];
	parts = len(profile);
	poly_points = concat(
		[
			for (
				start  = [0 : starts-1],
				part   = [0 : parts-1],
				thread = [0 : threads-1],
				astep  = [0 : asteps-1]
			) let (
				ppt = profile[part] * pitch,
				dz = ppt.x,
				r = ppt.y + d/2,
				a = astep / asteps,
				c = cos(360 * (a * dir + start/starts)),
				s = sin(360 * (a * dir + start/starts)),
				z = (thread + a - threads/2) * starts * pitch
			) [r*c, r*s, z+dz]
		],
		[[0, 0, -threads*pitch*starts/2-pitch/4], [0, 0, threads*pitch*starts/2+pitch/4]]
	);
	point_count = len(poly_points);
	poly_faces = concat(
		// Thread surfaces
		[
			for (
				start  = [0 : starts-1],
				part   = [0 : parts-2],
				thread = [0 : threads-1],
				astep  = [0 : asteps-1],
				trinum = [0, 1]
			) let (
				p0 = _thread_pt(thread, threads, start, starts, astep, asteps, part, parts),
				p1 = _thread_pt(thread, threads, start, starts, astep, asteps, part+1, parts),
				p2 = _thread_pt(thread, threads, start, starts, astep+1, asteps, part, parts),
				p3 = _thread_pt(thread, threads, start, starts, astep+1, asteps, part+1, parts),
				tri = trinum==0? [p0, p1, p3] : [p0, p3, p2],
				otri = left_handed? [tri[0], tri[2], tri[1]] : tri
			)
			if (!(thread == threads-1 && astep == asteps-1)) otri
		],
		// Thread trough bottom
		[
			for (
				start  = [0 : starts-1],
				thread = [0 : threads-1],
				astep  = [0 : asteps-1],
				trinum = [0, 1]
			) let (
				p0 = _thread_pt(thread, threads, start, starts, astep, asteps, parts-1, parts),
				p1 = _thread_pt(thread, threads, (start+(left_handed?1:starts-1))%starts, starts, astep+asteps/starts, asteps, 0, parts),
				p2 = p0 + 1,
				p3 = p1 + 1,
				tri = trinum==0? [p0, p1, p3] : [p0, p3, p2],
				otri = left_handed? [tri[0], tri[2], tri[1]] : tri
			)
			if (
				!(thread >= threads-1 && astep > asteps-asteps/starts-2) &&
				!(thread >= threads-2 && starts == 1 && astep >= asteps-1)
			) otri
		],
		// top and bottom thread endcap
		[
			for (
				start  = [0 : starts-1],
				part   = [1 : parts-2],
				is_top = [0, 1]
			) let (
				astep = is_top? asteps-1 : 0,
				thread = is_top? threads-1 : 0,
				p0 = _thread_pt(thread, threads, start, starts, astep, asteps, 0, parts),
				p1 = _thread_pt(thread, threads, start, starts, astep, asteps, part, parts),
				p2 = _thread_pt(thread, threads, start, starts, astep, asteps, part+1, parts),
				tri = is_top? [p0, p1, p2] : [p0, p2, p1],
				otri = left_handed? [tri[0], tri[2], tri[1]] : tri
			) otri
		],
		// body side triangles
		[
			for (
				start  = [0 : starts-1],
				is_top = [false, true],
				trinum = [0, 1]
			) let (
				astep = is_top? asteps-1 : 0,
				thread = is_top? threads-1 : 0,
				ostart = (is_top != left_handed? (start+1) : (start+starts-1))%starts,
				ostep = is_top? astep-asteps/starts : astep+asteps/starts,
				oparts = is_top? parts-1 : 0,
				p0 = is_top? point_count-1 : point_count-2,
				p1 = _thread_pt(thread, threads, start, starts, astep, asteps, 0, parts),
				p2 = _thread_pt(thread, threads, start, starts, astep, asteps, parts-1, parts),
				p3 = _thread_pt(thread, threads, ostart, starts, ostep, asteps, oparts, parts),
				tri = trinum==0?
					(is_top? [p0, p1, p2] : [p0, p2, p1]) :
					(is_top? [p0, p3, p1] : [p0, p3, p2]),
				otri = left_handed? [tri[0], tri[2], tri[1]] : tri
			) otri
		],
		// Caps
		[
			for (
				start  = [0 : starts-1],
				astep  = [0 : asteps/starts-1],
				is_top = [0, 1]
			) let (
				thread = is_top? threads-1 : 0,
				part = is_top? parts-1 : 0,
				ostep = is_top? asteps-astep-2 : astep,
				p0 = is_top? point_count-1 : point_count-2,
				p1 = _thread_pt(thread, threads, start, starts, ostep, asteps, part, parts),
				p2 = _thread_pt(thread, threads, start, starts, ostep+1, asteps, part, parts),
				tri = is_top? [p0, p2, p1] : [p0, p1, p2],
				otri = left_handed? [tri[0], tri[2], tri[1]] : tri
			) otri
		]
	);
	orient_and_align([d,d,l], orient, align, center) {
		difference() {
			polyhedron(points=poly_points, faces=poly_faces, convexity=threads*starts*2);
			zspread(l+4*pitch*starts) cube([d+1, d+1, 4*pitch*starts], center=true);
			if (bevel || bevel1 || bevel2) {
				depth1 = (bevel || bevel1) ? depth : 0;
				depth2 = (bevel || bevel2) ? depth : 0;
				cylinder_mask(d=d, l=l+0.01, chamfer1=depth1, chamfer2=depth2);
			}
		}
	}
}


// Module: trapezoidal_threaded_nut()
// Description:
//   Constructs a hex nut for a threaded screw rod.  This method makes
//   much smoother threads than the naive linear_extrude method.
//   For metric screw threads, use thread_angle=30 and leave out thread_depth argument.
//   For SAE screw threads, use thread_angle=30 and leave out thread_depth argument.
//   For metric trapezoidal threads, use thread_angle=15 and thread_depth=pitch/2.
//   For ACME threads, use thread_angle=14.5 and thread_depth=pitch/2.
//   For square threads, use thread_angle=0 and thread_depth=pitch/2.
// Arguments:
//   od = diameter of the nut.
//   id = diameter of threaded rod to screw onto.
//   h = height/thickness of nut.
//   pitch = Length between threads.
//   thread_depth = Depth of the threads.  Default=pitch/2.
//   thread_angle = The pressure angle profile angle of the threads.  Default = 14.5 degree ACME profile.
//   left_handed = if true, create left-handed threads.  Default = false
//   starts = The number of lead starts.  Default = 1
//   bevel = if true, bevel the thread ends.  Default: true
//   slop = printer slop calibration to allow for tight fitting of parts.  Default: `PRINTER_SLOP`
//   profile = The shape of a thread, if not a symmetric trapezoidal form.  Given as a 2D path, where X is between -1/2 and 1/2, representing the pitch distance, and Y is 0 for the peak, and `-depth/pitch` for the valleys.  The segment between the end of one thread profile and the start of the next is automatic, so the start and end coordinates should not both be at the same Y at X = Â±1/2.  This path is scaled up by the pitch size in both dimensions when making the final threading.  This overrides the `thread_angle` and `thread_depth` options.
//   orient = Orientation of the nut.  Use the `ORIENT_` constants from `constants.scad`.  Default: `ORIENT_Z`.
//   align = Alignment of the nut.  Use the `V_` constants from `constants.scad`.  Default: `V_CENTER`.
// Examples(Med):
//   trapezoidal_threaded_nut(od=16, id=8, h=8, pitch=2, slop=0.2, align=V_UP);
//   trapezoidal_threaded_nut(od=17.4, id=10, h=10, pitch=2, slop=0.2, left_handed=true);
//   trapezoidal_threaded_nut(od=17.4, id=10, h=10, pitch=2, thread_angle=15, starts=3, $fa=1, $fs=1);