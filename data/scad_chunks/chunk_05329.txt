function bezpath_closest_point(bezpath, pt, N=3, max_err=0.01, seg=0, min_seg=undef, min_u=undef, min_dist=undef) =
    assert(is_vector(pt))
    assert(is_int(N))
    assert(is_num(max_err))
    assert(len(bezpath)%N == 1, str("\nA degree ",N," bezier path should have a multiple of ",N," points in it, plus 1."))
    let(curve = select(bezpath,seg*N,(seg+1)*N))
    (seg*N+1 >= len(bezpath))? (
        let(curve = select(bezpath, min_seg*N, (min_seg+1)*N))
        [min_seg, bezier_closest_point(curve, pt, max_err=max_err)]
    ) : (
        let(
            curve = select(bezpath,seg*N,(seg+1)*N),
            u = bezier_closest_point(curve, pt, max_err=0.05),
            dist = norm(bezier_points(curve, u)-pt),
            mseg = (min_dist==undef || dist<min_dist)? seg : min_seg,
            mdist = (min_dist==undef || dist<min_dist)? dist : min_dist,
            mu = (min_dist==undef || dist<min_dist)? u : min_u
        )
        bezpath_closest_point(bezpath, pt, N, max_err, seg+1, mseg, mu, mdist)
    );



// Function: bezpath_length()
// Synopsis: Approximate the length of a bezier path.
// Topics: Bezier Paths
// See Also: bezier_points(), bezier_curve(), bezier_length()
// Usage:
//   plen = bezpath_length(path, [N], [max_deflect]);
// Description:
//   Approximates the length of the bezier path.
// Arguments:
//   path = A bezier path to approximate.
//   N = The degree of the bezier curves.  Cubic beziers have N=3.  Default: 3
//   max_deflect = The largest amount of deflection from the true curve to allow for approximation.