module pcb_component(comp, cutouts = false, angle = undef) { //! Draw pcb component from description
    function show(comp, part) = (comp[3] == part || comp[3] == str("-",part)) && (!cutouts || angle == undef || angle == comp.z);
    function param(n, default = 0) = len(comp) > n && !is_undef(comp[n]) ? comp[n] : default;
    rotate(comp.z) {
        // Components that have a cutout parameter go in this section
        if(show(comp, "2p54header")) let($show_plugs = show_plugs && param(9, true))
                                        pin_header(2p54header, comp[4], comp[5], param(6, false), param(8, false), cutouts, colour = param(7, undef));
        if(show(comp, "2p54joiner"))    pin_header(2p54joiner, comp[4], comp[5], param(6, false), param(8, false), cutouts, colour = param(7, undef));
        if(show(comp, "2p54boxhdr")) let($show_plugs = show_plugs && param(7, true))
                                        box_header(2p54header, comp[4], comp[5], param(6, false), cutouts, param(8, false));
        if(show(comp, "2p54socket"))    pin_socket(2p54header, comp[4], comp[5], param(6, false), param(7, 0), param(8, false), cutouts, param(9, undef));
        if(show(comp, "chip"))          chip(comp[4], comp[5], comp[6], param(7, grey(30)), cutouts);
        if(show(comp, "rj45"))          rj45(cutouts);
        if(show(comp, "usb_A"))         usb_Ax1(cutouts);
        if(show(comp, "usb_vAx1"))      usb_vAx1(cutouts);
        if(show(comp, "usb_Ax1"))       usb_Ax1(cutouts);
        if(show(comp, "usb_Ax2"))       usb_Ax2(cutouts);
        if(show(comp, "usb_uA"))        usb_uA(cutouts);
        if(show(comp, "usb_miniA"))     usb_miniA(cutouts);
        if(show(comp, "usb_B"))         usb_B(cutouts);
        if(show(comp, "usb_C"))         usb_C(cutouts);
        if(show(comp, "jack"))          jack(cutouts);
        if(show(comp, "barrel_jack"))   barrel_jack(cutouts);
        if(show(comp, "hdmi"))          hdmi(hdmi_full, cutouts);
        if(show(comp, "mini_hdmi"))     hdmi(hdmi_mini, cutouts);
        if(show(comp, "micro_hdmi"))    hdmi(hdmi_micro, cutouts);
        if(show(comp, "flex"))          flex(cutouts);
        if(show(comp, "flat_flex"))     flat_flex(param(4, false) ? large_ff : small_ff, cutouts);
        if(show(comp, "uSD"))           uSD(comp[4], cutouts);
        if(show(comp, "trimpot10"))     trimpot10(param(4, false), cutouts);
        if(show(comp, "molex_usb_Ax2")) molex_usb_Ax2(cutouts);
        if(show(comp, "molex_usb_Ax1")) molex_usb_Ax1(cutouts);
        if(show(comp, "smd_led"))       smd_led(comp[4], comp[5], cutouts);
        if(show(comp, "7seg"))          let(z = param(6, 0)) translate_z(z) 7_segment_digits(comp[4], comp[5], pin_length = z + 3, cutout = cutouts);
        if(show(comp, "block"))         block(size = [comp[4], comp[5], comp[6]], colour = comp[7], makes_cutout = param(8), r = param(9, 0), rtop = param(10, 0));
        if(!cutouts) {
            // Components that don't have a cutout parameter go in this section
            if(show(comp, "button"))        square_button(comp[4], param(6, "yellow"), param(5, false));
            if(show(comp, "button_6mm"))    square_button(button_6mm);
            if(show(comp, "button_4p5mm"))  square_button(button_4p5mm);
            if(show(comp, "microswitch"))   translate_z(microswitch_thickness(comp[4])/2) microswitch(comp[4]);
            if(show(comp, "pcb"))           translate_z(comp[4]) pcb(comp[5]);
            if(show(comp, "standoff"))      standoff(comp[4], comp[5], comp[6], comp[7]);
            if(show(comp, "term254"))       green_terminal(gt_2p54,comp[4], comp[5], param(6,"lime"));
            if(show(comp, "gterm"))         green_terminal(comp[4], comp[5], comp[6], param(7,"lime"));
            if(show(comp, "gterm35"))       green_terminal(gt_3p5, comp[4], comp[5], param(6,"lime"));
            if(show(comp, "gterm508"))      green_terminal(gt_5p08, comp[4], comp[5], param(6,"lime"));
            if(show(comp, "gterm635"))      green_terminal(gt_6p35, comp[4], comp[5], param(6,"lime"));
            if(show(comp, "term35"))        terminal_35(comp[4], param(5,"blue"));
            if(show(comp, "transition"))    idc_transition(2p54header, comp[4], comp[5]);
            if(show(comp, "led"))           let(z = param(6, 0)) translate_z(z + eps) led(comp[4], comp[5], 2.6 + z, param(7, 0));
            if(show(comp, "pdip"))          pdip(comp[4], comp[5], param(6, false), param(7, inch(0.3)));
            if(show(comp, "ax_res"))        ax_res(comp[4], comp[5], param(6, 5), param(7, 0));
            if(show(comp, "ax_diode"))      ax_diode(type = comp[4], value = comp[5], pitch = param(6, 0));
            if(show(comp, "rd_xtal"))       rd_xtal(type = comp[4], value = param(5, undef), z = param(6, 0), pitch = param(7, undef)); // type, value, z, forced pitch
            if(show(comp, "rd_electrolytic")) rd_electrolytic(type = comp[4], value = param(5, undef), z = param(6, 0), pitch = param(7, undef)); // type, value, z, forced pitch
            if(show(comp, "rd_disc"))       rd_disc(type = comp[4], value = param(5, undef), z = param(6, 0), pitch = param(7, inch(0.2))); // type, value, z, forced pitch
            if(show(comp, "rd_module"))     rd_module(type = comp[4], value = comp[5]);
            if(show(comp, "rd_transistor")) rd_transistor(type = comp[4], value = comp[5], lead_positions = param(6, undef), z = param(7, 5), kind = param(8,"Transistor"));
                                             // type, value, lead positions, z, kind
            if(show(comp, "rd_box_cap"))    rd_box_cap(type = comp[4], kind = comp[5], value = comp[6]);
            if(show(comp, "rd_cm_choke"))   rd_cm_choke(type = comp[4], value = comp[5]);
            if(show(comp, "rd_coil"))       rd_coil(type = comp[4], value = comp[5], pitch = param(6, undef));
            if(show(comp, "link"))          wire_link(l = comp[4], h = param(5, 1), d = param(6, 0.8), tail = param(7, 3), sleeve = param(8, false));
            if(show(comp, "D_plug"))        translate_z(d_pcb_offset(comp[4])) d_plug(comp[4], pcb = true);
            if(show(comp, "molex_hdr"))     molex_254(comp[4], param(5, 0), param(6, undef));
            if(show(comp, "jst_xh"))        jst_xh_header(jst_xh_header, comp[4], param(5, false), param(6, false), param(7, undef));
            if(show(comp, "jst_ph"))        jst_xh_header(jst_ph_header, comp[4], param(5, false), param(6, false), param(7, undef));
            if(show(comp, "jst_zh"))        jst_xh_header(jst_zh_header, comp[4], param(5, false), param(6, false), param(7, undef));
            if(show(comp, "potentiometer")) let(pot = param(4, BTT_encoder)) translate_z(pot_size(pot).z) vflip() potentiometer(pot, shaft_length = param(5, undef));
            if(show(comp, "trimpot3362"))   trimpot3362();
            if(show(comp, "buzzer"))        buzzer(param(4, 9), param(5, 12), param(6, grey(20)));
            if(show(comp, "smd_250V_fuse")) smd_250V_fuse(comp[4], comp[5]);
            if(show(comp, "smd_res"))       smd_resistor(comp[4], comp[5]);
            if(show(comp, "smd_cap"))       smd_capacitor(comp[4], comp[5], param(6, undef));
            if(show(comp, "smd_tant"))      smd_tant(comp[4], param(5, undef));
            if(show(comp, "smd_sot"))       smd_sot(comp[4], comp[5]);
            if(show(comp, "smd_soic"))      smd_soic(comp[4], comp[5]);
            if(show(comp, "smd_diode"))     smd_diode(comp[4], comp[5]);
            if(show(comp, "smd_inductor"))  smd_inductor(comp[4], comp[5]);
            if(show(comp, "smd_pot"))       smd_pot(comp[4], comp[5]);
            if(show(comp, "smd_coax"))      smd_coax(comp[4]);
            if(show(comp, "smd_qfp"))       smd_qfp(comp[4], comp[5]);
            if(show(comp, "vero_pin"))      vero_pin(param(4, false));
            if(show(comp, "terminal"))      terminal_block(comp[5], comp[4]);
            if(show(comp, "multiwatt11"))   multiwatt11(comp[4], param(5, 3));
            if(show(comp, "text"))          color(param(8, "white"))
                                                linear_extrude(0.04) resize([comp[4], comp[5]], auto = true) text(comp[6], font = param(7, "Liberation Mono"), valign = "center", halign = "center");
        }
    }
}