function zrot(a=0, p=_NO_ARG, cp) = rot(a, cp=cp, p=p);


// Function&Module: tilt()
//
// Synopsis: Tilts children towards a direction
// SynTags: Trans, Path, VNF, Mat
// Topics: Affine, Matrices, Transforms, Rotation
// See Also: rot(), xrot(), yrot(), zrot()
//
// Usage: As a Module
//   tilt(to=, [reverse=], [cp=]) CHILDREN;
// Usage: As a Function to transform data in `p`
//   pts = tilt(to=, p=, [reverse=], [cp=]);
// Usage: As a Function to return a transform matrix
//   M = tilt(to=, [reverse=], [cp=]);
//
// Description:
//   This is shorthand for `rot(from=UP,to=x)` and operates similarly.  It tilts that which is pointing UP until it is pointing at the given direction vector.
//   * If the `cp` centerpoint argument is given, then the tilt/rotation is performed around that centerpoint.  So `tilt(...,cp=[1,2,3])` is equivalent to `move([1,2,3]) tilt(...) move([-1,-2,-3])`.
//   * If the `reverse` argument is true, then the tilt/rotation performed will be exactly reversed.
//   .
//   The behavior and return value varies depending on how `tilt()` is called:
//   * Called as a module, tilts all children.
//   * Called as a function with a `p` argument containing a point, returns the tilted/rotated point.
//   * Called as a function with a `p` argument containing a list of points, returns the list of tilted/rotated points.
//   * Called as a function with a [bezier patch](beziers.scad) in the `p` argument, returns the tilted/rotated patch.
//   * Called as a function with a [VNF structure](vnf.scad) in the `p` argument, returns the tilted/rotated VNF.
//   * Called as a function without a `p` argument, returns the affine3d rotational matrix.
//   Note that unlike almost all the other transformations, the `p` argument must be given as a named argument.
//
// Arguments:
//   to = Target vector for vector-based rotations.
//   ---
//   cp = centerpoint to tilt/rotate around. Default: [0,0,0]
//   reverse = If true, exactly reverses the rotation.  Default: false
//   p = If called as a function, this contains data to rotate: a point, list of points, bezier patch or a VNF.
//
// Example:
//   #cube([2,4,9]);
//   tilt(LEFT+BACK) cube([2,4,9]);
//
// Example(2D):
//   path = square([50,30], center=true);
//   #stroke(path, closed=true);
//   stroke(tilt(RIGHT+FWD,p=path3d(path)), closed=true);