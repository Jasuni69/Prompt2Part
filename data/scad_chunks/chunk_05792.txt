module cubetruss_clip(extents=1, size, strut, clipthick, anchor=CENTER, spin=0, orient=UP) {
    size = is_undef(size)? $cubetruss_size : size;
    strut = is_undef(strut)? $cubetruss_strut_size : strut;
    clipthick = is_undef(clipthick)? $cubetruss_clip_thickness : clipthick;
    cliplen = strut * 2.6;
    clipheight = min(size+strut, size/3+2*strut*2.6);
    clipsize = 0.5;
    s = [extents*(size-strut)+strut+2*clipthick, strut*2, clipheight-2*strut];
    attachable(anchor,spin,orient, size=s) {
        xflip_copy(offset=(extents*(size-strut)+strut)/2) {
            difference() {
                union() {
                    difference() {
                        right(clipthick/2-0.01) {
                            back(strut) {
                                difference() {
                                    xrot(90) prismoid([clipthick, clipheight], [clipthick, clipheight-cliplen*2], h=cliplen);
                                    right(clipthick/2) chamfer_edge_mask(l=clipheight+0.1, chamfer=clipthick);
                                }
                            }
                        }
                        fwd(strut*3/2) {
                            cube([get_slop(), strut*3, size], center=true);
                        }
                    }
                    right(get_slop()/2+0.01) {
                        fwd(strut*1.25+get_slop()) {
                            yrot(-90) prismoid([clipheight-cliplen*2, strut/2], [clipheight-cliplen*2-2*clipsize, strut/2], h=clipsize+0.01);
                        }
                    }
                }
                fwd(strut*1.6) {
                    left(clipsize) {
                        yscale(1.5) chamfer_edge_mask(l=size+1, chamfer=clipsize+clipthick/3);
                    }
                }
                zcopies(clipheight-strut) cube([clipthick*3, cliplen*2, strut], center=true);
                zcopies(clipheight-2*strut) right(clipthick) chamfer_edge_mask(l=cliplen*2, chamfer=clipthick, orient=BACK);
            }
        }
        children();
    }
}


// Function: cubetruss_dist()
// Synopsis: Returns the length of a cubetruss truss.
// Topics: Trusses, CubeTruss, FDM Optimized, Parts
// See Also: cubetruss_segment(), cubetruss_support(), cubetruss(), cubetruss_corner()
// Usage:
//   length = cubetruss_dist(cubes, [gaps], [size=], [strut=]);
// Description:
//   Function to calculate the length of a cubetruss truss.
// Arguments:
//   cubes = The number of cubes along the truss's length.
//   gaps = The number of extra strut widths to add in, corresponding to each time a truss butts up against another.
//   size = The length of each side of the cubetruss cubes.  Default: `$cubetruss_size` (usually 30)
//   strut = The width of the struts on the cubetruss cubes.  Default: `$cubetruss_strut_size` (usually 3)