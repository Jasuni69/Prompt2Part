module shoulder_screw(s,d,length,head, thread_len, tolerance, head_size, drive, drive_size, thread,
                      undersize, shaft_undersize, head_undersize, shoulder_undersize=0,
                      blunt_start, blunt_start1, blunt_start2, 
                      atype="screw", anchor=BOT, orient,spin)
{
  d1= assert(is_num(d) && d>0, "Must specify shoulder diameter")
      assert (is_num(length) && length>0, "Must specify shoulder length");
  systemOK=is_string(s) && in_list(downcase(s),["iso","metric","uts","english"]);
  info_temp = systemOK ? undef
            : is_struct(s) ? s
            : screw_info(s);
  infoOK = systemOK ? false
         : _nominal_diam(info_temp) && struct_val(info_temp,"pitch") && struct_val(info_temp,"system");
  d2=assert(systemOK || infoOK, "System must be \"ISO\", \"UTS\", \"English\" or \"metric\" or a valid screw specification string")
     assert(!is_struct(s) || num_defined([drive, drive_size, thread, head])==0,
            "With screw struct, \"head\", \"drive\", \"drive_size\" and \"thread\" are not allowed");
  drive = drive=="none" ? undef : default(drive,"hex");
  thread = default(thread,"coarse");
  head = default(head, "socket");                                    
  usersize = systemOK ? undef : s;
  system = systemOK ? s : struct_val(info_temp,"system");
  undersize = is_undef(undersize) ? undersize
            : is_num(undersize) ? [undersize,undersize]
            : undersize;
  shaft_undersize = first_defined([shaft_undersize, undersize[0], 0]);
  head_undersize = first_defined([head_undersize, undersize[1], 0]);
  
  iso = in_list(downcase(system), ["iso","metric"]);

  factor = iso ? 1 : INCH;

  table = iso ?   //  iso shoulder screws, hex drive socket head  ISO 7379
                  //  Mcmaster has variations like 12mm shoulder for m10, 6mm shoulder for M5
                  // shld   screw  thread  head  hex  hex     head  
                  // diam   size   length  diam      depth     ht 
                  [                                                 
                     [6.5,  ["M5",   9.5,   10,   3,  2.4,     4.5]],
                     [8  ,  ["M6",   11 ,   13,   4,  3.3,     5.5]],
                     [10 ,  ["M8",   13 ,   16,   5,  4.2,     7  ]],
                     [13 ,  ["M10",  16 ,   18,   6,  4.9,     9  ]],
                     [16 ,  ["M12",  18 ,   24,   8,  6.6,    11  ]],
                     [20 ,  ["M16",  22 ,   30,  10,  8.8,    14  ]],
                     [25 ,  ["M20",  27 ,   36,  12,  10 ,    16  ]]
                   ]
        :
                   // UTS shoulder screws, b18.3 (table 13)
                   // sh diam  screw   thread len, head diam   hex size  hex depth
                   [
                      [1/8  ,  ["#4",     5/32 ,    1/4      ,  5/64   ,  0.067]],
                      [5/32 ,  ["#6",     3/16 ,    9/32     ,  3/32   ,  0.067]],
                      [3/16 ,  ["#8",     3/16 ,    5/16     ,  3/32   ,  0.079]],
                      [1/4  ,  ["#10",    3/8  ,    3/8      ,  1/8    ,  0.094]],
                      [5/16 ,  ["1/4",    7/16 ,    7/16     ,  5/32   ,  0.117]],
                      [3/8  ,  ["5/16",   1/2  ,    9/16     ,  3/16   ,  0.141]],
                      [1/2  ,  ["3/8",    5/8  ,    3/4      ,  1/4    ,  0.188]],
                      [5/8  ,  ["1/2",    3/4  ,    7/8      ,  5/16   ,  0.234]],
                      [3/4  ,  ["5/8",    7/8  ,    1        ,  3/8    ,  0.281]],
                      [1    ,  ["3/4",    1    ,    1+5/16   ,  1/2    ,  0.375]],
                      [1+1/4,  ["7/8",    1+1/8,    1+3/4    ,  5/8    ,  0.469]],
                      [1+1/2,  ["1.125",  1+1/2,    2+1/8    ,  7/8    ,  0.656]],
                      [1+3/4,  ["1.25",   1+3/4,    2+3/8    ,  1      ,  0.750]],
                      [2    ,  ["1.5",    2    ,    2+3/4    ,  1+1/4  ,  0.937]]
                   ];           
  entry = struct_val(table, d);
  shoulder_diam = d * factor - shoulder_undersize;
  spec = first_defined([usersize, entry[0]]);
  dummy2=assert(is_def(spec),"No shoulder screw found with specified diameter");
  thread_len = first_defined([thread_len, u_mul(entry[1],factor)]);
  head_size = first_defined([head_size, u_mul(entry[2],factor)]);
  drive_size = first_defined([drive_size, u_mul(entry[3],factor)]);
  drive_depth = u_mul(entry[4],factor);
  head_height_table = iso? first_defined([entry[5],d/2+1.5])
                    : d<3/4 ? (d/2 + 1/16)*INCH
                    : (d/2 + 1/8)*INCH;
  shoulder_tol = tolerance==0 || tolerance=="none" ? 0
               : iso ? lookup(d, [[10,0.03],[13,0.037],[16,0.037],[20,0.046]])
               : 1; //0.003 * INCH;
  info = is_struct(s) ? s
       : screw_info(spec, head, drive, drive_size=drive_size, thread=thread);

  final_headsize = is_num(head_size) ? head_size
                 : head_size[0];
  d5=assert(is_num(final_headsize), "Head size invalid or missing");
  final_sharpsize =  head!="flat" ? undef : is_vector(head_size)? head_size[1] : final_headsize*1.12;
  head_height_flat = head!="flat" ? undef : (final_sharpsize-(shoulder_diam-shoulder_tol))/2/tan(struct_val(info,"head_angle")/2);
  headfields = concat(
                      ["head_size", final_headsize],
                      head=="flat" ? ["head_size_sharp", final_sharpsize, "head_height", head_height_flat]
                                   : ["head_height",   is_vector(head_size) ? head_size[1]
                                                     : is_num(head_height_table)? head_height_table
                                                     : final_headsize/2 + 1.5],
                      is_def(drive_depth) ? ["drive_depth", drive_depth] :[]
                     );
  dummy3=assert(is_num(length) && length>0, "Must give a positive shoulder length");
  screw(struct_set(info, headfields),
        _shoulder_len = length, _shoulder_diam = shoulder_diam-shoulder_tol,
        length=thread_len, tolerance=tolerance, shaft_undersize=shaft_undersize, head_undersize=head_undersize,
        blunt_start=blunt_start, blunt_start1=blunt_start1, blunt_start2=blunt_start2,                 
        atype=atype, anchor=anchor, orient=orient, spin=spin)
    children();
}