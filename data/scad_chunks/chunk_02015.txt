module _drag_chain_assembly(type, pos = 0, render = false) {
    s = drag_chain_size(type);
    x = (1 + exploded()) * s.x;
    r = drag_chain_radius(type) * x / s.x;
    links = drag_chain_links(type);
    actual_travel = (links - 4) * s.x;
    z = drag_chain_outer_size(type).z;

    zb = z / 2;                                     // z of bottom track
    c = [actual_travel / 2 + pos / 2, 0, r + zb];   // centre of bend

    points = [                                      // Calculate list of hinge points
        for(i = 0, p = [0, 0, z / 2 + 2 * r]; i < links + 1;
            i = i + 1,
            dx = p.z > c.z ? x : -x,
            p = max(p.x + dx, p.x) <= c.x ? p + [dx, 0, 0]      // Straight sections
                  : let(q = circle_intersect(p, x, c, r))
                        q.x <= c.x ? [p.x - sqrt(sqr(x) - sqr(p.z - zb)), 0, zb] // Transition back to straight
                                   : q) // Circular section
        p
    ];
    npoints = len(points);

    module link(n)                                  // Position and colour link with origin at the hinge hole
        translate([-z / 2, 0, -z / 2]) {
            vflip(!drag_chain_supports(type))
                stl_colour(n < 0 || n == npoints - 1 ? pp3_colour : n % 2 ? pp1_colour : pp2_colour)
                    render_if(render)
                        drag_chain_link(type, start = n == -1, end = n == npoints - 1, check_kids = false)
                            let($fasteners = 0)
                                children();

            let($fasteners = 1) children();
        }

    screws = drag_chain_screw_lists(type);
    custom_start = screws[0] == [0, 0, 0, 0];
    custom_end   = screws[1] == [0, 0, 0, 0];
    assert($children == bool2int(custom_start) + bool2int(custom_end), str("wrong number of children for end customisation: ", $children));

    for(i = [0 : npoints - 2]) let(v = points[i + 1] - points[i])
        translate(points[i])
            rotate([0, -atan2(v.z, v.x), 0])
                link(i);

    translate(points[0] - [x, 0, 0])
        link(-1)
            if(custom_start)
                children(0);

    translate(points[npoints - 1])
        hflip()
            link(npoints - 1)
                if(custom_end)
                    children(custom_start ? 1 : 0);
}

//! 1. Remove the support material from the links with side cutters.
//! 1. Clip the links together with the special ones at the ends.