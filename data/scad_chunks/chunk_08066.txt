module hilbert_dragon_low_poly() {
    lines = hilbert_curve();
    hilbert_path = dedup([each [for(line = lines) line[0]], lines[len(lines) - 1][1]]);
    smoothed_hilbert_path = bezier_smooth(hilbert_path, 0.48, t_step = 0.2);

    dragon_body_path = reverse([for(i = [1:len(smoothed_hilbert_path) - 4]) smoothed_hilbert_path[i]]);

    body_shape = concat(
        bezier_curve(0.25, 
            [
                [30, -35], [16, 0], [4, 13], 
                [3, -5], [0, 26], [-3, -5],
                [-4, 13],  [-16, 0], [-30, -35]
            ]
        ),
        bezier_curve(0.25, 
            [[-22, -35], [-15, -45], [0, -55], [15, -45], [22, -35]]
        )
    );    

    
    pts = [for(p = body_shape) p * 0.007];
    p = dragon_body_path[0];
    
    path_extrude(
        pts, 
        [p + [-.25, 0, -.05], each [for(i = [1:len(dragon_body_path) - 1]) dragon_body_path[i]]], 
        scale = 0.9
    );

    translate([0, 0, -2.81])        
    scale(0.01)
    rotate([-55, 0, 90]) 
    dragon_head_low_poly(); 
    
    translate([0, 0, -0.525])
    rotate([0, -7, 0])
    rotate(90)
    ellipse_extrude(0.5, slices = 4, twist = 15)
    scale(0.9 * 0.007)
        polygon(body_shape);
}