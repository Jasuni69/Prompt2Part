module swiss_clip(type, open = 0.9) { //! Draw a Swiss clip open by specified amount
    vitamin(str("swiss_clip(", type[0], "): Swiss picture clip ", type[0], " ", sclip_max_gap(type),"mm"));

    length = sclip_length(type);
    width = sclip_width(type);
    height = sclip_height(type);

    spigot = sclip_spigot(type);
    hook = sclip_hook(type);
    offset = sclip_hinge_offset(type);
    t = sclip_thickness(type);
    arm_l = sclip_arm_length(type);
    arm_w = sclip_arm_width(type);
    w = width - 2 * arm_w;
    or = sclip_radius(type);
    ir = or - t;
    angle = arm_angle(type, open);
    angle2 = spigot_angle(type, open);
    $fn = 360;

    color("silver") translate([-t - ir, 0, -height + t]) {
        translate([length - offset - arm_l, -w / 2])    // Narrow part of base
            cube([arm_l, w, t]);

        translate([length - offset, 0, t])
            rotate([0, -angle2, 0])
                translate([offset - length, 0, -t]) {
                    translate([length - offset, -width / 2])        // Wide part of base
                        cube([offset - spigot.x, width, t]);

                    translate([length - spigot.x, -spigot.y / 2])   // Spigot base
                        cube([spigot.x - or, spigot.y, t]);

                    translate([length - t,  -spigot.y / 2, or])     // Spigot stem
                        cube([t, spigot.y, spigot.z - or]);

                    translate([length - or, -spigot.y / 2, or])     // Spigot bend
                        rotate([-90, 0, 0])
                            rotate_extrude(angle = 90)
                                translate([ir, 0])
                                    square([t, spigot.y]);
                }

        translate([or, -hook.y / 2])                    // Hook base
            cube([hook.x, hook.y, t]);

        translate([0, -hook.y / 2, or])                 // Hook stem
            cube([t, hook.y, height - 2 * or]);

        translate([or, -hook.y / 2, or])                // Hook lower bend
            rotate([0, 90, 90])
                rotate_extrude(angle = 90)
                    translate([ir, 0])
                        square([t, hook.y]);

        translate([or, -hook.y / 2, height - t])        // Hook top
            cube([hook.x - or, hook.y, t]);

        translate([or, hook.y / 2, height - or])        // Hook top bend
            rotate([0, -90, 90])
                rotate_extrude(angle = 90)
                    translate([ir, 0])
                        square([t, hook.y]);

        translate([length - offset, 0, t])              // Arms
            rotate([0, angle, 0])
                for(side = [-1, 1])
                    translate([-arm_l, side * (arm_w + w) / 2 - arm_w / 2, -t])
                        cube([arm_l, arm_w, t]);

        translate([length - offset, -w / 2, t])         // Central gusset
            rotate([-90, 0, 0])
                rotate(90 - angle2)
                    rotate_extrude(angle = angle2)
                        translate([0, 0])
                            square([t, w]);

        for(side = [-1, 1])                             // Arm gussets
            translate([length - offset, side * (arm_w + w) / 2 - arm_w / 2, t])
                rotate([-90, 0, 0])
                    rotate(90 - angle2)
                        rotate_extrude(angle = angle + angle2)
                            translate([0, 0])
                                square([t, arm_w]);

    }
}