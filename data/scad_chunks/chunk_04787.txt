function spherified_cube(r=1,origin=[0,0,1],div_count=12,d) = let(
  R = d == undef ? r : d/2,
  right = [1,0,0],
  up = [0,1,0],
  div2 = div_count/2,
  face_points = [
    for (j = [0:1:div_count], i = [0:1:div_count]) let(
      p = origin + 2.0 * (right * (i-div2) + up * (div2 - j)) / div_count,
      p2 = [p.x*p.x,p.y*p.y,p.z*p.z],
      rx = p.x * sqrt(1.0 - 0.5 * (p2.y + p2.z) + p2.y*p2.z/3.0),
      ry = p.y * sqrt(1.0 - 0.5 * (p2.z + p2.x) + p2.z*p2.x/3.0),
      rz = p.z * sqrt(1.0 - 0.5 * (p2.x + p2.y) + p2.x*p2.y/3.0)
    ) R*[rx,ry,rz]
  ],
  lface = len(face_points),
  points = concat(
    face_points,
    rotate([ 90,  0,0], poly=face_points),
    rotate([-90,  0,0], poly=face_points),
    rotate([180,  0,0], poly=face_points),
    rotate([  0,-90,0], poly=face_points),
    rotate([  0, 90,0], poly=face_points)
  ),
  faces = [
    for (f = [0:5], j = [0:1:div_count-1], i = [0:1:div_count-1]) let (
      i0=f*lface+j*(div_count+1)+i,
      i1=i0+1,
      i2=i0+(div_count+1),
      i3=i2+1
    ) [i0,i1,i3,i2]
  ]
) [points,faces];

// simple normalized octahedron