module screw_head(screw_info,details=false, counterbore=0,flat_height,teardrop=false,slop=0) {
   no_children($children);
   head_oversize = struct_val(screw_info, "head_oversize",0) + slop;
   head = struct_val(screw_info, "head");
   head_size = struct_val(screw_info, "head_size",0) + head_oversize;
   head_height = struct_val(screw_info, "head_height");
   dum0=assert(is_def(head_height) || in_list(head,["flat","none"]), "Undefined head height only allowed with flat head or headless screws")
        assert(is_bool(teardrop) || teardrop=="max" || all_nonnegative([teardrop]),"Teardrop parameter invalid");
   teardrop = teardrop==true ? .05 : teardrop;
   heightok = (is_undef(head_height) && in_list(head,["flat","none"])) || all_positive(head_height);
   dum1=assert(heightok, "Head hight must be a postive number");
   dum2=assert(counterbore==0 || counterbore==false || head!="none", "Cannot counterbore a headless screw");
   counterbore_temp = counterbore==false? 0 
                    : head!="flat" && counterbore==true ? head_height 
                    : counterbore;
   dum3=assert(is_finite(counterbore_temp) && counterbore_temp>=0, str(counterbore==true? "Must specify numerical counterbore height with flat head screw"
                                                             : "Counterbore must be a nonnegative number"));

   counterbore = counterbore_temp==0 && head!="flat" ? counterbore_temp : counterbore_temp + 0.01;
   adj_diam = struct_val(screw_info, "diameter") + head_oversize;   // Used for determining chamfers and ribbing
   attachable(){
     union(){
         if (head!="flat" && counterbore>0){
           d = head=="hex"? 2*head_size/sqrt(3) : head_size;
           if (teardrop!=false)
             teardrop(d=d, l=counterbore, cap_h=is_num(teardrop) ? d/2*(1+teardrop):undef, orient=BACK, anchor=BACK);
           else                    
             cyl(d=d, l=counterbore, anchor=BOTTOM);
         }  
         if (head=="flat") {   // For flat head, counterbore is integrated
           dummy = assert(all_positive([flat_height]), "flat_height must be given for flat heads");
           angle = struct_val(screw_info, "head_angle")/2;
           sharpsize = struct_val(screw_info, "head_size_sharp")+head_oversize;
           sidewall_height = (sharpsize - head_size)/2 / tan(angle);
           cylheight = counterbore + sidewall_height;
           slopeheight = flat_height - sidewall_height;
           r1 = head_size/2;
           r2 = r1 - tan(angle)*slopeheight;
           n = segs(r1);
           prof1 = teardrop!=false ? teardrop2d(r=r1,cap_h=is_num(teardrop)?r1*(1+teardrop):undef,$fn=n) : circle(r=r1, $fn=n);
           prof2 = teardrop!=false ? teardrop2d(r=r2,cap_h=is_num(teardrop)?r2*(1+teardrop):undef,$fn=n) : circle(r=r2, $fn=n);
           skin([prof2,prof1,prof1], z=[-flat_height, -flat_height+slopeheight, counterbore],slices=0);
         }
         if (head!="flat" && counterbore==0) {
           if (in_list(head,["round","pan round","button","fillister","cheese"])) {
             base = head=="fillister" ? 0.75*head_height :
                    head=="pan round" ? .6 * head_height :
                    head=="cheese" ? .7 * head_height :
                    0.1 * head_height;   // round and button
             head_size2 = head=="cheese" ?  head_size-2*tan(5)*head_height : head_size; // 5 deg slope on cheese head
             segs = segs(head_size);
             cyl(l=base, d1=head_size, d2=head_size2,anchor=BOTTOM, $fn=segs)
               attach(TOP)
                 zrot(180) // Needed to align facets when $fn is odd
                 rotate_extrude($fn=segs)  // ensure same number of segments for cap as for head body
                   intersection(){
                     arc(points=[[-head_size2/2,0], [0,-base+head_height * (head=="button"?4/3:1)], [head_size2/2,0]]);
                     square([head_size2, head_height-base]);
                   }
           }
           if (head=="pan flat")
             cyl(l=head_height, d=head_size, rounding2=0.2*head_size, anchor=BOTTOM);
           if (head=="socket")
             cyl(l=head_height, d=head_size, anchor=BOTTOM, chamfer2=details? adj_diam/10:undef);
           if (head=="socket ribbed"){
             // These numbers are based on ISO specifications that dictate how much oversizsed a ribbed socket head can be
             // We are making our ribbed heads the same size as unribbed (by cutting the ribbing away), but these numbers are presumably a good guide
             rib_size = [[2, .09],
                         [3, .09],
                         [6, .11],
                         [12, .135],
                         [20, .165]];
             intersection() {
               cyl(h=head_height/4, d=head_size, anchor=BOT)
                  attach(TOP) cyl(l=head_height*3/4, d=head_size, anchor=BOT, texture="trunc_ribs", tex_reps=[31,1],
                                  tex_inset=true, tex_depth=-lookup(adj_diam,rib_size));
               cyl(h=head_height,d=head_size, chamfer2=adj_diam/10, anchor=BOT);
             }
           }
           if (head=="hex")
             up(head_height/2)_nutshape(head_size,head_height,"hex",false,true);
         }
     }    
     union(){};
   }
}


// Section: Nuts and nut traps


// Module: nut()
// Synopsis: Creates a standard nut.
// SynTags: Geom
// Topics: Threading, Screws
// See Also: screw(), screw_hole()
// Usage:
//   nut([spec], [shape], [thickness], [nutwidth], [thread=], [tolerance=], [hole_oversize=], [bevel=], [$slop=], [anchor=], [spin=], [orient=]) [ATTACHMENTS];
// Description:
//   Generates a hexagonal or square nut.  See [screw and nut parameters](#section-screw-and-nut-parameters) for details on the parameters that define a nut.
//   As with screws, you can give the specification in `spec` and then omit the name.  The diameter is the flat-to-flat
//   size of the nut produced.  The thickness can be "thin", "normal" or "thick" to choose standard nut dimensions.  For metric
//   nuts you can also use thickness values of "DIN" or "undersized".  The nut's shape is hexagonal by default; set shape to "square" for
//   a square nut.
//   .
//   By default all nuts have the internal holes beveled and hex nuts have their corners beveled.  Square nuts get no outside bevel by default.
//   ASME specifies that small square nuts should not be beveled, and many square nuts are beveled only on one side.   The bevel angle, specified with bevang,
//   gives the angle for the bevel.  The default of 15 is shallow and may not be printable.  Internal hole are beveled at 45 deg by the depth of one thread.  
//   .
//   The tolerance determines the actual thread sizing based on the nominal size in accordance with standards.  
//   The $slop parameter determines extra gaps left to account for printing overextrusion.  It defaults to 0.
// Arguments:
//   spec = nut specification, e.g. "M5x1" or "#8-32".  See [screw naming](#subsection-screw-naming).  This can also be a nut or screw specification structure of the form produced by {{nut_info()}} or {{screw_info()}}.  
//   shape = "hex" or "square" to specify nut shape.  Default: "hex"
//   thickness = "thin", "normal", "thick", or a thickness in mm.  See [nuts](#subsection-nuts).  Default: "normal"
//   ---
//   nutwidth = width of nut (overrides table values)
//   thread = thread type or specification. See [screw pitch](#subsection-standard-screw-pitch). Default: "coarse"
//   hole_oversize = amount to increase hole diameter.  Default: 0
//   bevel = if true, bevel the outside of the nut.  Default: true for hex nuts, false for square nuts
//   bevel1 = if true, bevel the outside of the nut bottom.
//   bevel2 = if true, bevel the outside of the nut top. 
//   bevang = set the angle for the outside nut bevel.  Default: 15
//   ibevel = if true, bevel the inside (the hole).   Default: true
//   ibevel1 = if true bevel the inside, bottom end.
//   ibevel2 = if true bevel the inside, top end.
//   blunt_start = If true apply truncated blunt start threads at both ends.  Default: true
//   blunt_start1 = If true apply truncated blunt start threads bottom end.
//   blunt_start2 = If true apply truncated blunt start threads top end.
//   tolerance = nut tolerance.  Determines actual nut thread geometry based on nominal sizing.  See [tolerance](#subsection-tolerance). Default is "2B" for UTS and "6H" for ISO.
//   $slop = extra space left to account for printing over-extrusion.  Default: 0
//   anchor = Translate so anchor point is at origin (0,0,0).  See [anchor](attachments.scad#subsection-anchor).  Default: `CENTER`
//   spin = Rotate this many degrees around the Z axis after anchor.  See [spin](attachments.scad#subsection-spin).  Default: `0`
//   orient = Vector to rotate top towards, after spin.  See [orient](attachments.scad#subsection-orient).  Default: `UP`
// Side Effects:
//   `$screw_spec` is set to the spec specification structure. 
// Example: All the UTS nuts at one size.  Note that square nuts come in only one thickness.  
//   xdistribute(spacing=0.75*INCH){
//       nut("3/8",thickness="thin");
//       nut("3/8",thickness="normal");
//       nut("3/8",thickness="thick");
//       nut("3/8",shape="square");
//   }
// Example: All the ISO (and DIN) nuts at one size.  Note that M10 is one of the four cases where the DIN nut width is larger.  
//   ydistribute(spacing=30){
//      xdistribute(spacing=22){
//         nut("M10", thickness="thin");
//         nut("M10",thickness="undersized");
//         nut("M10",thickness="normal");
//         nut("M10",thickness="thick");
//      }
//      xdistribute(spacing=25){
//         nut("M10", shape="square", thickness="thin");
//         nut("M10", shape="square", thickness="normal");      
//      }
//   }
// Example: The three different UTS nut tolerances (thickner than normal nuts)
//   module mark(number)
//   {
//     difference(){
//        children();
//        ycopies(n=number, spacing=1.5)right(.25*INCH-2)up(8-.35)cyl(d=1, h=1);
//     }
//   }
//   $fn=64;
//   xdistribute(spacing=17){
//     mark(1) nut("1/4-20", thickness=8, nutwidth=0.5*INCH,tolerance="1B");
//     mark(2) nut("1/4-20", thickness=8, nutwidth=0.5*INCH,tolerance="2B");
//     mark(3) nut("1/4-20", thickness=8, nutwidth=0.5*INCH,tolerance="3B");
//   }
// Example: Threadless nut
//   nut("#8", thread="none");