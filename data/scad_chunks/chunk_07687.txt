module Ttorus(r=20,twist=360,angle=360,pitch=0,scale=1,r2,fn=fn,help){
    
    scale=is_list(scale)?scale:[scale,scale,scale];
    r2=is_undef(r2)?r:r2;
    diff=r2-r;
    
   for (i=[0:fn-1]){//(i=[0:360/fn:angle-.005]){
    step=angle/fn;
    rdiff=diff/fn;
    j=i+1;//j=i+360/fn;
    //$info=i?0:$info;
    //$helpM=i?0:$helpM; 
    $idx=i;  
   Color(i/fn,$idxON=false) hull(){
        rotate(i*step)translate([r+rdiff*i,0,i*pitch/360*abs(step)]) rotate([0,i*twist/360*step,0])scale([1,1,1]+(scale-[1,1,1])/fn*(i))children();
        rotate(j*step)translate([r+rdiff*j,0,j*pitch/360*abs(step)]) rotate([0,j*twist/360*step,0])union(){
            $info=false;
            $helpM=false;
            $idx=j;
            scale([1,1,1]+(scale-[1,1,1])/fn*(j))children();
        }
    }  
   } 
    
MO(!$children);
Echo("use Coil()",color="info",condition=!$children);
    
HelpTxt("Ttorus",[
  "r",r,
  "twist",twist,
  "angle",angle,
  "pitch",pitch,
  "scale",scale,
   "r2",r2,
  "fn=",fn],help);    
}

/** \page Modifier
\name Kontaktwinkel
Kontaktwinkel(d=1)Torus(d=$d,winkel=60); cuts children at contact angle 

\param winkel contact angle
\param d r   diameter/radius of children
\param baseD calculates d for desired base diameter
\param center cut both sides if true
\param 2D     cuts 2D 
\param inv    inverts cut
\param centerBase move Object so cut is at center if true
*/