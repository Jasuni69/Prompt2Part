function _get_spec(spec, needtype, origin, thread,   // common parameters
                   head, drive, drive_size,          // screw parameters
                   shape, thickness                  // nut parameters
                  ) =
    assert(needtype=="screw_info" || needtype=="nut_info")
    assert(is_undef(thickness) || (is_num(thickness) && thickness>0) ||
           in_list(_downcase_if_str(thickness),["thin","normal","thick","undersized","din"]),
          "thickness must be a positive number of one of \"thin\", \"thick\", \"normal\", \"undersized\", or \"DIN\"")
    assert(!(is_undef(spec) && is_undef($screw_spec)), "No screw spec given and no parent spec available to inherit")
    let(
        spec=is_undef(spec) ? $screw_spec : spec,
        spec_origin = is_struct(spec) ? struct_val(spec,"origin") : undef
    )
    assert(is_string(spec) || is_struct(spec), "Screw/nut specification must be a string or struct")
    let(
        specname = is_struct(spec) ? struct_val(spec,"name") : undef,
        name = is_string(spec) ? spec
             : struct_val(spec,"type") != needtype ?       // if we switch between screw and nut we need a name 
                   let(specname=struct_val(spec,"name"))
                   assert(is_string(specname), 
                        "Parent screw_info or nut_info structure doesn't have a valid name, but a name is needed when child is of a different type")
               specname
             : undef,
        p = is_struct(spec) ? struct_val(spec,"pitch") : undef,
        thread = is_def(name) ? thread
                 // If the origin of the struct is a hole with pitch zero and we are making a screw, try to find a nonzero pitch
               : spec_origin=="screw_hole" && origin!="screw_hole" && p==0 && is_string(specname) ?
                    let(temp_info = screw_info(specname,thread))
                    struct_val(temp_info,"pitch")
//               : spec_origin=="screw_hole" && origin=="screw_hole" && all_positive([p]) ? p
//               : origin=="screw_hole" && is_undef(thread) ? 0
               : thread
    )
    is_def(name) ? (needtype=="screw_info" ? screw_info(name,_origin=origin, thread= origin=="screw_hole" ? default(thread,true) : thread,
                                                        head=head, drive=drive, drive_size=drive_size)
                                           : nut_info(name,_origin=origin, thread=thread, shape=shape, thickness=thickness))
  : 
    assert(in_list(struct_val(spec,"type"), ["nut_info","screw_info"]), "Screw/nut spec is invalid struct type")
    assert(is_undef(thread) || thread=="none" || thread==false || thread==true || is_num(thread),
           str("Thread type applied to struct specification must be numeric, \"none\" or false but got ",thread))
    assert(is_undef(thickness) || is_num(thickness), str("thickness applied to struct specification must be numeric but is ",thickness))
    assert(is_undef(head) || head=="none", str("The only head type allowed with struct specifications is \"none\" but got ",head))
    assert(num_defined([drive,drive_size])==0, "You cannot change drive or drive_size when using a struct specification")
    assert(is_undef(shape), "You cannot change nut shape when using a struct specification")
    let(
        spec = _struct_reset(spec,
                                   [ 
                                     ["origin", origin],
                                     if (origin=="screw") ["counterbore",0],
                                     if (head=="none") ["head","none"],
                                     if (head=="none") ["drive","none"],
                                     if (thread==false || thread=="none") ["pitch",0]
                                     else if (thread!=true) ["pitch",thread],
                                     ["thickness", thickness],
                                   ], grow=true),
        inherit = is_undef(spec_origin) || spec_origin==origin 
    )
    inherit ? spec
  : struct_remove(spec, ["shaft_oversize","head_oversize"]);