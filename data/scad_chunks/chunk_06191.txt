function _parse_screw_name(name) =
    let( commasplit = str_split(name,","),
         length = parse_num(commasplit[1]),
         xdash = str_split(commasplit[0], "-x"),
         type = xdash[0],
         thread = parse_float(xdash[1])
    )
    assert(len(commasplit)<=2, str("More than one comma found in screw name, \"",name,"\""))
    assert(len(xdash)<=2, str("Screw name has too many '-' or 'x' characters, \"",name,"\""))
    assert(len(commasplit)==1 || is_num(length), str("Invalid length \"", commasplit[1],"\" in screw name, \"",name,"\""))
    assert(len(xdash)==1 || all_nonnegative(thread),str("Thread pitch not a valid number in screw name, \"",name,"\""))
    type[0] == "M" || type[0] == "m" ? 
        let(diam = parse_float(substr(type,1)))
        assert(is_num(diam), str("Screw size must be a number in screw name, \"",name,"\""))
        ["metric", parse_float(substr(type,1)), thread, length] 
    :
    let(
        diam = type[0] == "#" ? type :
               suffix(type,2)=="''" ? parse_float(substr(type,0,len(type)-2)) :
               let(val=parse_num(type))
               assert(all_positive(val), str("Screw size must be a number in screw name, \"",name,"\""))
               val == floor(val) && val>=0 && val<=12 ? str("#",type) : val
    )
    assert(is_str(diam) || is_num(diam), str("Invalid screw diameter in screw name, \"",name,"\""))
    ["english", diam, thread, u_mul(25.4,length)];


// drive can be "hex", "phillips", "slot", "torx", or "none"
// or you can specify "ph0" up to "ph4" for phillips and "t20" for torx 20