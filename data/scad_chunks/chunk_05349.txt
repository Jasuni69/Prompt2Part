module debug_bezier(bezpath, width=1, N=3) {
    no_children($children);
    check = 
      assert(is_path(bezpath),"bezpath must be a path")
      assert(is_int(N) && N>0, "N must be a positive integer")
      assert(len(bezpath)%N == 1, str("A degree ",N," bezier path should have a multiple of ",N," points in it, plus 1."));
    $fn=8;
    stroke(bezpath_curve(bezpath, N=N), width=width, color="cyan");
    color("green")
      if (N!=3) 
           stroke(bezpath, width=width);
      else 
           for(i=[1:3:len(bezpath)]) stroke(select(bezpath,max(0,i-2), min(len(bezpath)-1,i)), width=width);
    twodim = len(bezpath[0])==2;
    color("red") move_copies(bezpath)
      if ($idx % N !=0)
          if (twodim){
            rect([width/2, width*3]);
            rect([width*3, width/2]);
          } else {
           zcyl(d=width/2, h=width*3);
           xcyl(d=width/2, h=width*3);
           ycyl(d=width/2, h=width*3);
        }
    color("blue") move_copies(bezpath)
      if ($idx % N ==0)
        if (twodim) circle(d=width*2.25); else sphere(d=width*2.25);
    if (twodim) color("red") move_copies(bezpath)
      if ($idx % N !=0) circle(d=width/2);
}


// Module: debug_bezier_patches()
// Synopsis: Shows a bezier surface patch and its associated control points.
// SynTags: Geom
// Topics: Bezier Patches, Debugging
// See Also: bezier_patch_points(), bezier_patch_flat(), bezier_vnf()
// Usage:
//   debug_bezier_patches(patches, [size=], [splinesteps=], [showcps=], [showdots=], [showpatch=], [convexity=], [style=]);
// Description:
//   Shows the surface, and optionally, control points of a list of bezier patches.
// Arguments:
//   patches = A list of rectangular bezier patches.
//   ---
//   splinesteps = Number of segments to divide each bezier curve into. Default: 16
//   showcps = If true, show the controlpoints as well as the surface.  Default: true.
//   showdots = If true, shows the calculated surface vertices.  Default: false.
//   showpatch = If true, shows the surface faces.  Default: true.
//   size = Size to show control points and lines.  Default: 1% of the maximum side length of a box bounding the patch.
//   style = The style of subdividing the quads into faces.  Valid options are "default", "alt", and "quincunx".
//   convexity = Max number of times a line could intersect a wall of the shape.
// Example:
//   patch1 = [
//       [[15,15,0], [33,  0,  0], [ 67,  0,  0], [ 85, 15,0]],
//       [[ 0,33,0], [33, 33, 50], [ 67, 33, 50], [100, 33,0]],
//       [[ 0,67,0], [33, 67, 50], [ 67, 67, 50], [100, 67,0]],
//       [[15,85,0], [33,100,  0], [ 67,100,  0], [ 85, 85,0]],
//   ];
//   patch2 = [
//       [[15,85,0], [33,100,  0], [ 67,100,  0], [ 85, 85,0]],
//       [[ 0,67,0], [33, 67,-50], [ 67, 67,-50], [100, 67,0]],
//       [[ 0,33,0], [33, 33,-50], [ 67, 33,-50], [100, 33,0]],
//       [[15,15,0], [33,  0,  0], [ 67,  0,  0], [ 85, 15,0]],
//   ];
//   debug_bezier_patches(patches=[patch1, patch2], splinesteps=8, showcps=true);