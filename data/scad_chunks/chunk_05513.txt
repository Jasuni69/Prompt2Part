function _prism_fillet_cyl(name, R, bot, top, d, k, N, overlap, uniform, debug) =
    let(
        top = yrot(-90,top),
        bot = yrot(-90,bot),
        isect = [for (i=idx(top))
                   let (cisect = _cyl_line_intersection(abs(R), [top[i],bot[i]], sign(R)*(top[i]-bot[i])))
                   assert(cisect, str("Prism doesn't fully intersect cylinder (",name,")"))
                   cisect
                ]
    )
    d==0 ? yrot(90,[ 
                    isect,
                    if (overlap!=0) isect,
                    if (overlap!=0) [for(p=isect) point3d(unit(point2d(p))*(norm(point2d(p))-sign(R)*overlap),p.z)]
                   ])
  :
    let(
        tangent = path_tangents(isect,closed=true),
        mesh = transpose([for(i=idx(top))
           assert(norm(top[i]-isect[i])>=d,str("Prism is too short for fillet to fit (",name,")"))
           let(
               dir = sign(R)*unit(cross([isect[i].x,isect[i].y,0],tangent[i])),
               zpart = d*dir.z,
               curvepart = d*norm(point2d(dir)),
               curveang = sign(cross(point2d(isect[i]),point2d(dir))) * curvepart * 180 / PI / abs(R), 
               edgepoint = apply(up(zpart)*zrot(curveang), isect[i]),
               corner = plane_line_intersection(plane_from_normal([edgepoint.x,edgepoint.y,0], edgepoint),
                                                [isect[i],top[i]],
                                                bounded=false/*[R>0,true]*/),
               d_step = abs(d)*unit(top[i]-isect[i])+(uniform?isect[i]:corner)
           )
           assert(is_vector(corner,3),str("Fillet does not fit.  Decrease size of fillet (",name,")."))
           assert(debug || R<0 || (d_step-corner)*(corner-isect[i])>=-EPSILON,
                 str("Unable to fit fillet, probably due to steep curvature of the cylinder (",name,")."))
           let(
                bez = _smooth_bez_fill([d_step,corner,edgepoint], k)
           )
           [ 
             each bezier_curve(bez, N, endpoint=true),
             if (overlap!=0) point3d(unit(point2d(edgepoint))*(norm(point2d(edgepoint))-sign(R)*overlap),edgepoint.z)
           ]
        ]),
        angle_list = _fix_angle_list([for(pt=select(mesh,-2)) atan2(pt.y,pt.x)]),
        z_list = [for(pt=select(mesh,-2)) pt.z],
        is_simple = debug || is_path_simple(hstack([angle_list,z_list]), closed=true)
    )
    assert(is_simple, str("Fillet doesn't fit: its edge is self-intersecting.  Decrease size of roundover. (",name,")"))
    yrot(90,mesh);