module modular_hose(size, type, clearance=0, waist_len, anchor=BOTTOM, spin=0,orient=UP)
{
  clearance = force_list(clearance,2);
  ind = search([size],[1/4, 1/2, 3/4])[0];
  sbound =
    assert(ind!=[], "Must specify size as 1/4, 1/2 or 3/4")
    pointlist_bounds(_modhose_small_end[ind]);
  bbound = pointlist_bounds(_modhose_big_end[ind]);
  smallend =
    assert(is_vector(clearance,2), "Clearance must be a scalar or length 2 vector")
    move([-clearance[0],-sbound[0].y],p=_modhose_small_end[ind]);
  bigend = move([clearance[1], -bbound[0].y], p=_modhose_big_end[ind]);

  midlength = first_defined([waist_len, _modhose_waist[ind]]);
  dummy = assert(midlength>=0,"midlength must be nonnegative");

  goodtypes = ["small","big","segment","socket","ball"];
  shape =
    assert(in_list(type,goodtypes), str("type must be one of ",goodtypes))
    type=="segment"? concat(back(midlength,p=smallend),yflip(p=bigend))
  : type=="small" || type=="ball" ?
          concat(back(midlength,p=smallend),
                 [[last(smallend).x,0],[ smallend[0].x,0]])
  : concat( back(midlength,p=bigend), 
                  [[last(bigend).x,0],[ bigend[0].x,0]]);
  bounds = pointlist_bounds(shape);
  center = mean(bounds);
  attachable(anchor,spin,orient,l=bounds[1].y-bounds[0].y, r=bounds[1].x)
  {
    rotate_extrude(convexity=4)
      polygon(fwd(center.y,p=shape));
    children();
  }  
}


// Function: modular_hose_radius()
// Synopsis: Returns the waist radius of the given modular hose size.
// Topics: Modular Hose, Parts
// See Also: modular_hose(), tube()
// Usage:
//   r = modular_hose_radius(size, [outer]);
// Description:
//   Returns the inner (or outer) diameter of the waist section
//   of the modular hose to enable hollowing out connecting channels.
//   Note: diameter is accurate to about 1e-4.  
// Arguments:
//   size = size of hose part, must be 1/4, 1/2 or 3/4
//   outer = set to true to get the outer diameter. 
// Example(3D):
//   $fn=64;
//   back_half()
//      diff("remove")
//        cuboid(50){
//          attach(TOP) modular_hose(1/2, "ball");
//          up(0.01)position(TOP+RIGHT)tag("remove")
//            rot(180)
//            xrot(-90)
//            rotate_extrude(angle=135)
//            right(25)
//            circle(r=modular_hose_radius(1/2));
//        }