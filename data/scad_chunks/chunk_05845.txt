function furthest_point(pt, points) =
    assert( is_vector(pt), "\nInvalid point." )
    assert(is_path(points,dim=len(pt)), "\nInvalid pointlist or incompatible dimensions." )
    max_index([for (p=points) norm(p-pt)]);


// Function: vector_search()
// Synopsis: Finds points in a list that are close to a given point.
// Topics: Search, Points, Closest
// See Also: vector_search_tree(), vector_nearest()
// Usage:
//   indices = vector_search(query, r, target);
// Description:
//   Given a list of query points `query` and a `target` to search, 
//   finds the points in `target` that match each query point. A match holds when the 
//   distance between a point in `target` and a query point is less than or equal to `r`. 
//   The returned list contains a list for each query point containing, in arbitrary 
//   order, the indices of all points that match that query point. 
//   The `target` may be a simple list of points or a search tree.
//   When `target` is a large list of points, a search tree is constructed to 
//   speed up the search with an order around O(log n) per query point. 
//   For small point lists, a direct search is done dispensing a tree construction. 
//   Alternatively, `target` may be a search tree built with `vector_search_tree()`.
//   In that case, that tree is parsed looking for matches.
//   An empty list of query points returns a empty output list.
//   An empty list of target points returns a output list with an empty list for each query point.
// Arguments:
//   query = list of points to find matches for.
//   r = the search radius.
//   target = list of the points to search for matches or a search tree.
// Example: A set of four queries to find points within 1 unit of the query.  The circles show the search region and all have radius 1.  
//   $fn=32;
//   k = 2000;
//   points = list_to_matrix(rands(0,10,k*2,seed=13333),2);
//   queries = [for(i=[3,7],j=[3,7]) [i,j]];
//   search_ind = vector_search(queries, points, 1);
//   move_copies(points) circle(r=.08);
//   for(i=idx(queries)){
//       color("blue")stroke(move(queries[i],circle(r=1)), closed=true, width=.08);
//       color("red") move_copies(select(points, search_ind[i])) circle(r=.08);
//   }
// Example: when a series of searches with different radius are needed, its is faster to pre-compute the tree
//   $fn=32;
//   k = 2000;
//   points = list_to_matrix(rands(0,10,k*2),2,seed=13333);
//   queries1 = [for(i=[3,7]) [i,i]];
//   queries2 = [for(i=[3,7]) [10-i,i]];
//   r1 = 1;
//   r2 = .7;
//   search_tree = vector_search_tree(points);
//   search_1 = vector_search(queries1, r1, search_tree);
//   search_2 = vector_search(queries2, r2, search_tree);
//   move_copies(points) circle(r=.08);
//   for(i=idx(queries1)){
//       color("blue")stroke(move(queries1[i],circle(r=r1)), closed=true, width=.08);
//       color("red") move_copies(select(points, search_1[i])) circle(r=.08);
//   }
//   for(i=idx(queries2)){
//       color("green")stroke(move(queries2[i],circle(r=r2)), closed=true, width=.08);
//       color("red") move_copies(select(points, search_2[i])) circle(r=.08);
//   }