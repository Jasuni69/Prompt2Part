module Ring(h=5,dicke,d=10,r,id=6,ir,grad=360,rcenter,center=false,fn,fs=fs,name, use2D=0,help,cd=1,rand){
    
    dicke=is_undef(dicke)?rand:dicke;
    id=is_undef(id)?d-dicke*2:id;
    r=is_undef(r)?d/2:r;
    ir=is_undef(ir)?id/2:ir;
    rcenter=is_undef(rcenter)?!abs(cd):rcenter;
    rand=is_undef(dicke)?rcenter?(r-ir)*2:r-ir:dicke*sign(cd==0?1:cd);
    use2D=is_parent(parent= needs2D)?true: use2D;
    if(use2D||!h)Kreis(rand=rand,rcenter=rcenter,r=r,grad=grad,fn=fn?fn:undef,fs=fs,rot=0,center=center,name=0,help=0);
        else rotate([h>0?0:180])linear_extrude(abs(h),center=center,convexity=5)Kreis(rand=rand,rcenter=rcenter,r=r,grad=grad,center=center,fn=fn?fn:undef,fs=fs,rot=0,name=0,help=0);
    
InfoTxt("Ring",[str("Aussen∅= ",rcenter?d+abs(rand):rand>0?d:d-rand*2,"mm — Mitte∅= ",rcenter?d:d-rand,"mm — Innen∅"),str(rcenter?d-abs(rand):rand>0?d-(rand*2):d,"mm groß — Rand=",rand,"mm und ",use2D||!h?"2D":str(h," hoch") )],name);    
 
HelpTxt("Ring",[
    "h",h,
    "dicke",dicke,
    "d",d,
    "r",r,
    "id",id,
    "ir",ir,
    "grad",grad,
    "rcenter",rcenter,
    "center",center,
    "fn",fn,
    "fs",fs,
    "name",name,
    "use2D", use2D,
    "cd",cd,
    ],help);

}