function _remove_conflicts_and_insert_point(polygon, conflicts, point) = 
	(conflicts[0] == 0)? let(
		nonconflicting = [ for(i = [0:len(polygon)-1]) if (!in_list(i, conflicts)) i ],
		new_indices = concat(nonconflicting, (nonconflicting[len(nonconflicting)-1]+1) % len(polygon)),
		polygon = concat([ for (i = new_indices) polygon[i] ], point)
	) polygon : let(
		before_conflicts = [ for(i = [0:min(conflicts)]) polygon[i] ],
		after_conflicts  = (max(conflicts) >= (len(polygon)-1))? [] : [ for(i = [max(conflicts)+1:len(polygon)-1]) polygon[i] ],
		polygon = concat(before_conflicts, point, after_conflicts)
	) polygon;



// Section: 3D Hull

// Function: convex_hull3d()
// Usage:
//   convex_hull3d(points)
// Description:
//   Takes a list of arbitrary 3D points, and finds the minimal convex
//   hull polyhedron to enclose them.  Returns a list of faces, where
//   each face is a list of indexes into the given `points` list.
//   If all points passed to it are coplanar, then the return is the
//   list of indices of points forming the minimal convex hull polygon.