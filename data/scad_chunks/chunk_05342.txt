function bezier_patch_reverse(patch) =
    [for (row=patch) reverse(row)];


// Function: bezier_patch_points()
// Synopsis: Computes one or more specified points across a bezier surface patch.
// Topics: Bezier Patches
// See Also: bezier_patch_normals(), bezier_points(), bezier_curve(), bezpath_curve()
// Usage:
//   pt = bezier_patch_points(patch, u, v);
//   ptgrid = bezier_patch_points(patch, LIST, LIST);
//   ptgrid = bezier_patch_points(patch, RANGE, RANGE);
// Description:
//   Sample a bezier patch on a listed point set.  The bezier patch must be a rectangular array of
//   points, and it is sampled at all the (u,v) pairs that you specify.  If you give u and v
//   as single numbers you'll get a single point back.  If you give u and v as lists or ranges you'll
//   get a 2d rectangular array of points.  If one but not both of u and v is a list or range then you'll
//   get a list of points.  
// Arguments:
//   patch = The 2D array of control points for a Bezier patch.
//   u = The bezier u parameter (inner list of patch).  Generally between 0 and 1. Can be a list, range or value.
//   v = The bezier v parameter (outer list of patch).  Generally between 0 and 1. Can be a list, range or value.
// Example(3D):
//   patch = [
//       [[-50,-50,  0], [-16,-50,  20], [ 16,-50,  20], [50,-50,  0]],
//       [[-50,-16, 20], [-16,-16,  40], [ 16,-16,  40], [50,-16, 20]],
//       [[-50, 16, 20], [-16, 16,  40], [ 16, 16,  40], [50, 16, 20]],
//       [[-50, 50,  0], [-16, 50,  20], [ 16, 50,  20], [50, 50,  0]]
//   ];
//   debug_bezier_patches(patches=[patch], size=1, showcps=true);
//   pt = bezier_patch_points(patch, 0.6, 0.75);
//   translate(pt) color("magenta") sphere(d=3, $fn=12);
// Example(3D): Getting Multiple Points at Once
//   patch = [
//       [[-50,-50,  0], [-16,-50,  20], [ 16,-50,  20], [50,-50,  0]],
//       [[-50,-16, 20], [-16,-16,  40], [ 16,-16,  40], [50,-16, 20]],
//       [[-50, 16, 20], [-16, 16,  40], [ 16, 16,  40], [50, 16, 20]],
//       [[-50, 50,  0], [-16, 50,  20], [ 16, 50,  20], [50, 50,  0]]
//   ];
//   debug_bezier_patches(patches=[patch], size=1, showcps=true);
//   pts = bezier_patch_points(patch, [0:0.2:1], [0:0.2:1]);
//   for (row=pts) move_copies(row) color("magenta") sphere(d=3, $fn=12);