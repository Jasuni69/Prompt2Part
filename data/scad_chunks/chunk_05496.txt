module convex_offset_extrude(
        height,
        bottom=[],
        top=[], 
        h, l, length,
        offset="round", r=0, steps=16,
        extra=0,
        cut=undef, chamfer_width=undef, chamfer_height=undef,
        joint=undef, k=0.75, angle=45,
        convexity=10, thickness = 1/1024
) {
        req_children($children);  
        argspec = [
                ["for", ""],
                ["r",r],
                ["extra",extra],
                ["type","circle"],
                ["steps",steps],
                ["offset",offset],
                ["chamfer_width",chamfer_width],
                ["chamfer_height",chamfer_height],
                ["angle",angle],
                ["cut",cut],
                ["joint",joint],
                ["k", k],
                ["points", []],
        ];
        top = struct_set(argspec, top, grow=false);
        bottom = struct_set(argspec, bottom, grow=false);

        offsets_bot = _rounding_offsets(bottom, -1);
        offsets_top = _rounding_offsets(top, 1);

        // "Extra" height enlarges the result beyond the requested height, so subtract it
        bottom_height = len(offsets_bot)==0 ? 0 : abs(last(offsets_bot)[1]) - struct_val(bottom,"extra");
        top_height = len(offsets_top)==0 ? 0 : abs(last(offsets_top)[1]) - struct_val(top,"extra");

        height = one_defined([l,h,height,length], "l,h,height,length", dflt=u_add(bottom_height,top_height));
        middle = height-bottom_height-top_height;
        check =
          assert(height>=0, "Height must be nonnegative")
          assert(middle>=0, str(
                                "Specified end treatments (bottom height = ",bottom_height,
                                " top_height = ",top_height,") are too large for extrusion height (",height,")"
                            )
          );
        // The entry r[i] is [radius,z] for a given layer
        r = move([0,bottom_height],p=concat(
                          reverse(offsets_bot), [[0,0], [0,middle]], move([0,middle], p=offsets_top)));
        delta = [for(val=deltas(column(r,0))) sign(val)];
        below=[-thickness,0];
        above=[0,thickness];
           // layers is a list of pairs of the relative positions for each layer, e.g. [0,thickness]
           // puts the layer above the polygon, and [-thickness,0] puts it below.
        layers = [for (i=[0:len(r)-1])
          i==0 ? (delta[0]<0 ? below : above) :
          i==len(r)-1 ? (delta[len(delta)-1] < 0 ? below : above) :
          delta[i]==0 ? above :
          delta[i+1]==0 ? below :
          delta[i]==delta[i-1] ? [-thickness/2, thickness/2] :
          delta[i] == 1 ? above :
          /* delta[i] == -1 ? */ below];
        dochamfer = offset=="chamfer";
        attachable(){
          for(i=[0:len(r)-2])
            for(j=[0:$children-1])
             hull(){
               up(r[i][1]+layers[i][0])
                 linear_extrude(convexity=convexity,height=layers[i][1]-layers[i][0])
                   if (offset=="round")
                     offset(r=r[i][0])
                       children(j);
                   else
                     offset(delta=r[i][0],chamfer = dochamfer)
                       children(j);
               up(r[i+1][1]+layers[i+1][0])
                 linear_extrude(convexity=convexity,height=layers[i+1][1]-layers[i+1][0])
                   if (offset=="round")
                     offset(r=r[i+1][0])
                       children(j);
                   else
                     offset(delta=r[i+1][0],chamfer=dochamfer)
                       children(j);
             }
          union();
        }
}