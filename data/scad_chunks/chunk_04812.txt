function pb_is_between(v1, v, v2) = let( p=is_num(v)? [v,0]: v, p1=is_num(v1)? [v1,0]: v1, p2=is_num(v2)? [v2,0]: v2, d = p2-p1,
    i=abs(d[0])>abs(d[1])? 0:1, a = p[i]>= min(p1[i],p2[i])&& p[i]<=max(p1[i],p2[i])) a;
    
//  pb_intersectLineWithPolyline(line, pts, mode, all, sort) returns list with points if any
//
//  calculates the intersections between a line and polyline.
//  line    (list) A list of two 2D points. eg [[0,0],[0,5]]
//  pts     (list) A list of one or more 2D points forming a polyline. Polyline does not self close. A a single point is converted into three points, forming one horizontal and one vertical line. 
//  all     (bool)
//      false (default) stops looking for intersections once a valid one is found. sort has no effect.
//      true  builds a list of all valid intersections. The result can be sorted.
//  sort    (list) (default = []) The intersection results will be sorted by distance to the 2D point that can be provided here.
//      false The list of valid intersections is returned in the order they were found.
//      true  (default)  The list of valid intersections is sorted based on proximity to the line end point. Nearest is at the top of the list.
//  on_line (bool)  On line result filter.
//      undef   (default) no intersections are filtered out.
//      false   only intersections that are not on line are returned.
//      true    only intersections that are on line are returned.
//  on_pts (bool)  On pts polyline result filter.
//      undef   (default) no intersections are filtered out.
//      false   only intersections that are not on the pts polyline are returned.
//      true    only intersections that are on the pts polyline are returned.
//  return  (list) A list of intersection results. Each item represents an intersection. An empty list is returned if there are no intersections.
//      return[n]  Data block representing one intersection
//          return[n][0]  (list)    A list of two numbers representing a 2D point where the intersection was found.
//          return[n][1]  (bool)    Intersection found on line. true when it was found on the line otherwise false.
//          return[n][2]  (bool)    Intersection found on polyline segment. true when it was found on a line segment, otherwise false.
//          return[n][3]  (number)  index of polyline segment if the intersection was found on a polyline otherwise -1.
//          return[n][4]  (number)  Distance from the the intersection to the sort point if one was provided. Otherwize value is -1. This value is used by the sort routine.