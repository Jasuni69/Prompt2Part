module Row(e=15,dist=2,step=.1,d=+1,cut=.25,dir=+1,center=true,name,help,child){
    
    /*  Row will recursivly create a Row of objects with changing size (d+e*step) 
   /    by keeping the gap equal
 */
    child=is_undef(child)?$children:child;
    $d=d;
    $r=d/2;
    $info=is_undef(name)?is_undef($info)?true:$info:name;
    $helpM=is_undef(help)?is_undef($helpM)?false:$helpM:help;
    $idx=e-1;
    cut=child?false:is_num(cut)?cut:cut==true?0.02:false;
    if(e>1)T(d+dist+step/2) 
    if($children)Row(e=e-1,d=d+step,dist=dist,step=step,cut=cut,dir=dir<2?sign(dir*-1):dir,center=center,name=$info,help=$helpM,child=child)children();
     else Row(e=e-1,d=d?d+step:0,dist=dist,step=step,cut=cut,dir=dir<2?sign(dir*-1):dir,center=center,name=$info,help=$helpM,child=child);  
    
    if(!$children&&d)cylinder(100,d=$d,$fn=24,center=center);
    if($children)children();
    if(cut&&!child) T(-cut/2,dir>0?dir>1?0:0:-viewportSize,center?-viewportSize/2:0)color(alpha=0.0)cube([cut,viewportSize,viewportSize]);
    if(e==1)InfoTxt("Row",["last d",str($d,cut?str(" Cut is ",cut):"")],name); 

        
    HelpTxt("Row",[
    "e",e, 
    "dist",dist, 
    "step",step, 
    "d",d, 
    "cut",cut, 
    "dir",dir, 
    "center",center, 
    "name",$info], 
    $helpM);
    
    if($helpM&&!$idx)echo("Row will recursivly create a Row of objects with changing size $d=(d+e*step) by keeping the gap (dist) equal");
}

/** \page Generator
Rundrum() extrudes a shape around
\name Rundrum
\brief Rundrum uses rotate_extrude and linear_extrude to suround a Quad or circle
## Examples
  Rundrum() circle();
  
  Rundrum(eck=3,r=[10,20,30])Star(e=5);
  
  
 * @param x,y size
 * @param r the edge radius vector for n-gon possible
 * @param twist twist the linear sections
 * @param grad angle for square to match Quad
 * @param grad2 second angle for square to match Quad
 * @param lap   overlap
 * @param fn number of fragments for edges Â¼ for squares
 * @param name name
 * @param help help=true

*/

//Rundrum()circle();