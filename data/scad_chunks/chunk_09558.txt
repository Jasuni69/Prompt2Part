function patches_rotate(patches, a=undef, v=undef, cp=[0,0,0]) = [for (patch=patches) patch_rotate(patch, a=a, v=v, cp=cp)];


// Function: bezier_surface()
// Usage:
//   bezier_surface(patches, [splinesteps], [vertices], [faces]);
// Description:
//   Calculate vertices and faces for forming a (possibly partial)
//   polyhedron from the given rectangular and triangular bezier
//   patches.  Returns a list containing two elements.  The first is
//   the list of unique vertices.  The second is the list of faces,
//   where each face is a list of indices into the list of vertices.
//   You can chain calls to this, to add more vertices and faces for
//   multiple bezier patches, to stitch them together into a complete
//   polyhedron.
// Arguments:
//   patches = A list of rectangular bezier patches.
//   tris = A list of triangular bezier patches.
//   splinesteps = Number of steps to divide each bezier segment into.  Default: 16
//   vertices = Vertex list to add new points to.  Default: []
//   faces = Face list to add new faces to.  Default: []
// Example(3D):
//   patch1 = [
//   	[[18,18,0], [33,  0,  0], [ 67,  0,  0], [ 82, 18,0]],
//   	[[ 0,40,0], [ 0,  0,100], [100,  0, 20], [100, 40,0]],
//   	[[ 0,60,0], [ 0,100,100], [100,100, 20], [100, 60,0]],
//   	[[18,82,0], [33,100,  0], [ 67,100,  0], [ 82, 82,0]],
//   ];
//   patch2 = [
//   	[[18,18,0], [33,  0,  0], [ 67,  0,  0], [ 82, 18,0]],
//   	[[ 0,40,0], [ 0,  0,-50], [100,  0,-50], [100, 40,0]],
//   	[[ 0,60,0], [ 0,100,-50], [100,100,-50], [100, 60,0]],
//   	[[18,82,0], [33,100,  0], [ 67,100,  0], [ 82, 82,0]],
//   ];
//   vnf = bezier_surface(patches=[patch1, patch2], splinesteps=16);
//   polyhedron(points=vnf[0], faces=vnf[1]);