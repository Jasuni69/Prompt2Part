module torus_knot_dragon_and_pearl() {
    phi_step = 0.0525;

    body_r = 6;
    body_fn = 12;
    scale_fn = 8;
    scale_tilt_a = 3;

    knot = torus_knot(2, 3, phi_step);
    d_path = reverse([for(i = [6:len(knot) - 4]) knot[i]]);
    
    one_body_scale_data = one_body_scale(body_r, body_fn, scale_fn, scale_tilt_a);
    along_with(d_path, scale = [0.6, 0.6, 0.85], method = "EULER_ANGLE")    
    scale(0.06)
        one_segment(body_r, body_fn, one_body_scale_data);

    function __angy_angz(p1, p2) = 
        let(
            dx = p2[0] - p1[0],
            dy = p2[1] - p1[1],
            dz = p2[2] - p1[2],
            ya = atan2(dz, sqrt(dx * dx + dy * dy)),
            za = atan2(dy, dx)
        ) [ya, za];
        
    h_angy_angz = __angy_angz(d_path[len(d_path) - 2], d_path[len(d_path) - 1]);
    
	translate([2.5, -1.2, .65])
    scale(0.06)    
    rotate([0, h_angy_angz[0] + 28, h_angy_angz[1] + 247])
        dragon_head();
        
    t_angy_angz = __angy_angz(d_path[1], d_path[0]);    
    
	translate([2.09, 1.56, -.82])
	rotate([0, t_angy_angz[0], t_angy_angz[1]])
	rotate([0, -98, -70])
	scale([0.038, 0.038, 0.065])
    rotate([0, 0, 200])
	    tail();

    // pearl
    polyhedron_hull(fibonacci_lattice(66, .5));
    
    // feet
    translate([.10, -1, .225])
    rotate([7, -7.5, 26])
    scale(0.0475)
        foot();

    translate([.4, -1.75, .6])
    rotate([30, -60, -45])
    mirror([0, 1, 0])
    scale(0.0475)
        foot();

    translate([-1.6, .55, .49])
    rotate([0, 0, 150])
    mirror([0, 1, 0])
    scale(0.045)
        foot();

    translate([-1.9, .5, .745])
    rotate([-45, -30, -120])
    scale(0.045)
        foot();
}