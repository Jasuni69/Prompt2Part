module treble_clef_dragon() {
    function __angy_angz(p1, p2) = 
        let(v = p2 - p1) 
        [
            atan2(v.z, norm([v.x, v.y])), 
            atan2(v.y, v.x)
        ];
        
    points_angles = archimedean_spiral(
        arm_distance = 20,
        init_angle = 200,
        point_distance = 3.25,
        num_of_points = 46,
        rt_dir = "CLK"
    ); 

    points = [for(pa = points_angles) pa[0]];

    cpts = [
        points[len(points) - 2],
        points[len(points) - 1],
        [5, 49],
        [6, 75],
        [-12, 70],
        [-5, 30],
        [2, -10],
        [1, -60],
        [-20, -55],
        [-10, -10],
    ];

    t_step = 0.1;     
    path2d = concat([for(i = [0:len(points) - 2]) points[i]], curve(t_step, cpts));
    body_path = [for(i = [0:len(path2d) - 1]) [each path2d[i], 15 * cos(i * 6.9)]];

    leng_body_path = len(body_path);
    angy_angz = __angy_angz(body_path[0], body_path[1]);

    translate(body_path[0])
    rotate([0, 90 + angy_angz[0], angy_angz[1]])
    rotate(-5)
        dragon_head();

    body_r = 6;
    body_fn = 12;
    scale_fn = 4;
    scale_tilt_a = 6;
    one_body_scale_data = one_body_scale(body_r, body_fn, scale_fn, scale_tilt_a);

    along_with(body_path, scale = [0.45, 0.45, 0.85], twist = -30, method = "EULER_ANGLE")    
    rotate(5)
        one_segment(body_r, body_fn, one_body_scale_data);

    ayz = __angy_angz(body_path[leng_body_path - 2], body_path[leng_body_path - 1]);

    translate(body_path[leng_body_path - 1])
    rotate([0, -45 + ayz[0], ayz[1]])
    scale([.5, .5, 1])
    rotate([0, -10, 150])
        tail();

    translate([5, -24, -22.5]) 
    rotate([0, -20, 150])
    mirror([1, 0, 0])
    scale(.9)
    foot() {
        translate([6.4, 18.95, .25])
        rotate([11, 13, 185])
        scale([1.2, 1.2, 1.2])
            dragon_claw();
    }

    translate([8, -20, -21]) 
    rotate([0, -20, 5])
    mirror([1, 0, 0])
    scale(.9)
    foot() {
        translate([6.4, 19.25, .25])
        rotate([-5, -10, 15])
        scale([1.2, 1.2, 1.2])
            dragon_claw();
    }

    translate([-5, 38, -18.5]) 
    rotate([0, 0, -26]) 
    scale(.725)
    foot() {
        translate([6.4, 18.95, .25])
        rotate([-10, -10, 15])
        scale([1.2, 1.2, 1.2])
            dragon_claw();
    }

    translate([-7, 38, -19.5]) 
    rotate([0, 0, 125]) 
    scale(.725)
    mirror([1, 0, 0])
    foot() {
        translate([6.4, 19.25, .25])
        rotate([-5, 10, 120])
        scale([1.2, 1.2, 1.2])
            dragon_claw();        
    }
}