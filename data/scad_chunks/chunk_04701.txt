module webbing_demo() {
  d1 = 20 * (1+sin(360*2*$t + 0))/2+1;
  d2 = 20 * (1+sin(360*3*$t))/2+1;
  c2 = [0,50*(sin(360*$t))];
  th = 10*(1+sin(360*4*$t-90))/2+1;

  $fs=0.5;
  $fa=0.1;

  steps = 10;
  spacing = 40;

  web = webbing(d1, d2, c2, th);

  // show circles and minimum thickness that webbing are based on
  color([1,1,1]) linear_extrude(10) circle(d=d1);
  color([1,1,1]) linear_extrude(10.01) translate(c2) circle(d=d2);
  color(0.75*[1,1,1]) linear_extrude(10.02) translate([-th/2,c2.y < 0 ? c2.y : 0]) square([th, norm(c2)]);

  color([1,1,1]) { 

    // solid webbing
    translate([spacing,0]) linear_extrude(10)
      poly2d(web);

    // larger webbing with padding around holes of the original specificed diameter, but keeping original thickness
    translate([spacing*2,0]) linear_extrude(10, convexity=2) difference() {
      poly2d( webbing(d1+th, d2+th, c2, th) );
      circle(d=d1);
      translate(c2) circle(d=d2);
    }

    // larger padded webbing subtracted by original size webbing
    translate([spacing*3,0]) linear_extrude(10, convexity=2) 
      difference() {
        poly2d( webbing(d1+th, d2+th, c2, th*2) );
        poly2d(web);
      }

    // using positive offset instead of larger webbing (should be the same i think)
    translate([spacing*4,0]) linear_extrude(10, convexity=5) 
      difference() {
        offset(th/2) poly2d(web);
        poly2d(web);
      }

    // using negative offset to sutract a smaller webbing from the original sized one
    translate([spacing*5,0]) linear_extrude(10, convexity=5) difference() {
      poly2d(web);
      offset(r=-th/3) poly2d(web);
    }

    // using webbing with thickness subtracted from diamters, can create self intersecting shape when diameters become negative
    translate([spacing*6,0]) linear_extrude(10, convexity=5) difference() {
      poly2d(web);
      poly2d( webbing((d1-2*th/3), (d2-2*th/3), c2, th/3) );
    }

  }

}


// possible situations
// circles do not intersect
// circles are tangent, outside each other 
// circles intersect, and point of intersection is horizontally between circle centers
// circles intersect, and point of intersection is horizontally to the right of both circle centers
// circles are coincident (same size and offset): draw the outer circle
// one circle is inside the other (possibly tangent):  draw the outer circle

// draw two circles connected by a continuous curve that necks down to a minimum thickness th, 
// c2 is expected to be an [x,y] translation pair
// use r3 parameter to override the radius calculated for th