module teardrop(h, r, center = true, truncate = true, chamfer = 0, chamfer_both_ends = true, plus = false) { //! For making horizontal holes that don't need support material, set `truncate = false` to make traditional RepRap teardrops that don't even need bridging
    module teardrop_2d(r, truncate) {
        er = layer_height / 2 - eps;    // Extrusion edge radius
        R = plus ? r + er : r;          // Corrected radius
        offset = plus ? -er : 0;        // Offset inwards
        hull()
            for(side = [0 : 1])
                mirror([side, 0, 0])
                    intersection() {
                        hull()
                            translate([offset, 0]) {
                                circle4n(R);

                                if (teardrop_angle > 0) {
                                    x = R * tan(teardrop_angle / 2);
                                    if(truncate)
                                        translate([0, R / 2])
                                            square([2 * x, R], center = true);
                                    else
                                        polygon([[0, 0], [eps, 0], [0, R + x * tan(min(teardrop_angle, 90 - eps))]]);
                                }
                            }
                        translate([0, -2 * R])
                            square([R, 4 * R]);
                    }
    }

    render(convexity = 5)
        extrude_if(h, center)
            teardrop_2d(r, truncate);

    teardrop_chamfer(h, center, chamfer, chamfer_both_ends) {
        linear_extrude(eps, center = true)
            teardrop_2d(r + chamfer / 2, truncate);

        translate_z(-chamfer / 2)
            linear_extrude(eps, center = true)
                teardrop_2d(r, truncate);
    }
}