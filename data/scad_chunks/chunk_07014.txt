module test__corners() {
    assert_equal(_corners(BOT + FRONT + LEFT ), [1,0,0,0,0,0,0,0]);
    assert_equal(_corners(BOT + FRONT + RIGHT), [0,1,0,0,0,0,0,0]);
    assert_equal(_corners(BOT + BACK  + LEFT ), [0,0,1,0,0,0,0,0]);
    assert_equal(_corners(BOT + BACK  + RIGHT), [0,0,0,1,0,0,0,0]);
    assert_equal(_corners(TOP + FRONT + LEFT ), [0,0,0,0,1,0,0,0]);
    assert_equal(_corners(TOP + FRONT + RIGHT), [0,0,0,0,0,1,0,0]);
    assert_equal(_corners(TOP + BACK  + LEFT ), [0,0,0,0,0,0,1,0]);
    assert_equal(_corners(TOP + BACK  + RIGHT), [0,0,0,0,0,0,0,1]);

    assert_equal(_corners(BOT   + FRONT),  [1,1,0,0,0,0,0,0]);
    assert_equal(_corners(BOT   + BACK ),  [0,0,1,1,0,0,0,0]);
    assert_equal(_corners(TOP   + FRONT),  [0,0,0,0,1,1,0,0]);
    assert_equal(_corners(TOP   + BACK ),  [0,0,0,0,0,0,1,1]);
    assert_equal(_corners(BOT   + LEFT ),  [1,0,1,0,0,0,0,0]);
    assert_equal(_corners(BOT   + RIGHT),  [0,1,0,1,0,0,0,0]);
    assert_equal(_corners(TOP   + LEFT ),  [0,0,0,0,1,0,1,0]);
    assert_equal(_corners(TOP   + RIGHT),  [0,0,0,0,0,1,0,1]);
    assert_equal(_corners(FRONT + LEFT ),  [1,0,0,0,1,0,0,0]);
    assert_equal(_corners(FRONT + RIGHT),  [0,1,0,0,0,1,0,0]);
    assert_equal(_corners(BACK  + LEFT ),  [0,0,1,0,0,0,1,0]);
    assert_equal(_corners(BACK  + RIGHT),  [0,0,0,1,0,0,0,1]);

    assert_equal(_corners(LEFT),   [1,0,1,0,1,0,1,0]);
    assert_equal(_corners(RIGHT),  [0,1,0,1,0,1,0,1]);
    assert_equal(_corners(FRONT),  [1,1,0,0,1,1,0,0]);
    assert_equal(_corners(BACK),   [0,0,1,1,0,0,1,1]);
    assert_equal(_corners(BOT),    [1,1,1,1,0,0,0,0]);
    assert_equal(_corners(TOP),    [0,0,0,0,1,1,1,1]);

    assert_equal(_corners([BOT + FRONT + LEFT ]), [1,0,0,0,0,0,0,0]);
    assert_equal(_corners([BOT + FRONT + RIGHT]), [0,1,0,0,0,0,0,0]);
    assert_equal(_corners([BOT + BACK  + LEFT ]), [0,0,1,0,0,0,0,0]);
    assert_equal(_corners([BOT + BACK  + RIGHT]), [0,0,0,1,0,0,0,0]);
    assert_equal(_corners([TOP + FRONT + LEFT ]), [0,0,0,0,1,0,0,0]);
    assert_equal(_corners([TOP + FRONT + RIGHT]), [0,0,0,0,0,1,0,0]);
    assert_equal(_corners([TOP + BACK  + LEFT ]), [0,0,0,0,0,0,1,0]);
    assert_equal(_corners([TOP + BACK  + RIGHT]), [0,0,0,0,0,0,0,1]);

    assert_equal(_corners([BOT   + FRONT]),  [1,1,0,0,0,0,0,0]);
    assert_equal(_corners([BOT   + BACK ]),  [0,0,1,1,0,0,0,0]);
    assert_equal(_corners([TOP   + FRONT]),  [0,0,0,0,1,1,0,0]);
    assert_equal(_corners([TOP   + BACK ]),  [0,0,0,0,0,0,1,1]);
    assert_equal(_corners([BOT   + LEFT ]),  [1,0,1,0,0,0,0,0]);
    assert_equal(_corners([BOT   + RIGHT]),  [0,1,0,1,0,0,0,0]);
    assert_equal(_corners([TOP   + LEFT ]),  [0,0,0,0,1,0,1,0]);
    assert_equal(_corners([TOP   + RIGHT]),  [0,0,0,0,0,1,0,1]);
    assert_equal(_corners([FRONT + LEFT ]),  [1,0,0,0,1,0,0,0]);
    assert_equal(_corners([FRONT + RIGHT]),  [0,1,0,0,0,1,0,0]);
    assert_equal(_corners([BACK  + LEFT ]),  [0,0,1,0,0,0,1,0]);
    assert_equal(_corners([BACK  + RIGHT]),  [0,0,0,1,0,0,0,1]);

    assert_equal(_corners([LEFT]),  [1,0,1,0,1,0,1,0]);
    assert_equal(_corners([RIGHT]), [0,1,0,1,0,1,0,1]);
    assert_equal(_corners([FRONT]), [1,1,0,0,1,1,0,0]);
    assert_equal(_corners([BACK]),  [0,0,1,1,0,0,1,1]);
    assert_equal(_corners([BOT]),   [1,1,1,1,0,0,0,0]);
    assert_equal(_corners([TOP]),   [0,0,0,0,1,1,1,1]);

    assert_equal(_corners([TOP,FRONT+RIGHT]), [0,1,0,0,1,1,1,1]);
}
test__corners();