function rotate_points3d(pts, v=0, cp=[0,0,0], axis=undef, from=undef, to=undef, reverse=false) =
	let(
		dummy = assertion(is_def(from)==is_def(to), "`from` and `to` must be given together."),
		mrot = reverse? (
			is_def(from)? (
				let (
					from = from / norm(from),
					to = to / norm(from),
					ang = vector_angle(from, to),
					axis = vector_axis(from, to)
				)
				matrix4_rot_by_axis(from, -v) * matrix4_rot_by_axis(axis, -ang)
			) : is_def(axis)? (
				matrix4_rot_by_axis(axis, -v)
			) : is_scalar(v)? (
				matrix4_zrot(-v)
			) : (
				matrix4_xrot(-v.x) * matrix4_yrot(-v.y) * matrix4_zrot(-v.z)
			)
		) : (
			is_def(from)? (
				let (
					from = from / norm(from),
					to = to / norm(from),
					ang = vector_angle(from, to),
					axis = vector_axis(from, to)
				)
				matrix4_rot_by_axis(axis, ang) * matrix4_rot_by_axis(from, v)
			) : is_def(axis)? (
				matrix4_rot_by_axis(axis, v)
			) : is_scalar(v)? (
				matrix4_zrot(v)
			) : (
				matrix4_zrot(v.z) * matrix4_yrot(v.y) * matrix4_xrot(v.x)
			)
		),
		m = matrix4_translate(cp) * mrot * matrix4_translate(-cp)
	) [for (pt = pts) point3d(m*concat(point3d(pt),[1]))];



// Function: rotate_points3d_around_axis()
// Status: DEPRECATED, use `rotate_points3d(pts, v=ang, axis=u, cp=cp)` instead.
// Usage:
//   rotate_points3d_around_axis(pts, ang, u, [cp])
// Description:
//   Rotates each 3D point in an array by a given amount, around a given centerpoint and axis.
// Arguments:
//   pts = List of 3D points to rotate.
//   ang = Angle to rotate by.
//   u = Vector of the axis to rotate around.
//   cp = 3D Centerpoint to rotate around.