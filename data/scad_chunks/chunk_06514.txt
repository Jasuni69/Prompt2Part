function skew(p=_NO_ARG, sxy, sxz, syx, syz, szx, szy, axy, axz, ayx, ayz, azx, azy) =
    assert(num_defined([sxy,axy]) < 2)
    assert(num_defined([sxz,axz]) < 2)
    assert(num_defined([syx,ayx]) < 2)
    assert(num_defined([syz,ayz]) < 2)
    assert(num_defined([szx,azx]) < 2)
    assert(num_defined([szy,azy]) < 2)
    assert(sxy==undef || is_finite(sxy))
    assert(sxz==undef || is_finite(sxz))
    assert(syx==undef || is_finite(syx))
    assert(syz==undef || is_finite(syz))
    assert(szx==undef || is_finite(szx))
    assert(szy==undef || is_finite(szy))
    assert(axy==undef || is_finite(axy))
    assert(axz==undef || is_finite(axz))
    assert(ayx==undef || is_finite(ayx))
    assert(ayz==undef || is_finite(ayz))
    assert(azx==undef || is_finite(azx))
    assert(azy==undef || is_finite(azy))
    let(
        sxy = is_num(sxy)? sxy : is_num(axy)? tan(axy) : 0,
        sxz = is_num(sxz)? sxz : is_num(axz)? tan(axz) : 0,
        syx = is_num(syx)? syx : is_num(ayx)? tan(ayx) : 0,
        syz = is_num(syz)? syz : is_num(ayz)? tan(ayz) : 0,
        szx = is_num(szx)? szx : is_num(azx)? tan(azx) : 0,
        szy = is_num(szy)? szy : is_num(azy)? tan(azy) : 0,
        m = affine3d_skew(sxy=sxy, sxz=sxz, syx=syx, syz=syz, szx=szx, szy=szy)
    )
    p==_NO_ARG? m : apply(m, p);


// Section: Applying transformation matrices to data

/// Internal Function: is_2d_transform()
/// Usage:
///   bool = is_2d_transform(t);
/// Topics: Affine, Matrices, Transforms, Type Checking
/// See Also: is_affine(), is_matrix()
/// Description:
///   Checks if the input is a 3D transform that does not act on the z coordinate, except possibly
///   for a simple scaling of z.  Note that an input which is only a zscale returns false.
/// Arguments:
///   t = The transformation matrix to check.
/// Example:
///   b = is_2d_transform(zrot(45));  // Returns: true
///   b = is_2d_transform(yrot(45));  // Returns: false
///   b = is_2d_transform(xrot(45));  // Returns: false
///   b = is_2d_transform(move([10,20,0]));  // Returns: true
///   b = is_2d_transform(move([10,20,30]));  // Returns: false
///   b = is_2d_transform(scale([2,3,4]));  // Returns: true