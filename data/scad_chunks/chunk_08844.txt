function tri_alpha_complex(points, dist, d) = 
    reduce_tris(is_undef(d) ? tri_delaunay(points) : tri_delaunay_indices(d), dist);
   
dist = 30;
seed = 101;
points = [for(i = [0:150]) rands(-100, 100, 2, seed_value = seed + i)]; 

d = tri_delaunay(points, ret = "DELAUNAY");
convex_hull_tris = tri_delaunay_indices(d);
concave_hull_tris = tri_alpha_complex(points, dist, d); 

for(t = concave_hull_tris) {
    offset(-.2)
    polygon([for(i = t) points[i]]);
}

%for(t = convex_hull_tris) {
    offset(-.2)
    polygon([for(i = t) points[i]]);
}

color("red")
for(p = points) {
    translate(p)
    circle(2);
}