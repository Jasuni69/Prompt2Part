function pb_intersectLineWithPolyline(line=[], pts=[],all=false, sort=[], on_line=undef, on_pts=undef, _i=0, _r=[]) =
    (!all&&len(_r)>0) ||_i==len(pts)-1? pb_is_2d(sort)? _pb_intersect_sort(_r,3) : _r : let(
        da = line[0]-line[1], db = pts[_i] - pts[_i+1], the = cross(da,db),
        d = (the == 0)? [] : let( A = cross(line[0], line[1]), B = cross(pts[_i], pts[_i+1]),
            x=( A*db[0] - da[0]*B ) / the, y=( A*db[1] - da[1]*B ) / the, a=[x,y],
            ol = pb_is_between(line[0] ,[x,y] ,line[1]),
            op = pb_is_between(pts[_i], [x,y] ,pts[_i+1]),
            p = [a, ol, op, pb_is_2d(sort)? norm(a-sort):-1, op?_i:-1] ) p,
        a = pb_intersectLineWithPolyline(line, pts, all, sort, on_line, on_pts, _i+1, d==[]||d==pb_last(_r)? _r : concat(_r, [d]))
    ) [for(i=a) if ((on_line==undef || on_line==i[1]) && (on_pts==undef || on_pts==i[2])) i];
        
//  function _pb_intersect_sort(list)
//
//  Sorts intersection data produced by pb_intersectLineWithPolyline from near to far.
//  Function is used internally but can be used externally.
//  list    (list)  List of intersection data. See pb_intersectLineWithPolyline for structure details.
//  return  (list)  List of intersection data sorted from near to far