module align(anchor,align=CENTER,inside=false,inset=0,shiftout=0,overlap)
{
    req_children($children);
    overlap = (overlap!=undef)? overlap : $overlap;
    dummy1=assert($parent_geom != undef, "No object to align to.")
           assert(is_undef($attach_to), "Cannot use align() as a child of attach()");
    if (is_undef($align_msg) || $align_msg)
        echo("ALERT: align() has changed, May 1, 2024.  See the wiki and attach(align=). $align_msg=false disables this message");
    anchor = is_vector(anchor) ? [anchor] : anchor;
    align = is_vector(align) ? [align] : align;
    two_d = _attach_geom_2d($parent_geom);
    factor = inside?-1:1;
    for (i = idx(anchor)) {
        $align_msg=false;     // Remove me when removing the message above
        face = anchor[i];
        $anchor=face;
        dummy=
          assert(!is_string(face),
                 str("Named anchor \"",face,"\" given for anchor, but align() does not support named anchors"))
          assert(is_vector(face) && (len(face)==2 || len(face)==3),
                 str("Invalid face ",face, ".  Must be a 2-vector or 3-vector"));
        thisface = two_d? _force_anchor_2d(face) : point3d(face);
        for(j = idx(align)) {
          edge=align[j];
          $idx = j+len(align)*i;
          $align=edge;
          dummy1=assert(is_vector(edge) && (len(edge)==2 || len(edge)==3),
                        "align direction must be a 2-vector or 3-vector");
          thisedge = two_d? _force_anchor_2d(edge) : point3d(edge);
          dummy=assert(all_zero(v_mul(thisedge,thisface)),
                       str("align (",thisedge,") cannot include component parallel to anchor ",thisface));
          thisface_anch = _find_anchor(thisface, $parent_geom);
          inset_dir = two_d ? -thisface
                    : unit(thisface_anch[1]-_find_anchor([thisedge.x,0,0]+thisface, $parent_geom)[1],CTR)
                       +unit(thisface_anch[1]-_find_anchor([0,thisedge.y,0]+thisface, $parent_geom)[1],CTR)
                       +unit(thisface_anch[1]-_find_anchor([0,0,thisedge.z]+thisface, $parent_geom)[1],CTR);
          
          pos_anch = _find_anchor(thisface+thisedge, $parent_geom);
          $attach_alignment = thisedge-factor*thisface;
          $attach_anchor=list_set(pos_anch,2,UP);
          translate(pos_anch[1]
                    +inset*inset_dir
                    +shiftout*(thisface_anch[2]-inset_dir)
                    -overlap*thisface_anch[2])
              default_tag("remove",inside) children();                  
        }
    }
}

// Quantize anchor entry to {-1,0,1}