function _point_ref(points, sign="both") =
    unique([
        for(i=[-1,1],j=[-1,1],k=[-1,1])
            if (sign=="both" || sign=="even" && i*j*k>0 || sign=="odd" && i*j*k<0)
                each [for(point=points) v_mul(point,[i,j,k])]
    ]);
//
_tribonacci=(1+4*cosh(acosh(2+3/8)/3))/3;
//
/////////////////////////////////////////////////////////////////////////////
//
// Polyhedra data table.
// The polyhedra information is from Wikipedia and http://dmccooey.com/polyhedra/
//
_polyhedra_ = [
    // Platonic Solids

    ["tetrahedron", "platonic", 4,[3], 2*sqrt(2), sqrt(6)/12, sqrt(2)/4, sqrt(6)/4, 1/6/sqrt(2),
            _point_ref([[1,1,1]], sign="even")],
    ["cube", "platonic", 6, [4], 2, 1/2, 1/sqrt(2), sqrt(3)/2, 1,
            _point_ref([[1,1,1]])],
    ["octahedron", "platonic", 8, [3], sqrt(2), sqrt(6)/6, 1/2, sqrt(2)/2, sqrt(2)/3,
            _point_ref(_even_perms([1,0,0]))],
    ["dodecahedron", "platonic", 12, [5], 2/PHI, sqrt(5/2+11*sqrt(5)/10)/2, (3+sqrt(5))/4, sqrt(3)*PHI/2, (15+7*sqrt(5))/4,
            _point_ref(concat([[1,1,1]],_even_perms([0,PHI,1/PHI])))],
    ["icosahedron", "platonic", 20, [3], 2, PHI*PHI/2/sqrt(3), cos(36), sin(72), 5*(3+sqrt(5))/12,
            _point_ref(_even_perms([0,1,PHI]))],

    // Archimedian Solids, listed in order by Wenniger number, W6-W18

    ["truncated tetrahedron", "archimedean", 8,[6,3], sqrt(8), sqrt(6)/4, 3*sqrt(2)/4, sqrt(11/8), 23*sqrt(2)/12,
            _point_ref(_all_perms([1,1,3]),sign="even")],
    ["truncated octahedron", "archimedean", 14, [6,4], sqrt(2), sqrt(6)/2, 1.5, sqrt(10)/2, 8*sqrt(2),
            _point_ref(_all_perms([0,1,2]))],
    ["truncated cube", "archimedean", 14, [8,3], 2*(sqrt(2)-1), (1+sqrt(2))/2, 1+sqrt(2)/2, sqrt(7+4*sqrt(2))/2, 7+14*sqrt(2)/3,
            _point_ref(_all_perms([1,1,sqrt(2)-1]))],
    ["truncated icosahedron", "archimedean", 32, [6, 5], 2, (3*sqrt(3)+sqrt(15))/4, 3*PHI/2, sqrt(58+18*sqrt(5))/4, (125+43*sqrt(5))/4,
            _point_ref(concat(
                _even_perms([0,1,3*PHI]),
                _even_perms([1,2+PHI,2*PHI]),
                _even_perms([PHI,2,PHI*PHI*PHI])
            ))],
    ["truncated dodecahedron", "archimedean", 32, [10, 3], 2*PHI-2, sqrt(7+11*PHI)/2, (3*PHI+1)/2,sqrt(11+PHI*15)/2, 5*(99+47*sqrt(5))/12,
            _point_ref(concat(
                _even_perms([0,1/PHI, 2+PHI]),
                _even_perms([1/PHI,PHI,2*PHI]),
                _even_perms([PHI,2,PHI+1])
            ))],
    ["cuboctahedron", "archimedean", 14, [4,3], sqrt(2), sqrt(2)/2, sqrt(3)/2, 1, 5*sqrt(2)/3,
            _point_ref(_all_perms([1,1,0]))],
    ["icosidodecahedron", "archimedean", 32, [5,3], 1, sqrt(5*(5+2*sqrt(5)))/5,sqrt(5+2*sqrt(5))/2, PHI, (14+17*PHI)/3,
            _point_ref(concat(_even_perms([0,0,PHI]),_even_perms([1/2,PHI/2,PHI*PHI/2])))],
    ["rhombicuboctahedron", "archimedean", 26, [4, 3], 2, (1+sqrt(2))/2, sqrt(2*(2+sqrt(2)))/2, sqrt(5+2*sqrt(2))/2, 4+10*sqrt(2)/3,
            _point_ref(_even_perms([1,1,1+sqrt(2)]))],
    ["rhombicosidodecahedron", "archimedean", 62, [5,4,3], 2, 3/10*sqrt(15+20*PHI), sqrt(3/2+2*PHI), sqrt(8*PHI+7)/2, (31+58*PHI)/3,
            _point_ref(concat(
                _even_perms([1,1,PHI*PHI*PHI]),
                _even_perms([PHI*PHI,PHI,2*PHI]),
                _even_perms([2+PHI,0,PHI*PHI])
            ))],
    ["truncated cuboctahedron", "archimedean", 26, [8, 6, 4], 2, (1+2*sqrt(2))/2, sqrt(6*(2+sqrt(2)))/2, sqrt(13+6*sqrt(2))/2, (22+14*sqrt(2)),
            _point_ref(_all_perms([1,1+sqrt(2), 1+2*sqrt(2)]))],
    ["truncated icosidodecahedron", "archimedean", 62, [10,6,4], 2*PHI - 2, sqrt(15/4+5*PHI),sqrt(9/2+6*PHI),sqrt(19/4+6*PHI), 95+50*sqrt(5),
            _point_ref(concat(
                _even_perms([1/PHI,1/PHI,3+PHI]),
                _even_perms([2/PHI,PHI,1+2*PHI]),
                _even_perms([1/PHI,PHI*PHI,3*PHI-1]),
                _even_perms([2*PHI-1,2,2+PHI]),
                _even_perms([PHI,3,2*PHI])
            ))],
    ["snub cube", "archimedean",    38, [4,3], 1.60972,1.14261350892596209,1.24722316799364325, 1.34371337374460170,
            sqrt((613*_tribonacci+203)/(9*(35*_tribonacci-62))),
            concat(
                _point_ref(_even_perms([1,1/_tribonacci,_tribonacci]), sign="odd"),
                _point_ref(_even_perms([1,_tribonacci,1/_tribonacci]), sign="even")
            )],
    ["snub dodecahedron", "archimedean", 92, [5, 3], 1, 1.98091594728184,2.097053835252087,2.155837375115, 37.61664996273336,
            concat(
                _point_ref(_even_perms([0.374821658114562,0.330921024729844,2.097053835252088]), sign="odd"),
                _point_ref(_even_perms([0.192893711352359,1.249503788463027,1.746186440985827]), sign="odd"),
                _point_ref(_even_perms([1.103156835071754,0.847550046789061,1.646917940690374]), sign="odd"),
                _point_ref(_even_perms([0.567715369466922,0.643029605914072,1.977838965420219]), sign="even"),
                _point_ref(_even_perms([1.415265416255982,0.728335176957192,1.454024229338015]), sign="even")
            )],

    // Catalan Solids, the duals to the Archimedean solids, listed in the corresponding order

    ["triakis tetrahedron","catalan", 12, [3], 9/5, 5*sqrt(22)/44, 5*sqrt(2)/12, 5*sqrt(6)/12, 25*sqrt(2)/36,
            concat(
                _point_ref([9*sqrt(2)/20*[1,1,1]],sign="even"),
                _point_ref([3*sqrt(2)/4*[1,1,1]],sign="odd")
            )],
    ["tetrakis hexahedron", "catalan", 24, [3], 1, 2/sqrt(5), 2*sqrt(2)/3, 2/sqrt(3), 32/9,
            _point_ref(concat([[2/3,2/3,2/3]],_even_perms([1,0,0])))],
    ["triakis octahedron", "catalan", 24, [3], 2, sqrt(17*(23+16*sqrt(2)))/34, 1/2+sqrt(2)/4,(1+sqrt(2))/2,3/2+sqrt(2),
            _point_ref(concat([[1,1,1]],_even_perms([1+sqrt(2),0,0])))],
    ["pentakis dodecahedron", "catalan", 60, [3], 1,sqrt(477/436+97*sqrt(5)/218), sqrt(5)/4+11/12, sqrt(7/4+sqrt(5)/3), 125*sqrt(5)/36+205/36,
            _point_ref(concat(
                _even_perms([0,(5-PHI)/6, PHI/2+2/3]),
                _even_perms([0,(PHI+1)/2,PHI/2]),[(4*PHI-1)/6 * [1,1,1]]
            ))],
    ["triakis icosahedron", "catalan", 60, [3], 1, sqrt((139+199*PHI)/244), (8*PHI+1)/10, sqrt(13/8+19/8/sqrt(5)), (13*PHI+3)/2,
            _point_ref(concat(
                _even_perms([(PHI+7)/10, 0, (8*PHI+1)/10]),
                _even_perms([0, 1/2, (PHI+1)/2]),[PHI/2*[1,1,1]]
            ))],
    ["rhombic dodecahedron", "catalan", 12, [4], sqrt(3), sqrt(2/3), 2*sqrt(2)/3, 2/sqrt(3), 16*sqrt(3)/9,
            _point_ref(concat([[1,1,1]], _even_perms([2,0,0])))],
    ["rhombic triacontahedron", "catalan", 30,[4], 1, sqrt(1+2/sqrt(5)), 1+1/sqrt(5), (1+sqrt(5))/2, 4*sqrt(5+2*sqrt(5)),
            concat(
                _point_ref(_even_perms([0,sqrt(1+2/sqrt(5)), sqrt((5+sqrt(5))/10)])),
                _point_ref(_even_perms([0,sqrt(2/(5+sqrt(5))), sqrt(1+2/sqrt(5))])),
                _point_ref([sqrt((5+sqrt(5))/10)*[1,1,1]])
            )],
    ["deltoidal icositetrahedron", "catalan", 24, [4], 2*sqrt(10-sqrt(2))/7, 7*sqrt((7+4*sqrt(2))/(34 * (10-sqrt(2)))),
            7*sqrt(2*(2+sqrt(2)))/sqrt(10-sqrt(2))/4, 7*sqrt(2)/sqrt(10-sqrt(2))/2,
            (14+21*sqrt(2))/sqrt(10-sqrt(2)),
            _point_ref(concat(
                _even_perms([0,1,1]), _even_perms([sqrt(2),0,0]),
                _even_perms((4+sqrt(2))/7*[1,1,1])
            ))],
    ["deltoidal hexecontahedron", "catalan", 60, [4], sqrt(5*(85-31*sqrt(5)))/11, sqrt(571/164+1269/164/sqrt(5)), 5/4+13/4/sqrt(5),
            sqrt(147+65*sqrt(5))/6, sqrt(29530+13204*sqrt(5))/3,
            _point_ref(concat(
                _even_perms([0,0,sqrt(5)]),
                _even_perms([0,(15+sqrt(5))/22, (25+9*sqrt(5))/22]),
                _even_perms([0,(5+3*sqrt(5))/6, (5+sqrt(5))/6]),
                _even_perms([(5-sqrt(5))/4, sqrt(5)/2, (5+sqrt(5))/4]),
                [(5+4*sqrt(5))/11*[1,1,1]]
            ))],
    ["disdyakis dodecahedron", "catalan", 48, [3], 1,sqrt(249/194+285/194/sqrt(2)) ,(2+3*sqrt(2))/4, sqrt(183/98+213/98/sqrt(2)),
            sqrt(6582+4539*sqrt(2))/7,
            _point_ref(concat(
                _even_perms([sqrt(183/98+213/98/sqrt(2)),0,0]),
                _even_perms(sqrt(3+3/sqrt(2))/2 * [1,1,0]),[7/sqrt(6*(10-sqrt(2)))*[1,1,1]]
            ))],
    ["disdyakis triacontahedron","catalan", 120, [3], sqrt(15*(85-31*sqrt(5)))/11, sqrt(3477/964+7707/964/sqrt(5)), 5/4+13/4/sqrt(5),
            sqrt(441+195*sqrt(5))/10,sqrt(17718/5+39612/5/sqrt(5)),
            _point_ref(concat(
                _even_perms([0,0,3*(5+4*sqrt(5))/11]),
                _even_perms([0,(5-sqrt(5))/2,(5+sqrt(5))/2]),
                _even_perms([0,(15+9*sqrt(5))/10,3*(5+sqrt(5))/10]),
                _even_perms([3*(15+sqrt(5))/44,3*(5+4*sqrt(5))/22, (75+27*sqrt(5))/44]), [sqrt(5)*[1,1,1]]
            ))],
    ["pentagonal icositetrahedron","catalan",24, [5], 0.593465355971, 1.950681331784, 2.1015938932963, 2.29400105368695, 35.6302020120713,
            concat(
                _point_ref(_even_perms([0.21879664300048044,0.740183741369857,1.0236561781126901]),sign="even"),
                _point_ref(_even_perms([0.21879664300048044,1.0236561781126901,0.740183741369857]),sign="odd"),
                _point_ref(_even_perms([1.3614101519264425,0,0])),
                _point_ref([0.7401837413698572*[1,1,1]])
            )],
    ["pentagonal hexecontahedron", "catalan", 60,[5], 0.58289953474498, 3.499527848905764,3.597624822551189,3.80854772878239, 189.789852066885,
            concat(
                _point_ref(_even_perms([0.192893711352359,0.218483370127321,2.097053835252087]), sign="even"),
                _point_ref(_even_perms([0,0.7554672605165955,1.9778389654202186])),
                _point_ref(_even_perms([0,1.888445389283669154,1.1671234364753339])),
                _point_ref(_even_perms([0.56771536946692131,0.824957552676275846,1.8654013108176956657]),sign="odd"),
                _point_ref(_even_perms([0.37482165811456229,1.13706613386050418,1.746186440985826345]), sign="even"),
                _point_ref(_even_perms([0.921228888309550,0.95998770139158,1.6469179406903744]),sign="even"),
                _point_ref(_even_perms([0.7283351769571914773,1.2720962825758121,1.5277030708585051]),sign="odd"),
                _point_ref([1.222371704903623092*[1,1,1]])
            )],
];


_stellated_polyhedra_ = [
    ["great dodecahedron", "icosahedron", -sqrt(5/3-PHI)],
    ["small stellated dodecahedron", "dodecahedron", sqrt((5+2*sqrt(5))/5)],
    ["great stellated dodecahedron", "icosahedron", sqrt(2/3+PHI)],
    ["small triambic icosahedron", "icosahedron", sqrt(3/5) - 1/sqrt(3)]
];


// Function: regular_polyhedron_info()
// Synopsis: Returns info used to create a regular polyhedron.
// Topics: Polyhedra, Shapes, Parts
// See Also: regular_polyhedron()
//
// Usage:
//   info = regular_polyhedron_info(info, ...);
//
// Description:
//   Calculate characteristics of regular polyhedra or the selection set for regular_polyhedron().
//   Invoke with the same polyhedron selection and size arguments used by {{regular_polyhedron()}} and use the `info` argument to
//   request the desired return value. Set `info` to:
//     * `"vnf"`: vnf for the selected polyhedron
//     * `"vertices"`: vertex list for the selected polyhedron
//     * `"faces"`: list of faces for the selected polyhedron, where each entry on the list is a list of point index values to be used with the vertex list
//     * `"face normals"`: list of normal vectors for each face
//     * `"in_radius"`: in-sphere radius for the selected polyhedron
//     * `"mid_radius"`: mid-sphere radius for the selected polyhedron
//     * `"out_radius"`: circumscribed sphere radius for the selected polyhedron
//     * `"index set"`: index set selected by your specifications; use its length to determine the valid range for `index`.
//     * `"face vertices"`: number of vertices on the faces of the selected polyhedron (always a list)
//     * `"edge length"`: length of the smallest edge of the selected polyhedron
//     * `"center"`: center for the polyhedron
//     * `"type"`: polyhedron type, one of "platonic", "archimedean", "catalan", or "trapezohedron"
//     * `"name"`: name of selected polyhedron
//   If you specify an impossible selection of polyhedrons, then `[]` is returned.  
//
// Arguments:
//   info = Desired information to return for the polyhedron
//   name = Name of polyhedron to create.
//   ---
//   type = Type of polyhedron: "platonic", "archimedean", "catalan".
//   faces = Number of faces.
//   facetype = Scalar or vector listing required type of faces as vertex count.  Polyhedron must have faces of every type listed and no other types.
//   hasfaces = Scalar of vector list face vertex counts.  Polyhedron must have at least one of the listed types of face.
//   index = Index to select from polyhedron list.  Default: 0.
//   side = Length of the smallest edge of the polyhedron.  Default: 1 (if no radius or diameter is given).
//   or / r / d = outer radius.   Polyhedron is scaled so it has the specified outer radius or diameter. 
//   mr = middle radius.  Polyhedron is scaled so it has the specified middle radius.  
//   ir = inner radius.  Polyhedron is scaled so it has the specified inner radius. 
//   anchor = Side of the origin to anchor to.  The bounding box of the polyhedron is aligned as specified.  Default: `CENTER`
//   facedown = If false display the solid in native orientation.  If true orient it with a largest face down.  If set to a vertex count, orient it so a face with the specified number of vertices is down.  Default: true.
//   stellate = Set to a number to erect a pyramid of that height on every face of your polyhedron.  The height is a multiple of the side length.  Default: false.
//   longside = Specify the long side length for a trapezohedron.  Invalid for other shapes.
//   h = Specify the height of the apex for a trapezohedron.  Invalid for other shapes.