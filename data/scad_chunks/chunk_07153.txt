module BLetter(chr="",dots=[1,1,1, 1,1,1],boxSize=[7,10,.5],dotSize=[1.5,1.5,0.6],dotDist=[2.3,2.5],dotTopSize=[1,1]*0.6,language="de",center=false,help){

HelpTxt("BLetter",["chr",chr,"dots",dots,"boxSize",boxSize,"dotSize",dotSize,"dotDist",dotDist,"dotTopSize",dotTopSize,"language",language,"center",center],help);


charDE=[
["0",[0,1,0, 1,1,0]],
["1",[1,0,0, 0,0,0]],
["2",[1,1,0, 0,0,0]],
["3",[1,0,0, 1,0,0]],
["4",[1,0,0, 1,1,0]],
["5",[1,0,0, 0,1,0]],
["6",[1,1,0, 1,0,0]],
["7",[1,1,0, 1,1,0]],
["8",[1,1,0, 0,1,0]],
["9",[0,1,0, 1,0,0]],

["A",[1,0,0, 0,0,0]],
["B",[1,1,0, 0,0,0]],
["C",[1,0,0, 1,0,0]],
["D",[1,0,0, 1,1,0]],
["E",[1,0,0, 0,1,0]],
["F",[1,1,0, 1,0,0]],
["G",[1,1,0, 1,1,0]],
["H",[1,1,0, 0,1,0]],
["I",[0,1,0, 1,0,0]],
["J",[0,1,0, 1,1,0]],
["K",[1,0,1, 0,0,0]],
["L",[1,1,1, 0,0,0]],
["M",[1,0,1, 1,0,0]],
["N",[1,0,1, 1,1,0]],
["O",[1,0,1, 0,1,0]],
["P",[1,1,1, 1,0,0]],
["Q",[1,1,1, 1,1,0]],
["R",[1,1,1, 0,1,0]],
["S",[0,1,1, 1,0,0]],
["T",[0,1,1, 1,1,0]],
["U",[1,0,1, 0,0,1]],
["V",[1,1,1, 0,0,1]],
["W",[0,1,0, 1,1,1]],
["X",[1,0,1, 1,0,1]],
["Y",[1,0,1, 1,1,1]],
["Z",[1,0,1, 0,1,1]],
["Ä",[0,0,1, 1,1,0]],
["Ö",[0,1,0, 1,0,1]],
["Ü",[1,1,0, 0,1,1]],
["#",[0,0,1, 1,1,1]],
["_",[0,0,0, 1,1,1]],
["-",[0,0,1, 0,0,1]],
[":",[0,1,0, 0,1,0]],
[".",[0,0,1, 0,0,0]],
[" ",[0,0,0, 0,0,0]],
["$",[0,0,0, 1,0,1]],
["?",[0,1,0, 0,0,1]],
["!",[0,1,1, 0,1,0]],
[">",[0,0,0, 1,1,0]],
["<",[0,0,0, 0,1,1]],
["&",[1,1,1, 1,0,1]],
["(",[0,1,1, 0,1,1]],
[")",[0,1,1, 0,1,1]],
["'",[0,0,0, 0,0,1]],
["ñ",[1,1,0, 1,1,1]],//⠻["1",[1,0,0, 0,0,0]],

["ẞ",[0,1,1, 1,0,1]],
["ß",[0,1,1, 1,0,1]],

["st",[0,1,1, 1,1,1]], 
["au",[1,0,0, 0,0,1]], 
["eu",[1,1,0, 0,0,1]], 
["ei",[1,0,0, 1,0,1]], 
["äu",[0,0,1, 1,0,0]], 
["ie",[0,0,1, 1,0,1]], 
["ch",[1,0,0, 1,1,1]], 
["sch",[1,0,0, 0,1,1]], 

["%",[1,1,1, 1,1,1]],
[" ",[0,0,0, 0,0,0]]
];

charEN=[
["0",[0,1,0, 1,1,0]],
["1",[1,0,0, 0,0,0]],
["2",[1,1,0, 0,0,0]],
["3",[1,0,0, 1,0,0]],
["4",[1,0,0, 1,1,0]],
["5",[1,0,0, 0,1,0]],
["6",[1,1,0, 1,0,0]],
["7",[1,1,0, 1,1,0]],
["8",[1,1,0, 0,1,0]],
["9",[0,1,0, 1,0,0]],

["A",[1,0,0, 0,0,0]],
["B",[1,1,0, 0,0,0]],
["C",[1,0,0, 1,0,0]],
["D",[1,0,0, 1,1,0]],
["E",[1,0,0, 0,1,0]],
["F",[1,1,0, 1,0,0]],
["G",[1,1,0, 1,1,0]],
["H",[1,1,0, 0,1,0]],
["I",[0,1,0, 1,0,0]],
["J",[0,1,0, 1,1,0]],
["K",[1,0,1, 0,0,0]],
["L",[1,1,1, 0,0,0]],
["M",[1,0,1, 1,0,0]],
["N",[1,0,1, 1,1,0]],
["O",[1,0,1, 0,1,0]],
["P",[1,1,1, 1,0,0]],
["Q",[1,1,1, 1,1,0]],
["R",[1,1,1, 0,1,0]],
["S",[0,1,1, 1,0,0]],
["T",[0,1,1, 1,1,0]],
["U",[1,0,1, 0,0,1]],
["V",[1,1,1, 0,0,1]],
["W",[0,1,0, 1,1,1]],
["X",[1,0,1, 1,0,1]],
["Y",[1,0,1, 1,1,1]],
["Z",[1,0,1, 0,1,1]],

["and",[1,1,1, 1,0,1]],
["&",[1,1,1, 1,0,1]],
["for",[1,1,1, 1,1,1]],
["of",[1,1,1, 0,1,1]],
["the",[0,1,1, 1,0,1]],
["with",[0,1,1, 1,1,1]],

["ch",[1,0,0, 0,0,1]],
["gh",[1,1,0, 0,0,1]],
["sh",[1,0,0, 1,0,1]],
["th",[1,0,0, 1,1,1]],
["wh",[1,0,0, 0,1,1]],
["ed",[1,1,0, 1,0,1]],
["er",[1,1,0, 1,1,1]],
["ou",[1,1,0, 0,1,1]],
["ow",[0,1,0, 1,0,1]],
["w",[0,1,0, 1,1,1]], // W

[",",[0,1,0, 0,0,0]],
[";",[0,1,1, 0,0,0]],
[":",[0,1,0, 0,1,0]],
//[".",[0,1,0, 0,1,1]],
["en",[0,1,0, 0,0,1]],
["!",[0,1,1, 0,1,0]],
["(",[0,1,1, 0,1,1]],
[")",[0,1,1, 0,1,1]],
["?",[0,1,1, 0,0,1]],
["in",[0,0,1, 0,1,0]],
//["\"",[0,0,1, 0,1,1]] // "
[".",[0,0,0, 1,0,1]],
["'",[0,0,1, 0,0,0]],

["/",[0,0,1, 1,0,0]],
["\\",[1,1,0, 0,1,1]], // " \" "
[" ",[0,0,0, 0,0,0]]
];



char=language=="de"?charDE:charEN;

if(help)echo(chr=chr,charPos=search([str(chr)],char),data=char[ search([str(chr)],char)[0] ],language=language);

dots=ord(str(chr))? char[  search([str(chr)],char)[0] ] [1]:dots;


pBox=[
[0,0,0],
[boxSize.x,0,0],
[boxSize.x,boxSize.y,0],
[0        ,boxSize.y,0],
[0,        0,        boxSize.z],
[boxSize.x,0,        boxSize.z],
[boxSize.x,boxSize.y,boxSize.z],
[0        ,boxSize.y,boxSize.z]
];



pos=[for(x=[-dotDist.x,dotDist.x]/2,y=[dotDist.y,0, -dotDist.y])
      [boxSize.x/2+x,boxSize.y/2+y,0]
    ];


pGrid=[for(pos=pos)each[
[-dotSize.x/2,-dotSize.y/2,boxSize.z]+pos,
[ dotSize.x/2,-dotSize.y/2,boxSize.z]+pos,
[ dotSize.x/2, dotSize.y/2,boxSize.z]+pos,
[-dotSize.x/2, dotSize.y/2,boxSize.z]+pos
]
];

//points for dot top octagon
pDots=assert(is_list(dots),"dots need to be a list")let(rot=180/8*-1)[for(dot=[0:5])
for(i=[0:7])[cos(i*360/8+rot)*dotTopSize.x/2,sin(i*360/8+rot)*dotTopSize.y/2,boxSize.z+dotSize.z*dots[dot]]+pos[dot]
];

// 5 faces box (bottom + sides)
fBox=[
[0,1,2,3],
for(i=[0:2])[4,5,1,0]+[i,i,i,i],
[0,3,7,4]
];

// fill deactive dots
fGrid=[for(f=[0:5])if(dots[f]==0)
[0,3,2,1]+[1,1,1,1]*(8+f*4)
];

// 8 dot side faces
fDots=[for(f=[0:5])if(dots[f])each[
for(i=[+0:3])[32+(6+i*2)%8+f*8, 8+i+f*4          , 32+(5+i*2)%8+f*8           ],
for(i=[+0:3])[32+(6+i*2)%8+f*8, 32+(7+i*2)%8+f*8 , 8+(1+i)%4+f*4   ,  8+i+f*4 ],
]
];

// dot top face octagon
fDotTop=
[for(f=[0:5])if(dots[f])
[for(i=[7:-1:0])i +32+f*8]
];

// top box faces around dots
fTop=[
[5,4,16,17,28,29],//y bottom
[6,5,29,30,25,26,21,22],//x right
[7,6,22,23,10,11],//y top
[4,7,11,8,15,12,19,16],//x left

[8,9,20,21,26,27,14,15],// x line1
[8,9,20,21,26,27,14,15]+[1,1,1,1,1,1,1,1]*4,// x line2

[9,10,23,20], // y center 1
[9,10,23,20]+[1,1,1,1]*4, // y center 2
[9,10,23,20]+[1,1,1,1]*8 // y center 2
];

points=concat(pBox,pGrid,pDots);

if (center){
  pointsC=[for(i=points)i-[boxSize.x,boxSize.y,0]/2];
  polyhedron(pointsC,concat(fBox,fGrid,fTop,fDots,fDotTop),convexity=5);
  }
else polyhedron(points,concat(fBox,fGrid,fTop,fDots,fDotTop),convexity=5);



}


/** \name Chuck
/brief Chuck() to clamp objects
/param d clamp diameter
/param gripH grip heigt
/param p thread pitch
/param dn thread diameter
/param gripD grip Diameter
/param deg thread conical angle
/param threads number thread starts
/param inPlace print in place
/param label engrave d 
/param pattern knurl  pattern use list for different locknut
/param opt  0 = chuck 1 = locknut (-1 no preview  locknut)
*/

//Cut()Chuck();