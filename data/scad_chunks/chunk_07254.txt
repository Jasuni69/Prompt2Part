module Menu(){
if (texton&&$preview)%rotate($vpr)T(20,-30,25)color("slategrey")text(str(name),font="DejaVusans:style=bold",halign="left",size=is_num(texton)?texton:$vpd/75,$fn=100);
    
if (bed&&!anima)color(alpha=.1)%Rand(-5,delta=1)square(printBed);
if(!anima) { echo(str("•••••• UB (USER library v2024) included! v.gd/ubaer  ••••••"
,"\n• Version: β",Version," v ",version()," • Design: ",designVersion,"\nLayer: ",layer,"(",runden(lineProfile/nozArea*100,2),"%)",line==nozzle?str(" Nozzle ∅: ",nozzle):str(" Line/Nozzle ",line,"/",nozzle)," • fn:",fn," fs:",fs," fa:",fa," • Spiel: ",spiel," •"));
}
Echo(str("nozzle area =",runden(nozArea,3),"mm²< print line profile",runden(lineProfile,3),"mm²"),color="redring",condition=nozArea<=lineProfile);


if (!help&&!anima) echo    ("❌••••• Help off       use: helpsw=1;  •••••");
    

if (help&&!anima||help2D||helpMod||helpFunc||helpB||helpP||helpHelper){
    echo ("••••••• Konstanten:   ••••••••");
    echo(PHI=PHI,gw=gw,tw=tw,twF=twF,inch=inch);
//echo(str("•••••••••• Help is on! (helpsw=1)•• debug=",debug," ••••••••••••••••••••••••"));
//echo();
if (show)echo(str("🟣 ••• show=",show)); 
    


if(!helpHelper)echo("❌••••• Helper List off — use» helpHelper=true; •••••");
if (helpHelper){
echo    ("•••••••••• Helper:   •••••••••••••••\n
• Schnitt(help=1) cuts children\n
• Cut(help=1) cuts children\n
• Col(help=1) colors children with palette\n
• Color(help=1) colors children with hue\n
• Pivot(help=1) marks p0\n
• Line(help=1) line p0⇔p1 \n
• SCT(help=1) output sin cos tan\n
• Caliper(help=1) measure \n
• Points(help=1) numbers points\n
• Anordnen(help=1) arranges \n
• InfoTxt(help=1) output Infotxt \n
• HelpTxt(help=1) output helptxt \n
• Echo(help=1) output txt \n
• 3Projection(help=1) projects child along axis \n
• PrevPos(help=1) moves only for preview \n
• PolyDeg(help=1) show angle in points (use2D)\n
  
  ");
}

if(!helpFunc)echo("❌••••• Functions List off — use» helpFunc=true; •••••");
if (helpFunc){
echo    ("•••••••••• Funktionen:   •••••••••••••••");
echo    ("
••• l(x) Layer\n
••• n(x) Nozzledurchmesser\n
••• line(n) perimeter \n
••• inkreis(eck, rU)\n
••• umkreis(eck, rI)\n
••• hypotenuse(a, b) length\n
••• kathete(hyp, kat) length\n
••• sehne(n, r, a) length n-eck/alpha winkel •••\n
••• RotLang(rot, l, z, e, lz) [vector] (e=elevation)•••\n
••• bezier(t, p0=[0,0], p1=[-20,20],p2=[20,20],p3=[0,0]) points   •••\n
••• kreis(r=10, rand=+5, grad=360,grad2=+0,fn=fn,center=true,sek=true,r2=0,rand2=0,rcenter=0,rot=0,t=[0,0],z=undef) points •••\n
// ••• kreisXY(r=5, grad=0) [vector]•••\n
••• 5gon(b1=20, l1=15, b2=10, l2=30) points •••\n
••• ZigZag(e=5, x=50, y=5, mod=2, delta=+0, base=2, shift=0) points •••\n
••• TangentenP(grad, rad, r, deg) length •••\n
••• Hexstring(c=[r, g, b]) #hexcolor •••\n
••• RotPoints(grad, points) •••\n
••• negRed(num) negative consolen Werte in rot•••\n   
••• gradB(b, r) grad zum Bogenstück b •••\n 
••• gradS(s, r) grad zur Sehne s •••\n     
••• vollwelle() ⇒ Vollwelle(help=1) •••\n
••• runden(x, dec=2) x runden auf Dezimalstelle ••• \n
••• radiusS(s, n, a) radius zur Sehne ••• \n
••• radiusSH(sh) Radius zum Umkreis Sehne Höhe••• \n
••• distS(s,r) Distanz Sehne Mittelpunkt ••• \n
••• gradC(grad=0, min=0, sec=0, h=0, prozent=0, gon=0, rad=0) Winkelmaßumrechnung ••• \n  
••• inch(inch) Inch⇒mm •••\n 
••• kreisbogen(r, grad=360) ••• \n
••• fs2fn(r, grad=360, fs=fs,minf=3); •••\n
••• vektorWinkel(p1, p2, twist=0); •••\n
••• v3(v); makes v a vector3 •••\n
••• parentList(n=-1, start=1) list with all parent modules parent_module(“[start:n]“) •••\n
••• teiler(n, div=2) least divisior •••\n
••• gcode(points, f) generates gcode in output •••\n
••• b(n); switches bool in num and vica versa (works on vectors) •••\n
••• scaleGrad(grad=45, h=1,r=1) scale factor for extrusions •••\n
••• is_parent(needs2D) search parentlist for string or list of strings (parent module needing polygon children) \n
••• m(r=[0,0,0], t=[0,0,0], s=[1,1,1])// multmatrix vector*concat(point,[1]) for rotation and translation •••\n
••• mPoints(points,r,t,s) use with 2D&3D point / points •••\n
••• pathPoints(points,path,twist,scale) •••\n
••• tetra(r) tetrahedron points •••\n
••• octa(r,n,d)  octaheadron points (subdiv n) ••• \n
••• quad(x,y,r,t,center,fn,z)  Quad points ••• \n
••• stern(e=5,r1=10,r2=5,mod=2,delta=+0,z)  Stern points ••• \n
••• wStern(f=5,r=1.65,a=.25,r2,fn=fn,rot=0,z)  ••• \n
••• superellipse(n=2.5,r=10,z,fn=fn) ••• \n
••• star(e=5,r1=10,r2=5,grad=[0,0],grad2,radial=false,fn=0,z,angle=360,rot=0) ••• \n
••• wall(soll,min=1.75,even=false,nozzle=nozzle) adapt to line width (nozzle) ••• \n
••• vMult(v1,v2) vector multiplication ••• \n
••• vSum(v,start=0,end,val=0) ••• \n
••• naca(l,0012) NACA airfoil ••• \n
••• pathLength(points,start=0,end,close=0) ••• \n
••• stringChunk(txt,start=0,length) •••\n
••• string2num(string,start=0,length) •••\n
••• nut (e=2,es=10,a=6,b=6,base=1,h=1,s,center=true,shift=0,grad,z) •••\n
••• involute(r=10,grad=45,fn=fn,rot=0,rev=0,delta=0,z) ••• \n
••• riemen(r1=5,r2=10,tx=20,fn=fn,z,center=false) ••• \n
••• kreisSek(r=10,grad=90,h=0,mitte=0,fn=fn,center=true,mirror=false,rev=0,t=[0,0],z) ••• \n
••• sq (size=[10,10],fn=[10,10],diff=0,t=[0,0,0],z,center=true) ••• \n
••• bend (points,r=0,t=[0,0,0],rev=false) ••• \n
••• scene (scenes,t) ••• \n
••• map (val,from,to=[0,1],constrain=true) ••• \n
••• polyRund(points,r,ir,ofs,delta,fn,fs) round and offset input points••• \n
••• revP(points) reverse Point order ••• \n
••• arc(r,deg,r2,rot,t,z,fn,rev) ••• \n
••• pt(pt) typographic unit in mm••• \n
••• parabel(x,a,fn,exp,bp,lap,t,rev)••• \n
••• vMin(v=[1,2,3],min=0)••• \n
••• vMax(v=[1,2,3],max=0)••• \n
••• vAdd(v=[1,2,3],add=0)••• \n
••• transition(i,fn)••• \n
••• triUmkreis(points=[a,b,c]) circumcenter ••• \n
••• triInkreis(points=[a,b,c]) incenter••• \n

");
    
}

//Objektmodifikatoren
if(!helpMod)echo("❌••••• Objektmodifikatoren List off — use» helpMod=true; •••••");
if (helpMod){
echo    ("•••••••••• Objektmodifikatoren:   ••••••");
echo    ("•••• T(x=0,y=0,z=0)•Tz(z=0) ••• R(x=0,y=0,z=0)  ••");
echo    ("•••• M(skewzx=0,skewzy=0,skewxz=0,skewxy=0,skewyz=0,skewyx=+0,scale=1,scalexy=1,scalexz=1,scaleyz=1)••");
echo    ("•••• Rund(or=+0,ir=0,chamfer=false,fn,fs=fs)polygon••");
echo    ("•••• Linear(es=1,s=100,e=2,x=1,y=0,z=0,r=0,re=0,center=0,cx=0,cy=0,cz=0 ••");   
echo    ("•••• Polar(e=3,x=0,y=0,r=0,re=0,end=360,dr=0,mitte=false,name)dr=delta element rotation  ••");
echo    ("•••• Grid(es=[10,10,10],e=[2,2,1],center=true) ••");
echo    ("•••• HexGrid ()");   
echo    ("•••• Klon(tx=10,ty=0,tz=0,rx=0,ry=0,rz=0) Objekt ");
echo    ("•••• Halb(i=0,x=0,y=0,z=1, use2D=0)Objekt      ••");
echo    ("•••• Drehpunkt(rx=0,ry=0,rz=0,x=0,y=0,z=0,messpunkt=1)Objekt      ••");
echo    ("••••  Kextrude(help=1); ••");  
echo    ("•••• LinEx2(bh=5,h=1,slices=10,s=1.00,ds=0.01,dh=0.7,fs=1,fh=1,twist=0,name,fn=fn) ••");
echo    ("•••• Rand(rand=n(1),center=false,fn=fn,delta=false,chamfer=false)  ••");
echo    ("•••• Gewinde(help=1)••");
echo    ("•••• GewindeV3(dn=5,h=10,kern=0,p=1,w=0,profil=0,gh=0.56,g=1,name,fn=36)••");
echo    ("•••• Kontaktwinkel(help=1) Objekt  ••"); 
echo    ("•••• Laser3D(h=4,layer=10,var=0.002,name,on=-1)3D-Objekt ••");

echo    ("\n
•••• MKlon() //Objekt  •• \n
•••• Row(help=1)// opt. Objekt ••\n
•••• Scale(help=1)// Objekt ••\n
•••• Select()// Children ••\n

");

}
if(!helpGen)echo("❌••••• ObjektGenerator List off — use» helpGen=true; •••••");
if (helpGen){
  echo("\n
  •••• Rundrum(x=+40,y=30,r=10,eck=4,twist=0,grad=0,spiel=0.005,fn=fn,name) polygon RStern(help=1)polygon ••
  •••• Bogen(help=1)// opt Polygon   ••\n
  •••• SBogen(help=1)// opt Polygon   ••\n
  •••• Bevel(help=1)// Objekt ••\n
  •••• Bezier(help=1) Objekt ••\n
  •••• Schlaufe(help=1) polygon •• \n
  •••• Elipse(x=2,y=2,z=0,fn=36)Object•• \n
  •••• RotEx(grad=360,fn=fn,center=false)  ••\n
  •••• LinEx(help=1) polygon  ••
  •••• Ttorus(r=20,twist=360,angle=360,fn=fn)3D-Objekt      ••
  
  ");
}

//  2D 

if(!help2D)echo("❌••••• Polygon List off — use» help2D=true; •••••");
if (help2D){
echo    ("•••••• Polygons ••••••\n
•• Kreis();\n 
•• Trapez(h=2.5,x1=6,x2=3.0,d=1,x2d=0,fn=36,name);\n
•• Tri(grad=60,l=20,h=0,r=0,messpunkt=0,center=+0,top=1,tang=1,fn=fn,name,help=helpM);\n
•• Tri90(grad,a,b,c,help=1);\n
•• Quad(x=20,y=20,r=3,grad=90,grad2=90,fn=36,center=true,centerX=false,n=false,messpunkt=false,help=helpM);\n
•• VorterantQ(size=20,ofs=.5);\n
•• Linse(dia=10,r=7.5,name,messpunkt=true);\n
•• Bogendreieck(rU=5,vari=-1,fn=fn,name);\n
•• Reuleaux(rU=5,name,fn=fn);\n
•• Stern(e=5,r1=10,r2=5,mod=2,delta=+0,name);\n
•• ZigZag(e=5,es=0,x=50,y=5,mod=2,delta=+0,base=2,center=true,name,help=$helpM);\n
•• WStern(help=1);\n
•• Superellipse(help=1);\n
•• Flower(help=1);\n
•• Seg7(help=1);\n
•• WKreis(help=1);\n
•• RSternFill(help=1);\n
•• Cycloid(help=1);\n
•• SQ(help=1);\n
•• Vollwelle(help=1);\n
•• SWelle(help=1);\n
•• CycloidZahn(help=1);\n
•• Nut(help=1);\n
•• DBogen(help=1);/*(opt polygon)\n*/
•• Pfeil(help=1);\n
•• DPfeil(help=1);\n
•• Rosette(help=1);\n
•• GT(help=1);\n
•• Egg(help=1);\n
•• VarioFill(help=1);\n
•• Welle(help=1);\n
•• Tdrop(help=1);\n
•• Star(help=1);\n
•• NACA(help=1);\n
•• Involute(help=1);\n
•• Riemen(help=1);\n
•• PolyRund(help=1);\n
•• Arc(help=1);\n
•• Tesselation(help=1);\n
•• Connector(help=1);\n
•• Penrose(help=1);\n
•• RectTiling(help=1);\n
•• Voronoi(help=1);\n

");
}


  if(!helpB)echo("❌••••• Basis objects List off — use» helpB=true; •••••");   
 if(helpB){//  BASIS OBJEKTE   
 
    
echo();    
echo    ("•••••••••• BasisObjekte:   •••••••••••••\n
\n

•• [300] Kugelmantel(d=20,rand=n(2),fn=fn);\n

•• [30] Kegel (d1=12,d2=6,v=1,fn=fn,name,center=false,grad=0);\n
•• [31] MK(d1=12,d2=6,v=19.5);//v=Steigung\n
•• [301] Kegelmantel (d=10,d2=5,v=1,rand=n(2),loch=4.5,grad=0,center=false,fn=fn,name);\n
•• [32] Ring(h=5,rand=5,d=20,cd=1,center=false,fn=fn,name, use2D=0);// cd=1,0,-1\n
•• [33] Torus(trx=10,d=5,a=360,fn=fn,fn2=fn,r=0,name=1,dia=0,center=true,end=0);//opt polygon \n
•• [34] Torus2(m=10,trx=10,a=1,rq=1,d=5,w=2);//m=feinheit,trx = abstand mitte,a = sin verschiebung , rq=mplitude, w wellen \n
••  WaveEx(help=1);\n   
•• [35] Pille(l=10,d=5,fn=fn,fn2=36,center=true,n=1,rad=0,rad2=0,loch=false);\n
•• [402] Strebe(skew=0,h=20,d=5,rad=4,rad2=3,sc=0,grad=0,spiel=0.1,fn=fn,center=false,name, use2D=false);\n
•• WStrebe(grad=45,grad2=0,h=20,d=2,rad=3,rad2=0,sc=0,angle=360,spiel=.1,fn=fn, use2D=false,center=true,help=$helpM) \n
•• [36] Twins(h=1,d=0,d11=10,d12=10,d21=10,d22=10,l=20,r=0,fn=60,center=0,sca=+0, use2D=false);\n
•• [37] Kehle(rad=2.5,dia=0,l=20,angle=360,fn=fn,spiel=spiel,fn2=fn,r2=0);\n
••  REcke(help=1);\n
••  HypKehle(help=1);\n
••  HypKehleD();\n

•• [46] Text(text=\"»«\",size=5,h=0,cx=0,cy=0,cz=0,center=0,font=\"Bahnschrift:style=bold\");\n
•• [47] W5(kurv=15,arms=3,detail=.3,h=50,tz=+0,start=0.7,end=13.7,topdiameter=1,topenddiameter=1,bottomenddiameter=+2);\n

•• [50] Rohr(grad=90,rad=5,d=8,l1=10,l2=12,fn=fn,fn2=fn,rand=n(2),name=0);\n
•• [51] Dreieck(h=10,ha=10,ha2=ha,s=1,name=1,c=0, use2D=0,grad=0);//  s=skaliert  c=center\n
•• [52] Freiwinkel(w=60,h=5);   \n
•• [54] Sinuskoerper(h=10,d=33,rand=2,randamp=1,randw=4,amp=1.5,w=4,detail=3,vers=0,fill=0, use2D=0,twist=0,scale=1); /* amp=Amplitude, w=Wellen, vers=versatz*/\n

•• [55] Kassette(r1=2,r2=2,size=20,h=0,gon=3,fn=fn,fn2=36,r=0,grad=90,grad2=90,spiel=0.001,mitte=true,sizey=0,help=$helpM);\n
•• Surface(help=$helpM);\n
•• FlatMesh(help=true);\n
•• [58] Box(x=8,y=8,z=5,d2=0,c=3.5,s=1.5,eck=4,outer=true,fnC=36,fnS=24);\n
•• [62] Spirale(grad=400,diff=2,radius=10,rand=n(2),detail=5,exp=1,hull=true);/*opt Object*/\n
•• [63] Area(a=10,aInnen=0,rInnen=0,h=0,name);\n
•• [65] Sichel(start=55,max=270,dia=33,radius=30,delta=-1, use2D=false);\n
•• [66] Prisma(x1=12,y1=12,z=6,c1=5,s=1,x2=0,y2=0,x2d=0,y2d=0,c2=0,vC=[0,0,0],cRot=0,fnC=fn,fnS=36,name);\n
•• Ccube(help=1);\n
•• [67] Disphenoid(h=15,l=25,b=20,r=1,ty=0,tz=0,fn=36);\n
•• Zylinder(help=1);\n
•• Welle(help=1); /*opt polygon*/\n
•• Anschluss(help=1);\n
•• QuadAnschluss(help=1);\n
•• RingSeg(help=1); \n
•• Buchtung(help=1);\n
•• SpiralCut(help=1);\n
•• Isosphere(help=1);\n
•• OctaH(help=1); /*Octahedron*/\n
•• PolyH(); /*Polyhedron auto faces */\n
•• Coil();\n
•• Knurl();\n
•• KnurlTri();\n
•• Loch();

");

}
 if(!helpP)echo("❌••••• Produkt List off — use» helpP=true; •••••");
 if(helpP){ // PRODUKT OBJEKTE

echo    ("•••••••••• Produkt Objekte:   ••••••••••");
//echo    ("•• [400] Pivot(p0=[0,0,0],size=pivotSize,active=[1,1,1,1]) ••••");
//echo    ("•• [401] Line(p0, p1, d=.5,center=false) ••••");
//echo    ("•• [402] SCT(a=90) sin cos tan info ••••");
echo    ("•• [42] Gardena(l=10,d=10) ••••"); 
echo    ("•• [43] Servotraeger(SON=1) ••• Servo(r,narbe) ••••");
echo    ("•• [44] Knochen(l=+15,d=3,d2=5,b=0,fn=36)   ••••");
echo    ("•• [38] Glied(l=12,spiel=0.5,la=+1.5,fn=20) •• SGlied(help=1) •• DGlied(help=1) •• [39][40]DGlied0/1(l=12,l1,l2,la=0) ••••");
echo    ("•• [41] Luer(male=1,lock=1,slip=1) ••••"); 
echo    ("•• [45] Bitaufnahme(l=10,star=true)••••");
echo    ("•• [48] Imprint(txt1=1,radius=20,abstand=7,rotz=-2,h=l(2),rotx=0,roty=0,stauchx=0,stauchy=0,txt0=›,txt2=‹,size=5,font=DejaVusans:style=bold)        ••••");
echo    ("•• [503] Achshalter(laenge=30,achse=+5,schraube=3,mutter=5.5,schraubenabstand=15,hoehe=8,fn=fn) ••••");

echo    ("•• [504] Achsenklammer(abst=10,achse=3.5,einschnitt=1,h=3,rand=n(2),achsenh=0,fn=72)••••");
echo    ("•• [56] Vorterantrotor(h=40,twist=360,scale=1,zahn=0,rU=10,achsloch=4,ripple=0,caps=2,caps2=0,capdia=6.5,capdia2=0,screw=1.40,screw2=1,screwrot=60,n=1)••••");
echo    ("•• [57] Tugel(dia=10,loch=5,scaleKugel=1,scaleTorus=1)••••");
echo    ("•• [59] ReuleauxIntersect(h=2,rU=5, use2D=false) ••••••");
echo    ("•• [60] Glied3(x)  ••• [61] Gelenk(l,w) ••••••");
echo    ("•• [64] Balg(sizex=16,sizey=16,z=10.0,kerb=6.9,rand=-0.5)••••");
echo    ("•• [67] Tring(spiel=+0,angle=153,r=5.0,xd=+0.0,h=1.75,top=n(2.5),base=n(4),name=0)••••");
echo    ("•• [201] Servokopf(help=1)Objekt  ••••");
echo    ("•• [202] Halbrund(h=15,d=3+2*spiel,x=1.0,n=1)Objekt mikroGetriebemotor Wellenaufnahme  ••••");
echo    ("•• [203] Riemenscheibe(e=40,radius=25,nockendurchmesser1=2,nockendurchmesser2=2,hoehe=8,name)Objekt ••••");

echo    ("•• Cring(help=1)••••");
echo    ("\n
•• PCBcase(help=1);••••\n
•• Klammer(help=1);••••\n
•• Pin(help=1);••••\n
•• CyclGetriebe(help=1);/CyclGear();••••\n
•• SRing(help=1);••••\n
•• DRing(help=1);opt polygon••••\n
•• GewindeV4(help=1); ••••\n
•• BB(help=1); Ballbearing ••••\n
•• Abzweig(help=1) ••••\n
•• GT2Pulley(help=1) ••••\n
•• KBS(help=1) KlemmBauStein••••\n
•• Filter(help=1) Filter Sieve••••\n
•• Bayonet(help=1) ••••\n
");
}



}// end help


// SCHALTER

echo    (str("Schalter•\n 
messpunkt=",messpunkt?"✅":"❌",
" • vp=",vp?"✅":"❌",
" • anima=",anima?"✅":"❌",
//" • texton=",texton?"✅":"❌",
" • help=",help?"✅":"❌",
" • $info=",$info?"✅":"❌",
" • bed=",bed?"✅":"❌", 
" • hires=",hires?"✅":"❌", 
" •\n"));

if(anima||tset)echo(str("\n Zeit t0:",t0,
    "\nZeit t1:",t1,"\nZeit t2:",t2,"\n
Zeit t3:",t3(),"\n
••••  anima on! tset=",tset," t=0⇒1 || t0=0⇒360 || t1=-1⇔1 || t2=0⇔1 || t3(wert=1,grad=360,delta=0)  •••••"));    
    
if (vp)echo (str(
"\n\tViewportcontrol vpr: ",$vpr,"\n\t
Viewportcontrol vpt: ",$vpt,"\n\t
Viewportcontrol vpd: ",$vpd,"\n\t
Viewportcontrol vpf: ",$vpf,"\n\t
••••  vp=on  •••••"));
if(!$preview) echo("\n\t\t⏳ Rendering…wait! ⌛");

} // end Menu

// –––––––––––––––––––––––– Modules  –––––––––––––––––––––––––––––––––––