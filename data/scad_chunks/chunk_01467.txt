module carriage(type, end_colour = grey(20), wiper_colour = grey(20)) { //! Draw the specified carriage
    vitamin(str("carriage(", type[0], "_carriage): Linear rail carriage ", type[0]));

    total_l = carriage_length(type);
    block_l = carriage_block_length(type);
    block_w = carriage_width(type);
    block_h = carriage_height(type) - carriage_clearance(type);
    end_w = block_w - 0.6;
    end_h = block_h - 0.3;
    end_l = (total_l - block_l)/ 2;
    screw = carriage_screw(type);
    screw_depth = carriage_screw_depth(type);

    module cutout() {
        w = rail_width(carriage_rail(type)) + 0.4;
        translate([-w / 2, 0])
            square([w , rail_height(carriage_rail(type)) + 0.2]);
    }

    color(grey(90)) {
        rotate([90, 0, 90])
            linear_extrude(block_l, center = true)
                 difference() {
                    translate([-block_w / 2, carriage_clearance(type)])
                        square([block_w, block_h - screw_depth]);

                    cutout();
                }

        translate_z(carriage_height(type) - screw_depth)
            linear_extrude(screw_depth)
                difference() {
                    square([block_l, block_w], center = true);

                    carriage_hole_positions(type)
                        circle(screw_pilot_hole(screw));
                }
    }

    module carriage_end(type, end_w, end_h, end_l) {
        wiper_length = 0.5;
        color(wiper_colour) translate_z(-end_l / 2) linear_extrude(wiper_length)
            difference() {
                translate([-end_w / 2, carriage_clearance(type)])
                    square([end_w, end_h]);

                cutout();
            }
        color(end_colour) translate_z(wiper_length-end_l / 2) linear_extrude(end_l - wiper_length)
            difference() {
                translate([-end_w / 2, carriage_clearance(type)])
                    square([end_w, end_h]);

                cutout();
            }
    }

    translate([-(block_l + end_l) / 2, 0])
        rotate([90, 0, 90])
            carriage_end(type, end_w, end_h, end_l);

    translate([(block_l + end_l) / 2, 0])
        rotate([90, 0, -90])
            carriage_end(type, end_w, end_h, end_l);
}