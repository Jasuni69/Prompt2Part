module cubetruss_foot(w=1, size, strut, clipthick, anchor=CENTER, spin=0, orient=UP) {
    size = is_undef(size)? $cubetruss_size : size;
    strut = is_undef(strut)? $cubetruss_strut_size : strut;
    clipthick = is_undef(clipthick)? $cubetruss_clip_thickness : clipthick;
    clipsize = 0.5;
    wall_h = strut+clipthick*1.5;
    cyld = (size-2*strut)/cos(180/8);
    s = [w*(size-strut)+strut+2*clipthick, size-2*strut, strut+clipthick];
    attachable(anchor,spin,orient, size=s, offset=[0,0,(strut-clipthick)/2]) {
        down(clipthick) {
            // Base
            up(clipthick/2) {
                cuboid([w*(size-strut)+strut+2*clipthick, size-2*strut, clipthick], chamfer=strut, edges="Z");
            }

            // Walls
            xcopies(w*(size-strut)+strut+clipthick) {
                up(clipthick-0.01) {
                    prismoid([clipthick, (size-4*strut)], [clipthick, size/3.5], h=wall_h, anchor=BOT);
                }
            }

            // Horiz Wall Clips
            up(clipthick+strut+get_slop()*2) {
                xcopies(w*(size-strut)+strut) {
                    prismoid([clipsize*2, size/3.5], [0.1, size/3.5], h=clipsize*3, anchor=BOT);
                }
            }

            // Middle plugs
            for (xcol = [0:w-1]) {
                right((xcol-(w-1)/2)*(size-strut)) {
                    difference() {
                        // Start with octagon to fit sides.
                        up(clipthick-0.01) {
                            zrot(180/8) cylinder(h=strut, d1=cyld-4*get_slop(), d2=cyld-4*get_slop()-1, center=false, $fn=8);
                        }

                        // Bevel to fit.
                        up(clipthick+strut) {
                            ycopies(size-2*strut-4*get_slop()) {
                                chamfer_edge_mask(l=size-strut, chamfer=strut*2/3, orient=RIGHT);
                            }
                        }

                        // Cut out X for possible top mount.
                        zrot_copies([-45, 45]) {
                            cube([size*3, strut/sqrt(2)+2*get_slop(), size*3], center=true);
                        }
                    }
                }
            }
        }
        children();
    }
}


// Module: cubetruss_joiner()
// Synopsis: Creates a joiner that can connect two cubetrusses end-to-end.
// SynTags: Geom
// Topics: Trusses, CubeTruss, FDM Optimized, Parts
// See Also: cubetruss_segment(), cubetruss_support(), cubetruss(), cubetruss_corner()
// Usage:
//   cubetruss_joiner([w=], [vert=], [size=], [strut=], [clipthick=]) [ATTACHMENTS];
// Description:
//   Creates a part to join two cubetruss trusses end-to-end.
// Arguments:
//   w = The number of cube segments to span between the clips.  Default: 1
//   vert = If true, add vertical risers to clip to the ends of the cubetruss trusses.  Default: true
//   size = The length of each side of the cubetruss cubes.  Default: `$cubetruss_size` (usually 30)
//   strut = The width of the struts on the cubetruss cubes.  Default: `$cubetruss_strut_size` (usually 3)
//   clipthick = The thickness of the clips.  Default: `$cubetruss_clip_thickness` (usually 1.6)
//   ---
//   $slop = Make fit looser by this amount to allow for printer overextrusion
//   anchor = Translate so anchor point is at origin (0,0,0).  See [anchor](attachments.scad#subsection-anchor).  Default: `CENTER`
//   spin = Rotate this many degrees around the Z axis.  See [spin](attachments.scad#subsection-spin).  Default: `0`
//   orient = Vector to rotate top towards.  See [orient](attachments.scad#subsection-orient).  Default: `UP`
// Examples:
//   cubetruss_joiner(w=1, vert=false);
//   cubetruss_joiner(w=1, vert=true);
//   cubetruss_joiner(w=2, vert=true, anchor=BOT);