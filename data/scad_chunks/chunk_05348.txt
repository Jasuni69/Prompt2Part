function bezier_sheet(patch, delta, splinesteps=16, style="default", thickness=undef) =
  assert(is_bezier_patch(patch))
    assert(is_num(delta) || is_vector(delta,2,zero=false), "\ndelta must be a 2-vector designating two different offset distances.")
  let(
        dumwarn = is_def(thickness) || is_num(delta) ? echo("\nThe 'thickness' parameter is deprecated and has been replaced by 'delta'. Use the range [0,-thickness] or [-thickness,0] to reproduce the former behavior.") : 0,
        del = is_def(thickness) ? [0,-thickness] : is_num(delta) ? [0,-delta] : delta,
        splinesteps = force_list(splinesteps,2),
        uvals = lerpn(0,1,splinesteps.x+1),
        vvals = lerpn(1,0,splinesteps.y+1),
        pts = bezier_patch_points(patch, uvals, vvals),
        normals = bezier_patch_normals(patch, uvals, vvals),
        dummy=assert(is_matrix(flatten(normals)),"\nBezier patch has degenerate normals."),
        offset0 = pts - del[0]*normals,
        offset1 = pts - del[1]*normals,
        allpoints = [for(i=idx(offset0)) concat(offset0[i], reverse(offset1[i]))],
        vnf = vnf_vertex_array(allpoints, col_wrap=true, caps=true, style=style)        
  )
  del[0]<del[1] ? vnf_reverse_faces(vnf) : vnf;



// Section: Debugging Beziers


// Module: debug_bezier()
// Synopsis: Shows a bezier path and its associated control points.
// SynTags: Geom
// Topics: Bezier Paths, Debugging
// See Also: bezpath_curve()
// Usage:
//   debug_bezier(bez, [size], [N=]);
// Description:
//   Renders 2D or 3D bezier paths and their associated control points to help debug bezier paths. 
//   The endpoints of each bezier curve in the bezier path are marked with a blue circle and the intermediate control
//   points with a red plus sign.  For cubic (degree 3) bezier paths, the module displays the standard representation
//   of the control points as "handles" at each endpoint.  For other degrees the control points are drawn as
//   a polygon.  You can of course give a single bezier curve as input, but you must in that case explicitly specify
//   the bezier degree when it is not a cubic bezier.  
// Arguments:
//   bez = the array of points in the bezier.
//   size = diameter of the lines drawn.
//   ---
//   N = The degree of the bezier curves.  Cubic beziers have N=3.  Default: 3
// Example(2D): Cubic bezier path
//   bez = [
//       [-10,   0],  [-15,  -5],
//       [ -5, -10],  [  0, -10],  [ 5, -10],
//       [ 14,  -5],  [ 15,   0],  [16,   5],
//       [  5,  10],  [  0,  10]
//   ];
//   debug_bezier(bez, N=3, width=0.5);
// Example(2D): Quartic (degree 4) bezier path
//   bez = [
//       [-10,   0],  [-15,  -5],
//       [ -9, -10],  [  0, -12],  [ 5, -10],
//       [ 14,  -5],  [ 18,   0],  [16,   5],
//       [  5,  10] 
//   ];
//   debug_bezier(bez, N=4, width=0.5);