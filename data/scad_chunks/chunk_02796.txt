function TangentPoints(Centre, Radius, Point) = 
  let (d = Centre - Point,
       // l1 is distance between center of the circle and the point.
       // The formula is sqrt(d.x*d.x + d.y*d.y),
       // but there is a function "norm()" for it.
       l1 = norm(d),
       // Prevent that the asin() function fails.
       l2 = max(l1, Radius),
       // Calculate the two angles for the resulting tangent points.
       a = atan2(d.y, d.x) + 180,
       b = asin(Radius / l2))
  [[Centre.x + Radius*sin(a+b), Centre.y - Radius*cos(a+b)],
   [Centre.x - Radius*sin(a-b), Centre.y + Radius*cos(a-b)]];


// IntersectionPoints
// ------------------
// Returns the two intersection points of two 
// overlapping circles.
// There are no similar angles and there are
// no similar triangles.
// The calculation makes used of the most basic 
// principle for a circle. 
// That is for every (x,y) point on the circle 
// with radius r: r² = x² + y²
// The only other information is the distance between
// the centers of the circles.
// There are a number of ways to write down 
// the calculation.
// I worked my way towards a certain style that I liked
// the most. That style can be seen in the code:
//   k1 = tb * d/l;
//   k2 = ta * d/l;
// Then extra code was added to avoid that this function
// fails when one circle is inside the other circle.
// Parameters:
//   Two circles, defined by their location and radius.
// Return:
//   Two points in 2D.
// Limits:
//   This function avoids that the calculation fails,
//   by letting the two points melt together
//   and advance in a continues way through the circle,
//   when one circle is inside the other circle.