function fit_to_box(pts, x, y, z) =
    assert(is_path(pts) || is_vnf(pts), "\npts must be a valid 2D or 3D path, or a VNF structure.")
    assert(any_defined([x,y,z]), "\nAt least one [min,max] range x, y, or z must be defined.")
    assert(is_undef(x) || is_vector(x,2), "\nx must be a 2-vector [min,max].")
    assert(is_undef(y) || is_vector(y,2), "\nx must be a 2-vector [min,max].")
    assert(is_undef(z) || is_vector(z,2), "\nx must be a 2-vector [min,max].")
    let(
        isvnf = is_vnf(pts),
        p = isvnf ? pts[0] : pts,
        bounds = isvnf ? vnf_bounds(pts) : pointlist_bounds(pts),
        dim = len(bounds[0]),
        err = assert(is_undef(z) || (dim>2 && is_def(z)), "\n2D data detected with z range specified."),
        whichdim = [is_def(x), is_def(y), is_def(z)],
        xmin = bounds[0][0],
        ymin = bounds[0][1],
        zmin = dim>2 ? bounds[0][2] : 0,
        // new scales
        xscale = whichdim.x ? (x[1]-x[0]) / (bounds[1][0]-xmin) : 1,
        yscale = whichdim.y ? (y[1]-y[0]) / (bounds[1][1]-ymin) : 1,
        zscale = whichdim.z ? (z[1]-z[0]) / (bounds[1][2]-zmin) : 1,
        // new offsets
        xo = whichdim.x ? x[0] : 0,
        yo = whichdim.y ? y[0] : 0,
        zo = whichdim.z ? z[0] : 0,
        // shift original min to 0, rescale to new scale, shift back to new min
        newpts = move(dim>2 ? [xo,yo,zo] : [xo,yo],
                      scale(dim>2 ? [xscale,yscale,zscale] : [xscale,yscale],
                             move(dim>2 ? -[xmin,ymin,zmin] : -[xmin,ymin], pts)))
    ) isvnf ? [newpts[0], pts[1]] : newpts;


// vim: expandtab tabstop=4 shiftwidth=4 softtabstop=4 nowrap