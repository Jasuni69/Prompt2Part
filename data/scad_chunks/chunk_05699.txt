module glued_circles(r, spread=10, tangent=30, d, anchor=CENTER, spin=0) {
    path = glued_circles(r=r, d=d, spread=spread, tangent=tangent);
    attachable(anchor,spin, two_d=true, path=path, extent=true) {
        polygon(path);
        children();
    }
}



// Function&Module: squircle()
// Synopsis: Creates a shape between a circle and a square.
// SynTags: Geom, Path
// Topics: Shapes (2D), Paths (2D), Path Generators, Attachable
// See Also: circle(), square(), rect(), ellipse(), supershape()
// Usage: As Module
//   squircle(size, [squareness], [style=]) [ATTACHMENTS];
// Usage: As Function
//   path = squircle(size, [squareness], [style=]);
// Description:
//   A [squircle](https://en.wikipedia.org/wiki/Squircle) is a shape intermediate between a square/rectangle and a
//   circle/ellipse. Squircles are sometimes used to make dinner plates (more area for the same radius as a circle), keyboard
//   buttons, and smartphone icons. Old CRT television screens also resembled elongated squircles.
//   .
//   Multiple definitions exist for the squircle. We support three versions: the Fernandez-Guasti squircle, the superellipse
//   (see {{supershape()}} Example 3, also known as the Lamé upper squircle), and a squircle constructed from Bezier curves.
//   They are visually almost indistinguishable, with the superellipse having slightly rounder "corners" than FG at the same
//   corner radius, and the Bezier version having slightly sharper corners. These squircles have different, unintuitive methods
//   for controlling how square or circular the shape is. The `squareness` parameter determines the shape, specifying the
//   corner position linearly, with 0 giving the circle and 1 giving the square. For the FG and superellipse squircles,
//   vertices are positioned to be more dense near the corners to preserve smoothness at low values of `$fn`.
//   .
//   For the "superellipse" style, the special case where the superellipse exponent is 4 results in a squircle with corners at
//   the geometric mean between radial points on the circle and square, corresponding to squareness=0.456786.
//   .
//   For the "bezier" style with `squareness=0`, the ideal circular arc corner is closely approximated by Bezier curves.
//   Unlike the other styles, when the `size` parameter defines a rectangle, the bezier style retains the the corner
//   proportions for the short side of the corner rather than stretching the entire corner.
//   .
//   When called as a module, creates a 2D squircle with the specified squareness.    
//   When called as a function, returns a 2D path for a squircle.
// Arguments:
//   size = Same as the `size` parameter in `square()`, can be a single number or a vector `[xsize,ysize]`.
//   squareness = Value between 0 and 1. Controls the shape, setting the location of a squircle "corner" at the specified interpolated position between a circle and a square. When `squareness=0` the shape is a circle, and when `squareness=1` the shape is a square. Default: 0.5
//   ---
//   style = method for generating a squircle, "fg" for Fernández-Guasti, "superellipse" for superellipse, or "bezier" for Bezier. Default: "fg"
//   anchor = Translate so anchor point is at origin (0,0,0).  See [anchor](attachments.scad#subsection-anchor).  Default: `CENTER`
//   spin = Rotate this many degrees around the Z axis after anchor.  See [spin](attachments.scad#subsection-spin).  Default: `0`
//   atype = anchor type, "box" for bounding box corners and sides, "perim" for the squircle corners. Default: "box"
//   $fn = Number of points. The special variables `$fs` and `$fa` are ignored. If set, `$fn` must be 12 or greater, and is rounded to the nearest multiple of 4. Points are generated so they are more dense around sharper curves. Default if not set: 48
// Examples(2D):
//   squircle(size=50, squareness=0.4);
//   squircle([80,60], 0.7, $fn=64);
// Example(3D,VPD=48,VPR=[40,0,40],VPT=[11,-11,-10],NoAxes): Corner differences between the three squircle styles for squareness=0.5. Style "superellipse" is pink, "fg" is gold, "bezier" is blue.
//   color("pink") squircle(size=50, style="superellipse", squareness=0.5, $fn=256);
//   color("yellow") up(1) squircle(size=50, style="fg", squareness=0.5, $fn=256);
//   color("lightblue") up(2) squircle(size=50, style="bezier", squareness=0.5, $fn=256);
// Example(2D,VPD=265,NoAxes): Ten increments of squareness parameter for a superellipse squircle
//   color("green") for(sq=[0:0.1:1])
//       stroke(squircle(100, sq, style="superellipse", $fn=96), closed=true, width=0.5);
// Example(2D): Standard vector anchors are based on the bounding box
//   squircle(50, 0.6) show_anchors();
// Example(2D): Perimeter anchors, anchoring at bottom left and spinning 20°
//   squircle([60,40], 0.5, anchor=(BOTTOM+LEFT), atype="perim", spin=20)
//       show_anchors();