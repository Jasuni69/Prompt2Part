module orient(anchor, spin) {
    req_children($children);
    check=
      assert($parent_geom != undef, "No parent to orient from!")
      assert(is_string(anchor) || is_vector(anchor));
    anch = _find_anchor(anchor, $parent_geom);
    two_d = _attach_geom_2d($parent_geom);
    fromvec = two_d? BACK : UP;
    spin = default(spin, anch[3]);
    dummy=assert(is_finite(spin));

    $attach_to = undef;
    if (two_d)
        rot(spin)rot(from=fromvec, to=anch[2]) children();
    else
        rot(spin, from=fromvec, to=anch[2]) children();
}


// Module: align()
// Synopsis: Position children with alignment to parent edges.
// SynTags: Trans
// Topics: Attachments
// See Also: attachable(), attach(), position(), orient()
// Usage:
//   PARENT() align(anchor, [align], [inside=], [inset=], [shiftout=], [overlap=]) CHILDREN;
// Description:
//   Place a child on the face identified by `anchor`.  If align is not given or is CENTER
//   then the child will be centered on top of the specified face, outside the parent object.  The align parameter is a
//   direction defining an edge or corner to align to.  The child will be aligned to that edge or corner by
//   choosing an appropriate anchor on the child.  
//   Like {{position()}} this module never rotates the child.  If you give `anchor=RIGHT` then the child
//   will be given the LEFT anchor and placed adjacent to the parent.  You can use `orient=` or `spin=`
//   with the child and the alignment will adjust to select the correct child anchor.  Note that if
//   you spin the child by an amount not a multiple of 90 degrees then an edge of the child will be
//   placed against the parent.  This module makes it easy to place children aligned flush with the edges
//   of the parent, even after orienting them or spinning them.  In contrast {{position()}} can 
//   do the same thing but you would have to figure out the correct child anchor, which is not always obvious.
//   .
//   Because `align()` works by setting the child anchor, it overrides any anchor you specify to the child:
//   **any `anchor=` value given to the child is ignored.**
//   .
//   Several options can adjust how the child is positioned.  You can specify `inset=` to inset the
//   aligned object from its alignment location. If you set `inside=true` then the
//   child will appear inside the parent instead of on its surface so that you can use {{diff()}} to subract it.
//   In this case the child recieved a default "remove" tag.   The `shiftout=` option works with `inside=true` to 
//   shift the child out by the specified distance so that the child doesn't exactly align with the parent.
//   .
//   Note that in the description above the anchor was said to define a "face".  You can also use this module
//   with an edge anchor, in which case a corner of the child will be placed in contact with the specified
//   edge and the align direction will shift the child to either end of the edge.  You can even give a
//   corner as the anchor point, but in that case the only allowed alignment is CENTER.
//   .
//   If you give a list of anchors and/or a list of align directions then all combinations are generated.
//   In this way align() acts like a distributor, creating multiple copies of the child.  
//   Named anchors are not supported by `align()`.  
// Arguments:
//   anchor = parent anchor or list of parent anchors for positioning children.
//   align = optional alignment direction or directions for aligning the children.  Default: CENTER
//   ---
//   inside = if true, place object inside the parent instead of outside.  Default: false
//   inset = shift the child away from the alignment edge/corner by this amount.  Default: 0
//   shiftout = Shift an inside object outward so that it overlaps all the aligned faces.  Default: 0
//   overlap = Amount to sink the child into the parent.  Defaults to `$overlap` which is zero by default.
// Side Effects:
//   `$anchor` set to the anchor value used for the child.
//   `$align` set to the align value used for the child.
//   `$idx` set to a unique index for each child, increasing by alignment first.
//   `$attach_anchor` for each anchor given, this is set to the `[ANCHOR, POSITION, ORIENT, SPIN]` information for that anchor.
//   if `inside` is true then set default tag to "remove"
// Example:  Cuboid positioned on the right of its parent.  Note that it is in its native orientation.  
//   cuboid([20,35,25])
//     align(RIGHT)
//       color("lightgreen")cuboid([5,1,9]);
// Example: Child would require anchor of RIGHT+FRONT+BOT if placed with {{position()}}. 
//   cuboid([50,40,15])
//     align(TOP,RIGHT+FRONT)
//       color("lightblue")prismoid([10,5],[7,4],height=4);
// Example: Child requires a different anchor for each position, so a simple explicit specification of the anchor for children is impossible in this case, without using two separate commands.
//   cuboid([50,40,15])
//     align(TOP,[RIGHT,LEFT])
//       color("lightblue")prismoid([10,5],[7,4],height=4);
// Example: If you spin the child 90 deg it is still flush with the edge of the parent.  In this case the required anchor for the child is BOT+FWD:
//   cuboid([50,40,15])
//     align(TOP,RIGHT)
//       color("lightblue")
//          prismoid([10,5],[7,4],height=4,spin=90);
// Example: Here the child is placed on the RIGHT face.  Notice how the TOP+LEFT anchor of the prismoid is aligned with the edge of the parent.  The prismoid remains in the same orientation.  
//   cuboid([50,40,15])
//     align(RIGHT,TOP)
//       color("lightblue")prismoid([10,5],[7,4],height=4);
// Example: If you change the orientation of the child it still appears aligned flush in its changed orientation:
//   cuboid([50,40,15])
//     align(TOP, RIGHT)
//       color("lightblue")prismoid([10,5],[7,4],height=4,orient=DOWN);
// Example: The center of the cubes edge is lined up with the center of the prismoid edge, so this result is the expected result:  
//   prismoid(50,30,25)
//     align(RIGHT,FRONT)
//       color("lightblue")cuboid(8);
// Example: Spinning the cube means that the corner of the cube is the most extreme point, so that's what aligns with the front edge of the parent:
//   cuboid([50,40,15])
//     align(TOP,FWD)
//       color("lightblue")cuboid(9,spin=22);
// Example: A similar thing happens if you attach a cube to a cylinder with an arbitrary anchor angle:
//   cyl(h=20,d=10,$fn=128)
//     align([1,.3],TOP)
//       color("lightblue")cuboid(5);
// Example: Orienting the child is done in the global coordinate system (as usual) not in the parent coordinate system.  Note that the blue prismoid is not lined up with the parent face.  (To place the child on the face use {{attach()}}.
//   prismoid(50,30,25)
//     align(RIGHT)
//      color("lightblue")prismoid([10,5],[7,4],height=4,orient=RIGHT);
// Example: Setting `inside=true` enables us to subtract the child from the parent with {{diff()}}.  The "remove" tag is automatically applied when you set `inside=true`, and we used `shiftout=0.01` to prevent z-fighting on the faces.  
//   diff()
//     cuboid([40,30,10])
//       align(FRONT,TOP,inside=true,shiftout=0.01)
//         prismoid([10,5],[7,5],height=4);
// Example: Setting `inset` shifts all of the children away from their aligned edge, which is a different direction for each child.  
//   cuboid([40,30,30])
//     align(FRONT,[TOP,BOT,LEFT,RIGHT,TOP+RIGHT,BOT+LEFT], inset=3)
//       color("green") cuboid(5);
// Example: Changing the child characteristics based on the alignment
//   cuboid([20,20,8])
//     align(TOP,[for(i=[-1:1], j=[-1:1]) [i,j]])
//       color("orange")
//         if (norm($align)==0) cuboid([3,3,1]);
//         else if (norm($align)==norm([1,1])) cuboid([3,3,4.5]);
//         else cuboid(3);
// Example:  In this example the pink cubes are positioned onto an edge.  They meet edge-to-edge.  Aligning left shifts the cube to the left end of the edge. 
//   cuboid([30,30,20])
//      align(TOP+BACK,[CTR,LEFT])
//        color("pink")cuboid(4);
// Example: Normally `overlap` is used to create a tiny overlap to keep CGAL happy, but you can also give it a large value as shown here:
//   cuboid([30,30,20])
//     align(TOP+BACK,[RIGHT,CTR,LEFT],overlap=2)
//       color("lightblue")cuboid(4);