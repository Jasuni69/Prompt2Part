function _tri_count(n) = (n*(1+n))/2;


// Function: bezier_triangle()
// Usage:
//   bezier_triangle(tri, [splinesteps], [vertices], [faces]);
// Description:
//   Calculate vertices and faces for forming a partial polyhedron
//   from the given bezier triangular patch.  Returns a list containing
//   two elements.  The first is the list of unique vertices.  The
//   second is the list of faces, where each face is a list of indices
//   into the list of vertices.  You can chain calls to this, to add
//   more vertices and faces for multiple bezier patches, to stitch
//   them together into a complete polyhedron.
// Arguments:
//   tri = The triangular array of endpoints and control points for this bezier patch.
//   splinesteps = Number of steps to divide each bezier segment into.  Default: 16
//   vertices = Vertex list to add new points to.  Default: []
//   faces = Face list to add new faces to.  Default: []
// Example(3D):
//   tri = [
//       [[-50,-33,0], [-25,16,50], [0,66,0]],
//       [[0,-33,50], [25,16,50]],
//       [[50,-33,0]]
//   ];
//   vnf = bezier_triangle(tri, splinesteps=16);
//   polyhedron(points=vnf[0], faces=vnf[1]);