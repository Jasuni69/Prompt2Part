function _trapezohedron(faces, r, side, longside, h, height, d) =
    assert(faces%2==0, "Must set 'faces' to an even number for trapezohedron")
    assert(is_undef(h) || is_undef(height), "Cannot define both 'h' and 'height'")
    let(
        r = get_radius(r=r, d=d),
        h = first_defined([h,height]),
        N = faces/2,
        parmcount = num_defined([r,side,longside,h])
    )
    assert(parmcount==2,"Must define exactly two of 'r' (or 'd'), 'side', 'longside', and 'h' (or 'height')")
    let(       
        separation = (     // z distance between non-apex vertices that aren't in the same plane
            !is_undef(h) ? 2*h*sqr(tan(90/N)) :
            (!is_undef(r) && !is_undef(side))? sqrt(side*side+2*r*r*(cos(180/N)-1)) :
            (!is_undef(r) && !is_undef(longside))? 2 * sqrt(sqr(longside)-sqr(r)) / (1-sqr(tan(90/N))) * sqr(tan(90/N)) :
            2*sqr(sin(90/N))*sqrt((sqr(side) + 2*sqr(longside)*(cos(180/N)-1)) / (cos(180/N)-1) / (cos(180/N)+cos(360/N)))
        )
    )
    assert(separation==separation, "Impossible trapezohedron specification")
    let(
        h = !is_undef(h) ? h : 0.5*separation / sqr(tan(90/N)),
        r = (
            !is_undef(r) ? r :
            !is_undef(side) ? sqrt((sqr(separation) - sqr(side))/2/(cos(180/N)-1)) :
            sqrt(sqr(longside) - sqr(h-separation/2))
        ),
        top = [for(i=[0:1:N-1]) [r*cos(360/N*i), r*sin(360/N*i),separation/2]],
        bot = [for(i=[0:1:N-1]) [r*cos(180/N+360/N*i), r*sin(180/N+360/N*i),-separation/2]],
        vertices = concat([[0,0,h],[0,0,-h]],top,bot)
    ) [  
        "trapezohedron", "trapezohedron", faces, [4],
        !is_undef(side)? side : sqrt(sqr(separation)-2*r*(cos(180/N)-1)),  // actual side length
        h*r/sqrt(r*r+sqr(h+separation/2)),     // in_radius
        h*r/sqrt(r*r+sqr(h-separation/2)),     // mid_radius
        max(h,sqrt(r*r+sqr(separation/2))),  // out_radius
        undef,                               // volume
        vertices
    ];