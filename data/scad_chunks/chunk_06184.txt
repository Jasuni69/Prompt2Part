module screw_hole(spec, head, thread, oversize, hole_oversize, head_oversize, 
             length, l, thread_len, tolerance=undef, counterbore, teardrop=false,
             bevel, bevel1, bevel2, blunt_start, blunt_start1, blunt_start2, 
             atype="screw",anchor=CENTER,spin=0, orient=UP)
{
   screwspec = _get_spec(spec, "screw_info", "screw_hole", 
                        thread=thread, head=head);
   bevel1 = first_defined([bevel1,bevel,false]);
   bevel2 = first_defined([bevel2,bevel,tolerance=="self tap"]);
   thread = default(thread,false);
   checkhead = struct_val(screwspec,"head");
   default_counterbore = checkhead=="none" || starts_with(checkhead,"flat") ? 0 : true;
   counterbore = default(counterbore, default_counterbore);
   dummy = _validate_screw_spec(screwspec);
   threaded = thread==true || (is_finite(thread) && thread>0) || (is_undef(thread) && struct_val(screwspec,"pitch")>0);
   oversize = force_list(oversize,2);
   hole_oversize = first_defined([hole_oversize, oversize[0],struct_val(screwspec,"shaft_oversize")]);
   head_oversize = first_defined([head_oversize, oversize[1],struct_val(screwspec,"head_oversize")]);
   if (threaded || is_def(hole_oversize) || tolerance==0 || tolerance=="none") {
     default_tag("remove")
       screw(spec,head=head,thread=thread,shaft_undersize=u_mul(-1,hole_oversize), head_undersize=u_mul(-1,head_oversize),
             blunt_start=blunt_start, blunt_start1=blunt_start1, blunt_start2=blunt_start2, 
             length=length,l=l,thread_len=thread_len, tolerance=tolerance, _counterbore=counterbore,
             bevel1=bevel1, bevel2=bevel2, 
             atype=atype, anchor=anchor, spin=spin, orient=orient, _internal=true, _teardrop=teardrop)
         children();
   }
   else {
     tolerance = default(tolerance, "normal");
     pitch = struct_val(screwspec,"pitch");
     dummy3 = assert((downcase(tolerance) != "tap" && downcase(tolerance)!="self tap") || pitch!=0,
                     "\"tap\" clearance requires a pitch size, but pitch is set to zero");
     // UTS clearances from ASME B18.2.8
     UTS_clearance = [
       [ // Close fit
         [0.1120 * INCH,0.008*INCH],
         [0.1250 * INCH, 1/64*INCH],
         [7/16   * INCH, 1/64*INCH],
         [1/2    * INCH, 1/32*INCH],
         [1.25   * INCH, 1/32*INCH],
         [1.375  * INCH, 1/16*INCH]
       ],
       [ // Normal fit
         [0.1120 * INCH, 1/64*INCH],
         [0.1250 * INCH, 1/32*INCH],
         [7/16   * INCH, 1/32*INCH],
         [1/2    * INCH, 1/16*INCH],
         [7/8    * INCH, 1/16*INCH],
         [1      * INCH, 3/32*INCH],
         [1.25   * INCH, 3/32*INCH],
         [1.375  * INCH,  1/8*INCH],
       ],
       [ // Loose fit
         [0.1120 * INCH, 1/32*INCH],
         [0.1250 * INCH, 3/64*INCH],
         [7/16   * INCH, 3/64*INCH],
         [1/2    * INCH, 7/64*INCH],
         [5/8    * INCH, 7/64*INCH],
         [3/4    * INCH, 5/32*INCH],
         [1      * INCH, 5/32*INCH],
         [1.125  * INCH, 3/16*INCH],
         [1.25   * INCH, 3/16*INCH],
         [1.375  * INCH,15/64*INCH]
       ]
     ];
     // ISO clearances appear in ASME B18.2.8 and ISO 273
     ISO_clearance = [
       [ // Close, Fine, H12 
         [2.5, 0.1],
         [3.5, 0.2],
         [4,   0.3],
         [5,   0.3],
         [6,   0.4],
         [8,   0.4],
         [10,  0.5],
         [12,  1],
         [42,  1],
         [48,  2],
         [80,  2],
         [90,  3],
         [100, 4],
       ],
       [  // Normal, Medium, H13
         [1.6, 0.2],
         [2,   0.4],
         [3.5, 0.4],
         [4,   0.5],
         [5,   0.5],
         [6,   0.6],
         [8,   1],
         [10,  1],
         [12,  1.5],
         [16,  1.5],
         [20,  2],
         [24,  2],
         [30,  3],
         [42,  3],
         [48,  4],
         [56,  6],
         [90,  6],
         [100, 7],
       ],
       [  // Loose, Coarse, H14
         [1.6, 0.25],
         [2,   0.3],
         [3,   0.6],
         [3.5, 0.7],
         [4,   0.8],
         [5,   0.8],
         [6,   1],
         [8,   2],
         [10,  2],
         [12,  2.5],
         [16,  2.5],
         [20,  4],
         [24,  4],
         [30,  5],
         [36,  6],
         [42,  6],
         [48,  8],
         [56, 10],
         [72, 10],
         [80, 11],
         [90, 11],
         [100,12],
       ]
     ];
     tol_ind = in_list(downcase(tolerance), ["close", "fine", "tight"]) ? 0
             : in_list(downcase(tolerance), ["normal", "medium", "tap", "self tap"]) ? 1
             : in_list(downcase(tolerance), ["loose", "coarse"]) ? 2
             : in_list(tolerance, ["H12","H13","H14"]) ?
                   assert(struct_val(screwspec,"system")=="ISO", str("Hole tolerance ", tolerance, " only allowed with ISO screws"))
                   parse_int(substr(tolerance,1))-12
             : assert(false,str("Unknown tolerance ",tolerance, " for unthreaded clearance hole.  Use one of \"close\", \"normal\", or \"loose\""));
     tol_table = struct_val(screwspec,"system")=="UTS" ? UTS_clearance[tol_ind] : ISO_clearance[tol_ind];
     tol_gap = lookup(_nominal_diam(screwspec), tol_table);
     // If we got here, hole_oversize is undefined and oversize is undefined
     hole_oversize = downcase(tolerance)=="tap" ? -pitch
                   : downcase(tolerance)=="self tap" ? -pitch*lookup(pitch,[[1,0.72],[1.5,.6]])
                   : tol_gap;
     head_oversize = default(head_oversize, tol_gap);
     default_tag("remove")     
       screw(spec,head=head,thread=0,shaft_undersize=-hole_oversize, head_undersize=-head_oversize, 
             length=length,l=l,thread_len=thread_len, _counterbore=counterbore,
             bevel1=bevel1, bevel2=bevel2, bevelsize=pitch>0?pitch:undef,
             atype=atype, anchor=anchor, spin=spin, orient=orient, _internal=true, _teardrop=teardrop)
         children();
   }
} 

// Module: shoulder_screw()
// Synopsis: Creates a shoulder screw.
// SynTags: Geom
// Topics: Threading, Screws
// See Also: screw(), screw_hole()
// Usage:
//   shoulder_screw(s, d, length, [head=], [thread_len=], [tolerance=], [head_size=], [drive=], [drive_size=], [thread=], [undersize=], [shaft_undersize=], [head_undersize=], [shoulder_undersize=],[atype=],[anchor=],[orient=],[spin=]) [ATTACHMENTS];
// Description:
//   Create a shoulder screw.  See [screw and nut parameters](#section-screw-and-nut-parameters) for details on the parameters that define a screw.
//   The tolerance determines the dimensions of the screw
//   based on ISO and ASME standards.  Screws fabricated at those dimensions will mate properly with standard hardware.
//   Note that the $slop argument does not affect the size of screws: it only adjusts screw holes.  This will work fine
//   if you are printing both parts, but if you need to mate printed screws to metal parts you may need to adjust the size
//   of the screws, which you can do with the undersize arguments.
//   .
//   Unlike a regular screw, a shoulder screw is based on its shoulder dimensions: diameter and length.  The ISO and ASME standards
//   specify for a given shoulder diameter the thread size and even the length of the threads.  Note that these standards specify only
//   a small range of sizes.  You can specify a shoulder screw by giving the system, either "ISO" or "UTS" and the shoulder diameter
//   and length, and shoulder_screw() will supply the other parameters.
//   .
//   Hardware sources like McMaster sell many screws that don't comply with the standards.  If you want to make such a screw then
//   you can specify parameters like thread_len, the length of the threaded portion below the shoulder, and you can choose a different head
//   type.  You will need to specify the size of the head, since it cannot be looked up in tables.  You can also 
//   generate a screw specification from {{screw_info()}}, possibly create a modified version using {{struct_set()}}, and pass that in rather than giving the parameters.
//   .
//   The anchors and anchor types are the same as for {{screw()}} except that there is an anchor type for the shoulder and an additional set of named anchors
//   refering to parts of the shoulder.  
// Arguments:
//   s = screw system to use, case insensitive, either "ISO", "UTS", "english" or "metric", or a screw name or specification.  See [screw naming](#subsection-screw-naming).
//   d = nominal shoulder diameter in mm for ISO or inches for UTS
//   length = length of the shoulder (in mm)
//   ---
//   thread_len = length of threads
//   tolerance = screw tolerance.  Determines actual screw thread geometry based on nominal sizing.  See [tolerance](#subsection-tolerance). Default is "2A" for UTS and "6g" for ISO.
//   drive = drive type.  See [screw heads](#subsection-screw-heads) set to "none" for no drive.  Default: "hex"
//   drive_size = size of the drive recess
//   thread = thread type or specification. See [screw pitch](#subsection-standard-screw-pitch). Default: "coarse"
//   spec = screw specification to define the thread size 
//   head_size = scalar or vector to give width or [width, height].  If you only give width, height is computed using a formula for socket heads.  For flat head screws the second value in the vector is the sharp size; if you don't give it then the sharp size will be 12% more than the given size
// Side Effects:
//   `$screw_spec` is set to the spec specification structure. 
// Anchor Types:
//   screw = the entire screw (default)
//   head = screw head (invalid for headless screws)
//   shoulder = the shoulder
//   shaft = screw shaft
//   threads = threaded section of screw     
// Named Anchors:
//   "top" = top of screw
//   "bot" = bottom of screw
//   "center" = center of screw
//   "head_top" = top of head (invalid for headless screws)
//   "head_bot" = bottom of head (invalid for headless screws)
//   "head_center" = center of head (invalid for headless screws)
//   "shoulder_top" = top of shoulder
//   "shoulder_bot" = bottom of shoulder
//   "shoulder_center" = center of shoulder
//   "shaft_top" = top of shaft
//   "shaft_bot" = bottom of shaft
//   "shaft_center" = center of shaft
//   "threads_top" = top of threaded portion of screw (invalid if thread_len=0)
//   "threads_bot" = bottom of threaded portion of screw (invalid if thread_len=0)
//   "threads_center" = center of threaded portion of screw (invalid if thread_len=0)
// Example: ISO shoulder screw
//   shoulder_screw("iso",10,length=20);
// Example: English shoulder screw
//   shoulder_screw("english",1/2,length=20);
// Example: Custom example.  You must specify thread_len and head_size when creating custom configurations.  
//   shoulder_screw("M6", 9.3, length=17, thread_len=8, head_size=14);
// Example: Another custom example:
//   shoulder_screw("M6", 9.3, length=17, thread_len=8, head_size=14, head="button", drive="torx");
// Example: Threadless 
//   shoulder_screw("iso",10,length=15,thread=0);
// Example: No drive recess
//   shoulder_screw("iso",10,length=15,drive="none");
// Example: Headless
//   shoulder_screw("iso", 16, length=20, head="none");
// Example: Changing head height
//   shoulder_screw("iso", 16, length=20, head_size=[24,5]);