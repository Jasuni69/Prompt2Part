module smd_diode(type, value) { //! Draw an SMD diode
    vitamin(str("smd_diode(", type[0], ", \"", value, "\"): ", type[0], " package ", value));

    slant = 5;                              //! 5 degree body draft angle
    size = smd_diode_size(type);
    z0 = smd_diode_z(type);
    z2 = z0 + size.z;
    z1 = z2 - smd_diode_lead_z(type);
    stripe = size.x / 5;
    leads = smd_diode_leads(type);
    gap = leads[3];
    gap2 = gap - leads.z * 2;

    color(smd_diode_colour(type))
        difference() {
            hull()
                for(z = [z0, z1, z2], inset = abs(z - z1) * tan(slant))
                    translate_z(z)
                        cube([size.x - 2 * inset, size.y - 2 * inset, eps], center = true);

            for(side = [-1, 1])
                translate([side * (size.x / 2 - (size.x - gap2) / 4), 0, eps])
                    cube([(size.x - gap2) / 2, size.y, 3 * leads.z], center = true);
        }

    color("white")
        translate([-stripe / 2, 0, z2])
            linear_extrude(eps)
                resize([0.9 * (size.x - stripe), size.y / 2])
                    text(value, halign = "center", valign = "center");

    color(grey(90)) {
        inset = (z2 - z1) * tan(slant);
        translate([size.x / 2 - stripe, -size.y / 2 + inset, z2])
            cube([stripe - inset, size.y - 2 * inset, eps]);
    }

    color(silver)
        translate_z(z1 / 2)
            rotate([90, 0, 0])
                linear_extrude(leads.y, center = true, convexity = 3)  let($fn = fn)
                    difference() {
                        rounded_square([leads.x, z1], 2 * leads.z);

                        rounded_square([leads.x - 2 * leads.z, z1 - 2 * leads.z], leads.z);

                        translate([0, - z1 / 2])
                            square([gap, leads.z * 2 + eps], center = true);
                    }

}