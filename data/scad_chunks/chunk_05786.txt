module cubetruss_corner(h=1, extents=[1,1,0,0,1], bracing, size, strut, clipthick, anchor=CENTER, spin=0, orient=UP) {
    size = is_undef(size)? $cubetruss_size : size;
    strut = is_undef(strut)? $cubetruss_strut_size : strut;
    bracing = is_undef(bracing)? $cubetruss_bracing : bracing;
    clipthick = is_undef(clipthick)? $cubetruss_clip_thickness : clipthick;
    exts = is_vector(extents)? list_pad(extents,5,fill=0) : [extents, extents, 0, 0, extents];
    dummy = assert(len(exts)==5, "Input extents must be a scalar or vector with length 5 or less.");
    s = [cubetruss_dist(exts[0]+1+exts[2],1,size,strut), cubetruss_dist(exts[1]+1+exts[3],1,size,strut), cubetruss_dist(h+exts[4],1,size,strut)];
    offset = [cubetruss_dist(exts[0]-exts[2],0,size,strut), cubetruss_dist(exts[1]-exts[3],0,size,strut), cubetruss_dist(h+exts[4]-1,0,size,strut)]/2;
    attachable(anchor,spin,orient, size=s, offset=offset) {
        union() {
            for (zcol = [0:h-1]) {
                up((size-strut)*zcol) {
                    cubetruss_segment(size=size, strut=strut, bracing=bracing);
                }
            }
            for (dir = [0:3]) {
                if (exts[dir] != undef && exts[dir] > 0) {
                    zrot(dir*90) {
                        for (zcol = [0:h-1]) {
                            up((size-strut+0.01)*zcol) {
                                for (i = [1:exts[dir]]) {
                                    right((size-strut+0.01)*i) cubetruss_segment(size=size, strut=strut, bracing=bracing);
                                }
                                if (clipthick > 0) {
                                    right(exts[dir]*(size-strut)+size/2) {
                                        zrot(90) cubetruss_clip(size=size, strut=strut, clipthick=clipthick);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (exts[4] != undef && exts[4] > 0) {
                for (i = [1:exts[4]]) {
                    up((size-strut+0.01)*(i+h-1)) cubetruss_segment(size=size, strut=strut, bracing=bracing);
                }
                if (clipthick > 0) {
                    up((exts[4]+h-1)*(size-strut)+size/2) {
                        xrot(-90) cubetruss_clip(size=size, strut=strut, clipthick=clipthick);
                    }
                }
            }
        }
        children();
    }
}


// Module: cubetruss_support()
// Synopsis: Creates a cubetruss support structure shape.
// SynTags: Geom
// Topics: Trusses, CubeTruss, FDM Optimized, Parts
// See Also: cubetruss_segment(), cubetruss_support(), cubetruss(), cubetruss_corner()
// Usage:
//   cubetruss_support([size=], [strut=], [extents=]) [ATTACHMENTS];
// Description:
//   Creates a single cubetruss support.
// Arguments:
//   size = The length of each side of the cubetruss cubes.  Default: `$cubetruss_size` (usually 30)
//   strut = The width of the struts on the cubetruss cubes.  Default: `$cubetruss_strut_size` (usually 3)
//   extents = If given as an integer, specifies the number of vertical segments for the support.  If given as a list of 3 integers, specifies the number of segments in the X, Y, and Z directions.  Default: 1.
//   ---
//   anchor = Translate so anchor point is at origin (0,0,0).  See [anchor](attachments.scad#subsection-anchor).  Default: `CENTER`
//   spin = Rotate this many degrees around the Z axis.  See [spin](attachments.scad#subsection-spin).  Default: `0`
//   orient = Vector to rotate top towards.  See [orient](attachments.scad#subsection-orient).  Default: `UP`
// Example(VPT=[0,0,0],VPD=150):
//   cubetruss_support();
// Example(VPT=[0,0,0],VPD=200):
//   cubetruss_support(extents=2);
// Example(VPT=[0,0,0],VPD=250):
//   cubetruss_support(extents=3);
// Example(VPT=[0,0,0],VPD=350):
//   cubetruss_support(extents=[2,2,3]);
// Example(VPT=[0,0,0],VPD=150):
//   cubetruss_support(strut=4);
// Example(VPT=[0,0,0],VPD=260):
//   cubetruss_support(extents=2) show_anchors();