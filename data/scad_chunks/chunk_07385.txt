module Pille(
h=10,
d,//+5,
rad,
rad2,
r,
center=true,
fn,
fn2,
fs=fs,
fa=fa,
fs2,
loch=false,
grad=360,
deg=90,
chamfer=true,
use2D=false,
x0=0,
l,
name,
help
){
use2D=is_parent(needs2D)&&!$children? use2D?b(use2D,false):
                                 1:
                              b(use2D,false);
  
deg=is_list(deg)?deg:[deg,deg];

l=is_undef(l)?h:l;

r=assert(is_num(l),"Pille h is undef")is_undef(r)?is_undef(d)?l/2:d/2:r;
rad=is_undef(rad)?2*r<l?r*[1,1]:l/2*[1,1]:(is_list(rad)?is_undef(rad[0])?[abs(r),rad[1]]:rad:[rad,rad?rad:undef])*sign(r);

rad2=is_undef(rad2)?is_num(rad[1])?rad[1]:
                                   r<l?r:
                                       l-rad[0]:
                    rad2*sign(r);
d=is_undef(r)?abs(d):abs(r*2);

x0=is_list(x0)?x0:[x0,x0];

deltaRx=max(0,rad[0]-d/2);
deltaRy=Kathete(rad[0],deltaRx);
ausgleich=rad[0]-deltaRy;

rgrad=min(abs(deg[0]),asin(deltaRy/abs(rad[0])) )*sign(rad[0]);

deltaRx2=max(0,rad2-d/2);
deltaRy2=Kathete(rad2,deltaRx2);
ausgleich2=rad2-deltaRy2;
rgrad2=min(abs(deg[1]),asin(deltaRy2/abs(rad2)) )*sign(rad2);

chamfer=is_list(chamfer)?[chamfer[0],chamfer[1]]:[chamfer,chamfer];
fs=is_list(fs)?fs:[fs,fs];
fnO=fn;
fn=is_undef(fn)?fs2fn(r=d/2,fs=fs[0],grad=grad,minf=8,fa=fa):fn;

ifs2=is_undef(fs2)?fs[1]:fs2;
fs2=is_list(ifs2)?ifs2:[ifs2,ifs2];
fn2FS=[fs2fn(r=rad[0],fs=fs2[0],grad=rgrad,fa=fa),fs2fn(r=rad2,fs=fs2[1],grad=rgrad2,fa=fa)];
fn2=is_num(fn2)?[fn2,fn2]:
                is_list(fn2)?[is_undef(fn2[0])?fn2FS[0]:
                                               fn2[0]
                             ,is_undef(fn2[1])?fn2FS[1]:
                                               fn2[1]]:
                fn2FS;


Echo(str(name," ",[for(i=[0:$parent_modules-1])parent_module($parent_modules-i)]," Pille zu kurz! ",l-rad[0]+ausgleich-rad2+ausgleich2),color="red",condition=l+ausgleich+ausgleich2-rad[0]-rad2<0);


points=concat(
  chamfer[0]&&deg[0]<90&&deg[0]>-90?[[max(0,abs(r)-(1-cos(rgrad))*rad[0]-(1-sin(abs(rgrad)))*abs(rad[0])*( rgrad==90?0:tan(rgrad) )),0]]:[],
  [
  if(!loch)[x0[0],0],
  if(!loch)[x0[1],l]
  ],
  chamfer[1]&&deg[1]<90&&deg[1]>-90?[[max(0,abs(r)-(1-cos(rgrad2))*rad2-(1-sin(abs(rgrad2)))*abs(rad2)*( deg[1]==90?0:tan(rgrad2) )),l]]:[],

  rad2==0?[[d/2,l]]:Kreis(r=rad2,rand=0,grad=rgrad2,t=[d/2-rad2,(chamfer[1]?l-rad2+ausgleich2:l-sin(rgrad2)*rad2)],fn=fn2[1],center=false,rot=90-rgrad2),
  rad[0]==0?[[d/2,0]]:Kreis(r=rad[0],rand=0,grad=rgrad,t=[d/2-rad[0],(chamfer[0]?rad[0]-ausgleich:sin(rgrad)*rad[0])],fn=fn2[0],center=false,rot=90)
);

if(!use2D)if(rgrad==90&&rgrad2==90)Tz(center?-l/2:0)//RotEx(grad=grad,fn=fn)
  rotate_extrude(angle=grad,$fn=fnO,$fs=fs[0],$fa=fa)polygon(points);
    else Tz(center?-l/2:0)//RotEx(grad=grad,fn=fn)
      rotate_extrude(angle=grad,$fn=fnO,$fs=fs[0],$fa=fa)polygon(clampToX0(points));
if(use2D)T(0,center?-l/2:0)polygon(points);    

  InfoTxt("Pille",["Länge",l,"Rundung",str(rad[0],"/",rad2,str(rad[0]>d/2?" Spitz":rad[0]==d/2?" Rund":" Flach","/",rad2>d/2?"Spitz":rad2==d/2?"Rund":"Flach")),"Durchmesser",d,"Radius",d/2,"Grad",str(grad,"°")],name);    
     
  HelpTxt("Pille",["h",h,"d",d,"fn",fn,"fn2",fn2,"fs",fs,"fs2",fs2,"center",center,"name",name,"rad",rad,"rad2",rad2,"loch",loch,"grad",grad,"deg",deg,"chamfer",chamfer,"use2D", use2D,],help);
}



/** \page Objects
  \name Disphenoid
  Disphenoid() creates a disphenoid
  \param h height 
  \param l length
  \param b width
  \param r edge radius
  \param ty,tz,delta distortion
  \param fn fragments
  \param help activate help
*/