function _screw_info_english(diam, threadcount, head, thread, drive) =
 let(
   diameter = is_string(diam) ? parse_int(substr(diam,1))*0.013 +0.06 
                              : diam,
   diamgroup = diameter<7/16 ? 0
             : diameter==7/16 ? 1
             : 2,
   pitch =
     is_num(thread) ? thread :
     is_def(threadcount) ? INCH/threadcount :
     let(
        tind=struct_val([["coarse",0],["unc",0],
                         ["fine",1],["unf",1],
                         ["extra fine",2],["extrafine",2],["unef",2]],
                         downcase(thread)),
        dummy = assert(is_def(tind), str("Unknown thread type, \"",thread,"\"")),
                 // coarse  fine  xfine
                 // UNC     UNF   UNEF
        UTS_thread = [
            ["#0", [undef,    80, undef]],
            ["#1", [   64,    72, undef]],
            ["#2", [   56,    64, undef]],
            ["#3", [   48,    56, undef]],
            ["#4", [   40,    48, undef]],
            ["#5", [   40,    44, undef]],
            ["#6", [   32,    40, undef]],
            ["#8", [   32,    36, undef]],
            ["#10",[   24,    32, undef]],
            ["#12",[   24,    28,    32]],
            [1/4,  [   20,    28,    32]],
            [5/16, [   18,    24,    32]],
            [3/8,  [   16,    24,    32]],
            [7/16, [   14,    20,    28]],
            [1/2,  [   13,    20,    28]],
            [9/16, [   12,    18,    24]],
            [5/8,  [   11,    18,    24]],
            [3/4,  [   10,    16,    20]],
            [7/8,  [    9,    14,    20]],
            [1,    [    8,    12,    20]],
            [1.125,[    7,    12,    18]],
            [1.25, [    7,    12,    18]],
            [1.375,[    6,    12,    18]],
            [1.5,  [    6,    12,    18]],
            [1.75, [    5, undef, undef]],
            [2,    [  4.5, undef, undef]],
         ],
       tentry = struct_val(UTS_thread, diam)
     )
     assert(is_def(tentry), str("Unknown screw size, \"",diam,"\""))
     assert(is_def(tentry[tind]), str("No ",thread," pitch known for screw size, \"",diam,"\""))
     INCH / tentry[tind],
   head_data =
       head=="none" ? let (
          UTS_setscrew = [
               // hex width, hex depth torx,  torx depth    slot width   slot depth 
            ["#0", [0.028,   0.050,   undef,     undef,       0.012,       0.018]],
            ["#1", [0.035,   0.060,   undef,     undef,       0.014,       0.018]],
            ["#2", [0.035,   0.060,   undef,     undef,       0.016,       0.022]],
            ["#3", [0.05 ,   0.070,   undef,     undef,       0.018,       0.025]],
            ["#4", [0.05 ,   0.045,      6,      0.027,       0.021,       0.028]],
            ["#5", [1/16 ,   0.080,      7,      0.036,       0.023,       0.031]],
            ["#6", [1/16 ,   0.080,      7,      0.036,       0.025,       0.035]],
            ["#8", [5/64 ,   0.090,      8,      0.041,       0.029,       0.041]],
            ["#10",[3/32 ,   0.100,      10,     0.049,       0.032,       0.048]],
            ["#12",[undef,   undef,   undef,    undef,        0.038,       0.056]],
            [1/4,  [1/8  ,   0.125,      15,     0.068,       0.045,       0.063]],
            [5/16, [5/32 ,   0.156,      25,     0.088,       0.051,       0.078]],
            [3/8,  [3/16 ,   0.188,      30,     0.097,       0.064,       0.094]],
            [7/16, [7/32 ,   0.219,      40,     0.117,       0.072,       0.109]],
            [1/2,  [1/4  ,   0.250,      45,     0.137,       0.081,       0.125]],
            [9/16, [undef,   undef,   undef,    undef,        0.091,       0.141]],
            [5/8,  [5/16 ,   0.312,      55,     0.202,       0.102,       0.156]],
            [3/4,  [3/8  ,   0.375,      60,     0.202,       0.129,       0.188]],
            [7/8,  [1/2  ,   0.500,      70,     0.291]],     
            [1,    [9/16 ,   0.562,      70,     0.291]],     
            [1.125,[9/16 ,   0.562]],
            [1.25, [5/8  ,   0.625]],
            [1.375,[5/8  ,   0.625]],
            [1.5,  [3/4  ,   0.750]],
            [1.75, [1    ,   1.000]],
            [2,    [1    ,   1.000]],
            ],
          entry = struct_val(UTS_setscrew, diam),
          dummy=assert(is_def(entry), str("Screw size ",diam," unsupported for headless screws")),
          drive_dims = drive == "hex" ? [["drive_size", INCH*entry[0]], ["drive_depth", INCH*entry[1]]]
                     : drive == "torx" ? [["drive_size", entry[2]], ["drive_depth", INCH*entry[3]]] 
                     : drive == "slot" ? [["drive_size", INCH*entry[4]], ["drive_depth", INCH*entry[5]]]
                     : []
         ) concat([["head","none"]], drive_dims) 
     : head=="hex" ? let( 
            UTS_hex = [
               // flat to flat width, height
               ["#2", [    1/8,   1/16]],
               ["#4", [   3/16,   1/16]],
               ["#6", [    1/4,   3/32]],
               ["#8", [    1/4,   7/64]],
               ["#10",[   5/16,    1/8]],
               ["#12",[   5/16,   5/32]],
               [1/4,  [   7/16,   5/32]],
               [5/16, [    1/2,  13/64]],
               [3/8,  [   9/16,    1/4]],
               [7/16, [    5/8,  19/64]],
               [1/2,  [    3/4,  11/32]],
               [9/16, [  13/16,  23/64]],
               [5/8,  [  15/16,  27/64]],
               [3/4,  [  1.125,    1/2]],
               [7/8,  [ 1+5/16,  37/64]],
               [1,    [    1.5,  43/64]],
               [1.125,[1+11/16,  11/16]],
               [1.25, [  1+7/8,  27/32]],
               [1.5,  [   2.25,  15/16]],
               [1.75, [  2+5/8, 1+3/32]],
               [2,    [      3, 1+7/32]],
            ],
            entry = struct_val(UTS_hex, diam)
           )
           assert(is_def(entry), str("Screw size ",diam," unsupported for head type \"",head,"\""))
           [["head", "hex"], ["head_size", INCH*entry[0]], ["head_height", INCH*entry[1]]] 
     : in_list(head,["socket","socket ribbed"]) ? let(
            UTS_socket = [    // height = screw diameter
                       //diam,   hex, torx size, hex depth, torx depth
               ["#0", [  0.096,  0.05, 6,         0.025,      0.027]],
               ["#1", [  0.118,  1/16, 7,         0.031,      0.036]],
               ["#2", [   9/64,  5/64, 8,         0.038,      0.037]],
               ["#3", [  0.161,  5/64, 8,         0.044,      0.041]],   // For larger sizes, hex recess depth is
               ["#4", [  0.183,  3/32, 10,        0.051,      0.049]],   // half the screw diameter
               ["#5", [  0.205,  3/32, 10,        0.057,      0.049]],
               ["#6", [  0.226,  7/64, 15,        0.064,      0.058]],
               ["#8", [  0.270,  9/64, 25,        0.077,      0.078]],
               ["#10",[   5/16,  5/32, 27,        undef,      0.088]],
               ["#12",[  0.324,  5/32, 27,        undef,      0.088]],
               [1/4,  [    3/8,  3/16, 30,        undef,      0.097]],
               [5/16, [  15/32,   1/4, 45,        undef,      0.137]],
               [3/8,  [   9/16,  5/16, 50,        undef,      0.155]],
               [7/16, [  21/32,   3/8, 55,        undef,      0.202]],
               [1/2,  [    3/4,   3/8, 55,        undef,      0.202]],
               [9/16, [  27/32,  7/16, 60,        undef,      0.240]],
               [5/8,  [  15/16,   1/2, 70,        undef,      0.291]],
               [3/4,  [  1.125,   5/8, 80,        undef,      0.332]],
               [7/8,  [ 1+5/16,   3/4, 100,       undef,      0.425]],
               [1,    [    1.5,   3/4, 100,       undef,      0.425]],
               [1.125,[1+11/16,   7/8, undef,     undef,      undef]],
               [1.25, [  1+7/8,   7/8, undef,     undef,      undef]],
               [1.375,[ 2+1/16,     1, undef,     undef,      undef]],
               [1.5,  [   2.25,     1, undef,     undef,      undef]],
               [1.75, [  2+5/8,  1.25, undef,     undef,      undef]],
               [2,    [      3,   1.5, undef,     undef,      undef]],
            ],
            entry = struct_val(UTS_socket, diam),
            dummy=assert(is_def(entry), str("Screw size ",diam," unsupported for head type \"",head,"\"")),
            hexdepth = is_def(entry[3]) ? entry[3]
                     : is_def(diameter) ? diameter/2
                     : undef,
            drive_size =  drive=="hex" ? [["drive_size",INCH*entry[1]], ["drive_depth",INCH*hexdepth]] :
                          drive=="torx" ? [["drive_size",entry[2]],["drive_depth",INCH*entry[4]]] : []
            )
            concat([["head",head],["head_size",INCH*entry[0]], ["head_height", INCH*diameter]],drive_size) 
     : head=="pan" ? let (
           UTS_pan = [  // pan head for phillips or slotted
                 //              head height 
                 //    diam,   slotted  phillips  phillips drive, phillips diam, phillips width, phillips depth, slot width, slot depth  torx size
               ["#0", [0.116,   0.039,   0.044,        0,          0.067,          0.013,           0.039,       0.023,         0.022]],
               ["#1", [0.142,   0.046,   0.053,        0,          0.085,          0.015,           0.049,       0.027,         0.027]],
               ["#2", [0.167,   0.053,   0.063,        1,          0.104,          0.017,           0.059,       0.031,         0.031,      8]],
               ["#3", [0.193,   0.060,   0.071,        1,          0.112,          0.019,           0.068,       0.035,         0.036]],
               ["#4", [0.219,   0.068,   0.080,        1,          0.122,          0.019,           0.078,       0.039,         0.040,     10]],
               ["#5", [0.245,   0.075,   0.089,        2,          0.158,          0.028,           0.083,       0.043,         0.045]],
               ["#6", [0.270,   0.082,   0.097,        2,          0.166,          0.028,           0.091,       0.048,         0.050,     15]],
               ["#8", [0.322,   0.096,   0.115,        2,          0.182,          0.030,           0.108,       0.054,         0.058,     20]],
               ["#10",[0.373,   0.110,   0.133,        2,          0.199,          0.031,           0.124,       0.060,         0.068,     25]],
               ["#12",[0.425,   0.125,   0.151,        3,          0.259,          0.034,           0.141,       0.067,         0.077]],
               [1/4,  [0.492,   0.144,   0.175,        3,          0.281,          0.036,           0.161,       0.075,         0.087,     30]],
               [5/16, [0.615,   0.178,   0.218,        4,          0.350,          0.059,           0.193,       0.084,         0.106]],
               [3/8,  [0.740,   0.212,   0.261,        4,          0.389,          0.065,           0.233,       0.094,         0.124]],
            ],
            htind = drive=="slot" ? 1 : 2,
            entry = struct_val(UTS_pan, diam),
            dummy=assert(is_def(entry), str("Screw size ",diam," unsupported for head type \"",head,"\"")),
            drive_size = drive=="phillips" ? [["drive_size", entry[3]],
                                             // ["drive_diameter",INCH*entry[4]],
                                             // ["drive_width",INCH*entry[5]],
                                              ["drive_depth",INCH*entry[6]]]
                                           : [["drive_size", INCH*entry[7]],
                                              ["drive_depth",INCH*entry[8]]])
           concat([["head","pan round"], ["head_size", INCH*entry[0]], ["head_height", INCH*entry[htind]]], drive_size) 
     : head=="button" || head=="round" ? let(
            UTS_button = [    // button, hex or torx drive
                 //   head diam, height, phillips, hex,   torx, hex depth
               ["#0", [0.114,    0.032,   undef,   0.035,  5    , 0.020, 0.015]],
               ["#1", [0.139,    0.039,   undef,   3/64,   5    , 0.028, 0.022]],
               ["#2", [0.164,    0.046,   undef,   3/64,   6    , 0.028, 0.023]],
               ["#3", [0.188,    0.052,   undef,   1/16,   undef, 0.035, undef]],
               ["#4", [0.213,    0.059,   undef,   1/16,   8    , 0.035, 0.032]],
               ["#5", [0.238,    0.066,   undef,   5/64,   10   , 0.044, 0.038]],
               ["#6", [0.262,    0.073,   undef,   5/64,   10   , 0.044, 0.038]],
               ["#8", [0.312,    0.087,   undef,   3/32,   15   , 0.052, 0.045]],
               ["#10",[0.361,    0.101,   undef,   1/8,    25   , 0.070, 0.052]],
               ["#12",[0.413,    0.114,   undef,   1/8,    undef, 0.070, undef]],   // also 0.410, .115, 9/64, hex depth guessed
               [1/4,  [0.437,    0.132,   undef,   5/32,   27   , 0.087, 0.068]],
               [5/16, [0.547,    0.166,   undef,   3/16,   40   , 0.105, 0.090]],
               [3/8,  [0.656,    0.199,   undef,   7/32,   45   , 0.122, 0.106]],
               [7/16, [0.750,    0.220,   undef,   1/4,    undef, 0.193, undef]],  // hex depth interpolated
               [1/2,  [0.875,    0.265,   undef,   5/16,   55   , 0.175, 0.158]],
               [5/8,  [1.000,    0.331,   undef,   3/8,    60   , 0.210, 0.192]],
               [3/4,  [1.1,      0.375,   undef,   7/16,   undef, 0.241]],  // hex depth extrapolated
             ],
             UTS_round = [   // slotted, phillips
                  // head diam, head height, phillips drive, hex, torx, ph diam, ph width, ph depth, slot width, slot depth
               ["#0", [0.113, 0.053, 0, undef, undef]],
               ["#1", [0.138, 0.061, 0, undef, undef]],
               ["#2", [0.162, 0.069, 1, undef, undef, 0.100, 0.017, 0.053, 0.031, 0.048]],
               ["#3", [0.187, 0.078, 1, undef, undef, 0.109, 0.018, 0.062, 0.035, 0.053]],
               ["#4", [0.211, 0.086, 1, undef, undef, 0.118, 0.019, 0.072, 0.039, 0.058]],
               ["#5", [0.236, 0.095, 2, undef, undef, 0.154, 0.027, 0.074, 0.043, 0.063]],
               ["#6", [0.260, 0.103, 2, undef, undef, 0.162, 0.027, 0.084, 0.048, 0.068]],
               ["#8", [0.309, 0.120, 2, undef, undef, 0.178, 0.030, 0.101, 0.054, 0.077]],
               ["#10",[0.359, 0.137, 2, undef, undef, 0.195, 0.031, 0.119, 0.060, 0.087]],
               ["#12",[0.408, 0.153, 3, undef, undef, 0.249, 0.032, 0.125, 0.067, 0.096]],
               [1/4,  [0.472, 0.175, 3, undef, undef, 0.268, 0.034, 0.147, 0.075, 0.109]],
               [5/16, [0.590, 0.216, 3, undef, undef, 0.308, 0.040, 0.187, 0.084, 0.132]],
               [3/8,  [0.708, 0.256, 4, undef, undef, 0.387, 0.064, 0.228, 0.094, 0.155]],
               [1/2,  [0.813, 0.355, 4, undef, undef, 0.416, 0.068, 0.256, 0.106, 0.211]]
             ],
             entry = struct_val(head=="button" ? UTS_button : UTS_round, diam),
             dummy=assert(is_def(entry), str("Screw size ",diam," unsupported for head type \"",head,"\"")),
             drive_index = drive=="phillips" ? 2 :
                           drive=="hex" ? 3 :
                           drive=="torx" ? 4 : undef,
             drive_size = drive=="phillips" && head=="round" ? [["drive_size", entry[2]],
                                                               // ["drive_diameter",u_mul(INCH,entry[5])],
                                                               // ["drive_width",INCH*entry[6]],
                                                                ["drive_depth",INCH*entry[7]]]
                        : drive=="slot" && head=="round" ?  [["drive_size", INCH*entry[8]],
                                                             ["drive_depth",u_mul(INCH,entry[9])]]
                        : drive=="hex" && head=="button" ? [["drive_size", INCH*entry[drive_index]],
                                                            ["drive_depth", u_mul(INCH,entry[5])]]
                        : drive=="torx" && head=="button" ? [["drive_size", entry[drive_index]],
                                                             ["drive_depth", u_mul(INCH,entry[6])]]
                        : is_def(drive_index) && head=="button" ? [["drive_size", entry[drive_index]]] : []
             )
             concat([["head",head],["head_size",INCH*entry[0]], ["head_height", INCH*entry[1]]],drive_size) 
     : head=="fillister" ? let(
             UTS_fillister = [ // head diam, head height, slot width, slot depth, phillips diam, phillips depth, phillips width, phillips #
                   ["#0", [0.096, 0.055, 0.023, 0.025, 0.067, 0.039, 0.013, 0]],
                   ["#1", [0.118, 0.069, 0.027, 0.031, 0.085, 0.049, 0.015,  ]],
                   ["#2", [0.140, 0.083, 0.031, 0.037, 0.104, 0.059, 0.017,  ]],
                   ["#3", [0.161, 0.095, 0.035, 0.043, 0.112, 0.068, 0.019, 1]],
                   ["#4", [0.183, 0.107, 0.039, 0.048, 0.122, 0.078, 0.019, 1]],
                   ["#5", [0.205, 0.120, 0.043, 0.054, 0.143, 0.067, 0.027, 2]],
                   ["#6", [0.226, 0.132, 0.048, 0.060, 0.166, 0.091, 0.028, 2]],
                   ["#8", [0.270, 0.156, 0.054, 0.071, 0.182, 0.108, 0.030, 2]],
                   ["#10",[0.313, 0.180, 0.060, 0.083, 0.199, 0.124, 0.031, 2]],
                   ["#12",[0.357, 0.205, 0.067, 0.094, 0.259, 0.141, 0.034, 3]],
                   [1/4,  [0.414, 0.237, 0.075, 0.109, 0.281, 0.161, 0.036, 3]],
                   [5/16, [0.518, 0.295, 0.084, 0.137, 0.322, 0.203, 0.042, 3]],
                   [3/8,  [0.622, 0.355, 0.094, 0.164, 0.389, 0.233, 0.065, 4]],
             ],
             entry = struct_val(UTS_fillister, diam),
             dummy=assert(is_def(entry), str("Screw size ",diam," unsupported for head type \"",head,"\"")),
             drive_size = drive=="phillips" ? [["drive_size", entry[7]],
                                            //   ["drive_diameter",INCH*entry[4]],
                                            //   ["drive_width",INCH*entry[6]],
                                               ["drive_depth",INCH*entry[5]]] 
                        : drive=="slot"?  [["drive_size", INCH*entry[2]],
                                           ["drive_depth",INCH*entry[3]]] : []
             )
             concat([["head", "fillister"], ["head_size", INCH*entry[0]], ["head_height", INCH*entry[1]]], drive_size) 
     : starts_with(head,"flat ") || head=="flat" ? 
         let(
             headparts = str_split(head," ",keep_nulls=false),
             partsok = [for (part=headparts) if (!in_list(part, ["flat","undercut","100","82","small","large","sharp"])) part], 
             dummy1=assert(partsok==[], str("Unknown flat head parameter(s) ",partsok)),
             dummy2=assert(!(in_list("small",headparts) && in_list("large",headparts)), "Cannot specify large and small flat head at the same time"),
             undercut = in_list("undercut", headparts),
             small = in_list("small",headparts) || (!in_list("large",headparts) && drive!="hex" && drive!="torx"),
             angle = in_list("100", headparts) ? 100 : 82,
             dummy3=assert(!undercut || angle==82, "Cannot make undercut 100 degree screw"),
             dummy4=assert(small || angle==82, "Only 82 deg large screws are supported"),
             dummy5=assert(small || !undercut, "Undercut only supported for small flatheads"),
             UTS_flat_small = [  // for phillips drive, slotted, and torx   ASME B18.6.3
                    //                     ----- Phillips ----              undercut phillips
                    //    ph drive, torx , diam,  depth, width, slotwidth,  diam, depth, width
                    //       0       1       2      3      4        5           6        7  
                   ["#0", [  0,     undef, 0.062, 0.035, 0.014,   0.023,   0.062, 0.035, 0.014]],
                   ["#1", [  0,     undef, 0.070, 0.043, 0.015,   0.026,   0.070, 0.043, 0.015]],
                   ["#2", [  1,     6    , 0.096, 0.055, 0.017,   0.031,   0.088, 0.048, 0.017]],
                   ["#3", [  1,     undef, 0.100, 0.060, 0.018,   0.035,   0.099, 0.059, 0.018]],
                   ["#4", [  1,     8    , 0.122, 0.081, 0.018,   0.039,   0.110, 0.070, 0.018]],
                   ["#5", [  2,     undef, 0.148, 0.074, 0.027,   0.043,   0.122, 0.081, 0.018]], //ph#1 for undercut
                   ["#6", [  2,     10   , 0.168, 0.094, 0.029,   0.048,   0.140, 0.066, 0.025]],
                   ["#8", [  2,     15   , 0.182, 0.110, 0.030,   0.054,   0.168, 0.094, 0.029]],
                   ["#10",[  2,     20   , 0.198, 0.124, 0.032,   0.060,   0.182, 0.110, 0.030]],
                   ["#12",[  3,     undef, 0.262, 0.144, 0.035,   0.067,   0.226, 0.110, 0.030]],
                   [1/4,  [  3,     27   , 0.276, 0.160, 0.036,   0.075,   0.244, 0.124, 0.032]],
                   [5/16, [  4,     40   , 0.358, 0.205, 0.061,   0.084,   0.310, 0.157, 0.053]],
                   [3/8,  [  4,     40   , 0.386, 0.234, 0.065,   0.094,   0.358, 0.205, 0.061]],
                   [1/2,  [  4,     undef, 0.418, 0.265, 0.069,   0.106,   0.402, 0.252, 0.068]]
             ],
             UTS_flat_small_100 = [  // for phillips drive, slotted, 100 deg angle  ASME B18.6.3
                    //                     ----- Phillips ----            
                    //    ph drive, torx , diam,  depth, width, slotwidth
                    //       0       1       2      3      4        5    
                   ["#0", [  0,     undef, 0.054, 0.027, 0.013,   0.023]],
                   ["#1", [  0,     undef, 0.062, 0.035, 0.014,   0.026]],
                   ["#2", [  1,     6    , 0.088, 0.048, 0.012,   0.031]],
                   ["#3", [  1,     undef, 0.096, 0.055, 0.014,   0.035]],
                   ["#4", [  1,     8    , 0.110, 0.070, 0.018,   0.039]],
                   ["#6", [  2,     10   , 0.148, 0.074, 0.027,   0.048]],
                   ["#8", [  2,     15   , 0.162, 0.090, 0.028,   0.054]],
                   ["#10",[  2,     20   , 0.178, 0.104, 0.030,   0.060]],
                   [1/4,  [  3,     27   , 0.240, 0.124, 0.033,   0.075]],
                   [5/16, [  4,     40   , 0.310, 0.157, 0.053,   0.084]],
                   [3/8,  [  4,     40   , 0.336, 0.182, 0.056,   0.094]],
             ],
             UTS_flat_large = [   // for hex drive, torx     ASME B18.3
                       // minimum
                       // head diam, hex drive size, torx size, hex depth, torx depth
                   ["#0", [ 0.117,   1/32,            3    ,     0.025,    0.016]],
                   ["#1", [ 0.143,   3/64,            6    ,     0.031,    0.036]],
                   ["#2", [ 0.168,   3/64,            6    ,     0.038,    0.036]],
                   ["#3", [ 0.193,   1/16,            8    ,     0.044,    0.041]],
                   ["#4", [ 0.218,   1/16,            10   ,     0.055,    0.038]],
                   ["#5", [ 0.240,   5/64,            10   ,     0.061,    0.038]],
                   ["#6", [ 0.263,   5/64,            15   ,     0.066,    0.045]],
                   ["#8", [ 0.311,   3/32,            20   ,     0.076,    0.053]],
                   ["#10",[ 0.359,    1/8,            25   ,     0.087,    0.061]],
                   [1/4,  [ 0.480,   5/32,            30   ,     0.111,    0.075]],
                   [5/16, [ 0.600,   3/16,            40   ,     0.135,    0.090]],
                   [3/8,  [ 0.720,   7/32,            45   ,     0.159,    0.106]],
                   [7/16, [ 0.781,    1/4,            50   ,     0.172,    0.120]],
                   [1/2,  [ 0.872,   5/16,            50   ,     0.220,    0.120]],
                   [5/8,  [ 1.112,    3/8,            55   ,     0.220,    0.158]],
                   [3/4,  [ 1.355,    1/2,            60   ,     0.248,    0.192]],
                   [7/8,  [ 1.604,   9/16,            undef,     0.297,    undef]],
                   [1,    [ 1.841,    5/8,            undef,     0.325,    undef]],
                   [1.125,[ 2.079,    3/4,            undef,     0.358,    undef]],
                   [1.25, [ 2.316,    7/8,            undef,     0.402,    undef]],
                   [1.375,[ 2.688,    7/8,            undef,     0.402,    undef]],
                   [1.5,  [ 2.938,      1,            undef,     0.435,    undef]],
             ],
             entry = struct_val(    angle==100 ? UTS_flat_small_100 
                                  : small ? UTS_flat_small 
                                  : UTS_flat_large, 
                                diam),
             dummy=assert(is_def(entry), str("Screw size ",diam," unsupported for head type \"",head,"\"")),
             a=[1.92+1.82, 1.88+1.8, 1.88+1.8]/2,
             b=[.003+.013, .063+.073, .125+.135]/2,
             smallsize = a[diamgroup]*diameter-b[diamgroup],
     
             csmall=[2.04, 2, 2],
             dsmall=[.003, .063, .125], 
             dlarge = [-.031, .031, .062],
             sharpsize = small ? csmall[diamgroup]*diameter-dsmall[diamgroup] // max theoretical (sharp) head diam
                                     : diameter < 0.1 ? [0.138,0.168,0.0822,0.0949][(diameter - 0.06)/.013] 
                                     : 2*diameter-dlarge[diamgroup],
             largesize = lerp(entry[0],sharpsize,.20),   // Have min size and max theory size.  Use point 20% up from min size
             undercut_height = let(
                                   a=[.432+.386, .417+.37, .417+.37]/2,
                                   b=[.001+.005, .026+.029, .052+.055]/2
                               )
                               a[diamgroup]*diameter + b[diamgroup],
             e=undercut ? [.202+.134, .192+.129, .192+.129]/2 
              : angle==100 ? [.222+.184]/2 
              : [.288+.192, .274+.184, .274+.184]/2,
             f=undercut ? [.002, .012+.011, .024+.019]/2
              : angle==100 ? [.0005+.004]/2 
              : [.004, .015+.017, .034+.027],
             tipdepth_small = e[diamgroup]*diameter + f[diamgroup],
             driveind = small && drive=="phillips" ? 0
                      : !small && drive=="hex" ? 1 
                      : drive=="torx" ? 2 
                      : undef,
             drive_dims = small ? (
                            drive=="phillips" && !undercut ? [
                                                            //  ["drive_diameter",INCH*entry[2]],
                                                            //  ["drive_width",INCH*entry[4]],
                                                              ["drive_depth",INCH*entry[3]]
                                                             ]
                          : drive=="phillips" && undercut ?  [
                                                             // ["drive_diameter",INCH*entry[6]],
                                                             // ["drive_width",INCH*entry[8]],
                                                              ["drive_depth",INCH*entry[7]]
                                                             ] 
                          : drive=="slot" ? [["drive_size", INCH*entry[5]], 
                                             ["drive_depth", INCH*tipdepth_small]] :
                            
                            []
                            )
                         :
                           (
                             drive=="hex" ? [["drive_depth", INCH*entry[3]]] :
                             drive=="torx" ? [["drive_depth", INCH*entry[4]]] : []
                           )
         )
         [
           ["head","flat"],
           ["head_angle",angle],
           ["head_size", in_list("sharp",headparts) ? sharpsize*INCH
                        : small ? smallsize*INCH : largesize*INCH], //entry[0]*INCH],
           ["head_size_sharp", sharpsize*INCH],
           if (is_def(driveind)) ["drive_size", (drive=="hex"?INCH:1)*entry[driveind]],
           if (undercut) ["head_height", undercut_height*INCH],
           each drive_dims
         ]
     : []
 )
 concat([
           ["type","screw_info"],
           ["system","UTS"],
           ["diameter",INCH*diameter],
           ["pitch", pitch],
           ["drive",drive]
         ],
         head_data
 );