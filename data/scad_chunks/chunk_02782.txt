module tray_single(dimensions, thickness=2, curved=true, bottom_thickness=undef, bottom_bevel_radius=undef, top_bevel_radius=undef) {
    
    ext_top_bevel_radius = thickness * 0.05;
    
    // External box dimensions.
    ext_width = dimensions[0];
    ext_length = dimensions[1];
    ext_height = dimensions[2];
    
    // Inside box dimensions (to scoop out the external one).
    int_width = ext_width - 2*thickness;
    int_length = ext_length - 2*thickness;
    int_height = ext_height;
    int_top_bevel_radius = top_bevel_radius != undef ? top_bevel_radius : (curved ? thickness : 0);
    int_bottom_bevel_radius = bottom_bevel_radius != undef ? bottom_bevel_radius : (curved ? 2*thickness : 0);

    _bottom_thickness = bottom_thickness != undef ? bottom_thickness : thickness;

    // Create tray.
    difference() {
        _tray_rounded_cube([ext_width, ext_length, ext_height],
                     r=ext_top_bevel_radius,
                     x=true, rx=[0,ext_top_bevel_radius,ext_top_bevel_radius,0], 
                     y=true, ry=[ext_top_bevel_radius,ext_top_bevel_radius,0,0]);
        if (_bottom_thickness > 0)
	    translate([thickness, thickness, _bottom_thickness])
            	_tray_rounded_cube([int_width, int_length, ext_height],
                         r=int_top_bevel_radius,
                         x=true, rx=[int_bottom_bevel_radius,0,0,int_bottom_bevel_radius], 
                         y=true, ry=[0,0,int_bottom_bevel_radius,int_bottom_bevel_radius]);


	else
	    translate([thickness, thickness, 0])
            	_tray_rounded_cube([int_width, int_length, ext_height],
                         r=int_top_bevel_radius, x=false, y=false);
    }
}

/*
	roundeCube() v1.0.3 by robert@cosmicrealms.com from https://github.com/Sembiance/openscad-modules
	Allows you to round any edge of a cube
	
	Usage
	=====
	Prototype: _tray_rounded_cube(dim, r, x, y, z, xcorners, ycorners, zcorners, $fn)
	Arguments:
		-      dim = Array of x,y,z numbers representing cube size
		-        r = Radius of corners. Default: 1
		-        x = Round the corners along the X axis of the cube. Default: false
		-        y = Round the corners along the Y axis of the cube. Default: false
		-        z = Round the corners along the Z axis of the cube. Default: true
		- xcorners = Array of 4 booleans, one for each X side of the cube, if true then round that side. Default: [true, true, true, true]
		- ycorners = Array of 4 booleans, one for each Y side of the cube, if true then round that side. Default: [true, true, true, true]
		- zcorners = Array of 4 booleans, one for each Z side of the cube, if true then round that side. Default: [true, true, true, true]
		-       rx = Radius of the x corners. Default: [r, r, r, r]
		-       ry = Radius of the y corners. Default: [r, r, r, r]
		-       rz = Radius of the z corners. Default: [r, r, r, r]
		-   center = Whether to render the cube centered or not. Default: false
		-      $fn = How smooth you want the rounding to be. Default: 128

	Change Log
	==========
	2018-08-21: v1.0.3 - Added ability to set the radius of each corner individually with vectors: rx, ry, rz
	2017-05-15: v1.0.2 - Fixed bugs relating to rounding corners on the X axis
	2017-04-22: v1.0.1 - Added center option
	2017-01-04: v1.0.0 - Initial Release

	Thanks to Sergio Vilches for the initial code inspiration
*/

// Example code:

/*cube([5, 10, 4]);

translate([8, 0, 0]) { _tray_rounded_cube([5, 10, 4], r=1); }
translate([16, 0, 0]) { _tray_rounded_cube([5, 10, 4], r=1, zcorners=[true, false, true, false]); }

translate([24, 0, 0]) { _tray_rounded_cube([5, 10, 4], r=1, y=true, z=false); }
translate([32, 0, 0]) { _tray_rounded_cube([5, 10, 4], r=1, x=true, z=false); }
translate([40, 0, 0]) { _tray_rounded_cube([5, 10, 4], r=1, x=true, y=true, z=true); }
*/