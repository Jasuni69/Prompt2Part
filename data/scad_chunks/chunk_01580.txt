module ax_res(type, value, tol = 5, pitch = 0) { //! Through hole axial resistor. If `pitch` is zero the minimum is used. If below the minimum the resistor is placed vertical.
    vitamin(str("ax_res(", type[0], ", ", value, arg(tol, 5, "tol"), "): Resistor ", value, " Ohms ", tol, "% ",ax_res_wattage(type), "W"));

    wire_d =  ax_res_wire(type);
    end_d = ax_res_end_d(type);
    end_l = ax_res_end_l(type);
    body_d = ax_res_diameter(type);
    length = ax_res_length(type);
    h = end_d / 2;
    r = 0.3;

    colours = ["gold", "silver", "black", "brown", "red", "orange", "yellow", "green", "blue", "violet", "grey", "white"];

    $fs = fs; $fa = fa;
    exp = floor(log(value) + eps);
    mult = exp - (len(str(value / pow(10, exp - 1))) > 2 ? 2 : 1);
    digits = str(value / pow(10, mult));
    bands = [
        for(d = digits)
            colours[ord(d) - ord("0") + 2],
        colours[mult + 2],
        tol == 1  ? "brown"  :
        tol == 2  ? "red"    :
        tol == 5  ? "gold"   :
        tol == 10 ? "silver" : "error"
    ];

    module profile(o = 0)
        intersection() {
            offset(o) round(r)
                union(){
                    translate([0, -length / 2])
                        square([body_d / 2, length]);

                    for(end = [-1, 1])
                        hull() {
                            translate([0, end * (length - end_l) / 2 - end_l / 2])
                                square([end_d / 2, end_l]);

                            translate([0, end * length / 2])
                                square([wire_d, 2 * r], center = true);
                        }
                    translate([-5, 0])
                        square([10 + wire_d, length + 4 * r], center = true);
                }

            translate([0, -50])
                square([50, 100]);
    }

    orientate_axial(length, h, pitch, wire_d) {
        color(ax_res_colour(type))
            rotate_extrude()
                profile();

        for(i = [0 : len(bands) - 1])
            color(bands[i])
                rotate_extrude()
                    intersection() {
                        profile(eps);

                        translate([0, length / 2 - end_l / 2 - i * (length - end_l) / (len(bands) - 1)])
                            square([end_d + 1, (length - end_l) / len(bands) / 2], center = true);
                    }
    }
}