module Clock7Segment(hours=0,minutes,seconds,colon=true)
{
  // Convert the number to text,
  // and add a zero if needed.
  h_text = hours < 10 ? str("0",hours) : str(hours);

  // When the minutes are not defined, 
  // then the string is empty.
  m_text = is_num(minutes) ? 
    minutes < 10 ? str("0",minutes) : str(minutes) :
    "";

  // When the seconds are not defined, 
  // then the string is empty.
  s_text = is_num(seconds) ? 
    seconds < 10 ? str("0",seconds) : str(seconds) :
    "";

  // When the minutes are defines, then it
  // probably needs the first colon.
  colon1 = is_num(minutes) ?
    colon ? ":" : ";" :
    "";

  // When the seconds are defined, then it
  // probably needs the second colon.
  colon2 = is_num(seconds) ?
    colon ? ":" : ";" :
    "";

  // Combine everything in one string.
  time = str(h_text, colon1, m_text, colon2, s_text);
  Draw7Segment(time);
}

// Conversion table for a 7-segment display.
seven_segment_conversion =
[
  [ "0", "abcdef"  ],
  [ "1", "bc"      ],
  [ "2", "abged"   ],
  [ "3", "abgcd"   ],
  [ "4", "fbgc"    ],
  [ "5", "afgcd"   ],
  [ "6", "afgcde"  ],
  [ "7", "abc"     ],
  [ "8", "abcdefg" ],
  [ "9", "fabgcd"  ],
  [ "A", "efabcg"  ],
  [ "B", "fgcde"   ],
  [ "C", "afed"    ],
  [ "D", "edgcb"   ],
  [ "E", "afged"   ],
  [ "F", "efga"    ],
  [ "G", "acdef"   ],
  [ "H", "bcefg"   ],
  [ "I", "bc"      ],
  [ "J", "bcd"     ],
  [ "K", "befg"    ],
  [ "L", "def"     ],
  [ "M", "egc"     ],
  [ "N", "egc"     ],
  [ "O", "abcdef"  ],
  [ "P", "efabg"   ],
  [ "Q", "gfabc"   ],
  [ "R", "efabgc"  ],
  [ "S", "afgcd"   ],
  [ "T", "abc"     ],
  [ "U", "fedcb"   ],
  [ "V", "fedcb"   ],
  [ "W", "fedcb"   ],
  [ "X", "egbfc"   ],
  [ "Y", "fgbcd"   ],
  [ "Z", "abged"   ],
  [ "a", "abgcde"  ],
  [ "b", "fgcde"   ],
  [ "c", "ged"     ],
  [ "d", "bgcde"   ],
  [ "e", "bafged"  ],
  [ "f", "efag"    ],
  [ "g", "fabgcd"  ],
  [ "h", "fegc"    ],
  [ "i", "c"       ],
  [ "j", "bcd"     ],
  [ "k", "efgcb"   ],
  [ "l", "fed"     ],
  [ "m", "egc"     ],
  [ "n", "egc"     ],
  [ "o", "efdcba"  ],
  [ "p", "fabge"   ],
  [ "q", "fabgc"   ],
  [ "r", "eg"      ],
  [ "s", "afgcd"   ],
  [ "t", "fedg"    ],
  [ "u", "edc"     ],
  [ "v", "edc"     ],
  [ "w", "edc"     ],
  [ "x", "egbfc"   ],
  [ "y", "fgbcd"   ],
  [ "z", "abged"   ],
  [ "Â°", "abgf"    ],
  [ "-", "g"       ],
  // The next characters are special.
  // They are not translated to a segment,
  // but they are dealt with in the script.
  [ ".", "."       ],    // dot between the digits
  [ ":", ":"       ],    // visible colon
  [ ";", ";"       ],    // invisible colon
  [ " ", " "       ],    // space instead of a digit
];

_width = 1.2;        // line width
_radius1 = 0.6;      // sharper round edge
_radius2 = 1;        // wider round edge
_diameter_dot = 1;   // size of the dot

// The size of the colon dots
// are a little bigger than the with
// of a segment.
// I think it looks better that way.
_diameter_colon = 1.1*_width; 

// The length of each segment can be made shorter.
// The segments are designed with this value at zero.
gap_adjust = 0.15; // segment length adjust.

// The width of the complete digit can be changed.
// A little wider than designed is better.
width_adjust = 0.2;

_digit_height = 10;  // the total heigt of a digit
_digit_width_turtle = 5 + width_adjust;    // the total width of a digit

// Every segment is created in its position.
// The "TELEPORT" command works for now only
// as the first command.
turtle_seven_segment =
[
  // a   top   at [0]
  [
    [TELEPORT,1.2,8.8],
    [FORWARD,2.6-gap_adjust+width_adjust],
    [LEFT,60],
    [FORWARD,1.38565],
    [LEFT,120],
    [FORWARD,3.62247-gap_adjust+width_adjust],
    [CIRCLE,_radius2,60.5],
  ],
  // b   upper-right   at [1]
  [
    [TELEPORT,3.8+width_adjust,8.8],
    [RIGHT,90],
    [FORWARD,3.2-gap_adjust/2],
    [LEFT,55],
    [FORWARD,1.0],
    [LEFT,75],
    [FORWARD,0.497],
    [LEFT,50],
    [FORWARD,4.06136-gap_adjust/2],
    [CIRCLE,_radius1,81.088],
  ],
  // c   lower-right   at [2]
  [
    [TELEPORT,3.8+width_adjust,1.2],
    [LEFT,90],
    [FORWARD,3.2-gap_adjust/2],
    [RIGHT,52.594],
    [FORWARD,1.03122],
    [RIGHT,73],
    [FORWARD,0.46835],
    [RIGHT,54.406],
    [FORWARD,4.16105-gap_adjust/2],
    [CIRCLE,-_radius1,81.10],
  ],
  // d   bottom   at [3]
  [
    [TELEPORT,1.2,1.2],
    [FORWARD,2.6-gap_adjust+width_adjust],
    [RIGHT,60],
    [FORWARD,1.38564],
    [RIGHT,120],
    [FORWARD,3.6268-gap_adjust+width_adjust],
    [CIRCLE,-_radius2,60],
  ],
  // e   lower-left   at [4]
  [
    [TELEPORT,1.2,1.2+gap_adjust],
    [LEFT,90],
    [FORWARD,3.2-1.5*gap_adjust],
    [LEFT,55.541],
    [FORWARD,0.88909],
    [LEFT,80],
    [FORWARD,0.66665],
    [LEFT,44.459],
    [FORWARD,3.92723-1.5*gap_adjust],
  ],
  // f   upper-left   at [5]
  [
    [TELEPORT,1.2,5.6+0.75*gap_adjust],
    [LEFT,90],
    [FORWARD,3.2-1.5*gap_adjust],
    [LEFT,60.014],
    [FORWARD,1.38545],
    [LEFT,119.986],
    [FORWARD,4.34-1.5*gap_adjust],
    [LEFT,61.894],
    [FORWARD,0.52931],
  ],
  // g   middle   at [6]
  [
    [TELEPORT,1.2+0.75*gap_adjust,4.4],
    [FORWARD,2.6-1.5*gap_adjust+width_adjust],
    [LEFT,37.405],
    [FORWARD,1.0312],
    [LEFT,107.5937],
    [FORWARD,1.00001],
    [LEFT,35.0011],
    [FORWARD,2.600-1.5*gap_adjust+width_adjust],
    [LEFT,43.552],
    [FORWARD,1.0115],
  ],
];

// ----------------------------------------------------
// Simple style 7 segment
//
// Simple style with 45 degrees tips
// and each segment is the same.
// It fits in a 5*10 area.

// The data is build as separate paths,
// to be able to use the paths for future use.
// For now, they are used for a polygon.
_digit_width_simple = 5.8;
w = _digit_width_simple; // width of a digit
h = 10;  // height of a digit
i = h/2; // half the height
s = 1.2; // width of segment
t = s/2; // half width of segment
m = +0.1; // gap, by making the length shorter.

simple_seven_segment =
[
  // a 
  [[t+m,h-t],[s+m,h-s],[w-s-m,h-s],[w-t-m,h-t],[w-s-m,h],[s+m,h]],
  // b 
  [[w-t,h-t-m],[w-s,h-s-m],[w-s,i+t+m],[w-t,i+m],[w,i+t+m],[w,h-s-m]],
  // c 
  [[w-t,i-m],[w-s,i-t-m],[w-s,s+m],[w-t,t+m],[w,s+m],[w,i-t-m]],
  // d 
  [[t+m,t],[s+m,0],[w-s-m,0],[w-t-m,t],[w-s-m,s],[s+m,s]],
  // e 
  [[t,t+m],[0,s+m],[0,i-t-m],[t,i-m],[s,i-t-m],[s,s+m]],
  // f 
  [[t,i+m],[0,i+t+m],[0,h-s-m],[t,h-t-m],[s,h-s-m],[s,i+t+m]],
  // g 
  [[t+m,i],[s+m,i+t],[w-s-m,i+t],[w-t-m,i],[w-s-m,i-t],[s+m,i-t]],
];

// ----------------------------------------------------


// This module shows the segments for the fancy style 0.
// The Turtle commands were designed
// by using this module.