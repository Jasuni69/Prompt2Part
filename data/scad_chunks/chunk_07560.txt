function polyRund(points,r=0,ir,ofs=0,delta=0,fn=12,fs,rev=0)=
[for(p=[0:len(points)-1])
let(
      delta=rev?-delta:delta,
      ofs= rev? -ofs:ofs,
      fn=is_list(fn)?fn[p%len(fn)]:fn,
      fs=is_list(fs)?fs[p%len(fs)]:fs,
      ir=is_undef(ir)?r:ir,
      lp=len(points),
      pBef=points[(p+lp-1)%lp],
      pNow=points[p],
      pNex=points[(p+1)%lp],
      grad1=atan2(pBef.x-pNow.x,pBef.y-pNow.y),
      grad2=atan2(pNex.x-pNow.x,pNex.y-pNow.y),
      gradDiff=grad1-grad2,
      grad=gradDiff<0?abs(gradDiff):360-gradDiff,
      gradSup=360-grad,
      tPgrad=grad2+gradSup/2,
      r=(is_num(r)?((rev?-grad:grad)<180? r : ir):r[p%len(r)]),
      rk=grad<180?min(-r-ofs,0):max(r-ofs,0),
      tPr=(rk==0?ofs:r),
      tP=[sin(tPgrad),cos(tPgrad)]*tangentenP(grad=gradSup-180,r=tPr,rad=tPr)*(grad<180? -1:+1),
      tPDelta=[sin(tPgrad),cos(tPgrad)]*tangentenP(grad=gradSup-180,r=delta,rad=delta)
      
   )
each kreis(r=rk,rand=0,rot=grad1+90,grad=(grad-180),t=pNow+tP+tPDelta*sign(delta),center=false,z=pNow.z,fn=fn,fs=fs)
];
  
/** \page Functions
revP() reverse points order
*/