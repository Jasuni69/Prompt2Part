module exclusive_or() {
    if ($children==1) {
        children();
    } else if ($children==2) {
        difference() {
            children(0);
            children(1);
        }
        difference() {
            children(1);
            children(0);
        }
    } else if ($children==3) {
        exclusive_or() {
            exclusive_or() {
                children(0);
                children(1);
            }
            children(2);
        }
    } else if ($children==4) {
        exclusive_or() {
            exclusive_or() {
                children(0);
                children(1);
            }
            exclusive_or() {
                children(2);
                children(3);
            }
        }
    } else if ($children==5) {
        exclusive_or() {
            exclusive_or() {
                children(0);
                children(1);
                children(2);
                children(3);
            }
            children(4);
        }
    } else if ($children==6) {
        exclusive_or() {
            exclusive_or() {
                children(0);
                children(1);
                children(2);
                children(3);
            }
            children(4);
            children(5);
        }
    } else if ($children==7) {
        exclusive_or() {
            exclusive_or() {
                children(0);
                children(1);
                children(2);
                children(3);
            }
            children(4);
            children(5);
            children(6);
        }
    } else if ($children==8) {
        exclusive_or() {
            exclusive_or() {
                children(0);
                children(1);
                children(2);
                children(3);
            }
            exclusive_or() {
                children(4);
                children(5);
                children(6);
                children(7);
            }
        }
    } else if ($children==9) {
        exclusive_or() {
            exclusive_or() {
                children(0);
                children(1);
                children(2);
                children(3);
            }
            exclusive_or() {
                children(4);
                children(5);
                children(6);
                children(7);
            }
            children(8);
        }
    } else if ($children==10) {
        exclusive_or() {
            exclusive_or() {
                children(0);
                children(1);
                children(2);
                children(3);
            }
            exclusive_or() {
                children(4);
                children(5);
                children(6);
                children(7);
            }
            children(8);
            children(9);
        }
    } else {
        assert($children<=10, "\nexclusive_or() can handle up to 10 children.");
    }
}



// Function&Module: hull_region()
// Synopsis: Compute convex hull of {{region}} or 2D {{path}}
// SynTags: Geom, Path
// Topics: Regions, Polygons, Shapes2D
// Usage:
//    path = hull_region(region);
//    hull_region(region);
// Description:
//   Given a {{path}}, or a {{region}}, compute the convex hull
//   and return it as a path.  This differs from {{hull()}} and {{hull2d_path()}}, which
//   return an index list into the point list.  As a module invokes the native hull() on
//   the specified region.  
// Arguments:
//   region = region or path listing points to compute the hull from.  
// Example(2D, NoAxes):
//   data = [star(id=10,od=20,n=9),
//           right(30, star(id=12,od=25, n=7))];
//   stroke(data);
//   stroke([hull_region(data)],color="red");