function _slice_3dpolygons(polys, dir, cuts) =
    assert( [for (poly=polys) if (!is_path(poly,3)) 1] == [], "\nExpected list of 3D paths.")
    assert( is_vector(cuts), "\nThe split list must be a vector.")
    assert( in_list(dir, ["X", "Y", "Z"]))
    let(
        I = ident(3),
        dir_ind = ord(dir)-ord("X")
    )
    flatten([
        for (poly = polys)
            if (polygon_area(poly)>EPSILON)   // Discard zero area polygons
            let( 
                 plane = plane_from_polygon(poly,1e-4))
            assert(plane,"\nFound non-coplanar face.")
            let(
                normal = point3d(plane),
                pnormal = normal - (normal*I[dir_ind])*I[dir_ind]
            )
            approx(pnormal,[0,0,0]) ? [poly]     // Polygons parallel to cut plane just pass through
          : let(
                pind = max_index(v_abs(pnormal)),  // project along this direction
                otherind = 3-pind-dir_ind,         // keep dir_ind and this direction
                keep = [I[dir_ind], I[otherind]],  // dir ind becomes the x dir
                poly2d = poly*transpose(keep),     // project to 2d, putting selected direction in the X position
                poly_list = [for(p=_split_2dpolygons_at_each_x([poly2d], cuts))
                                let(
                                    a = p*keep,    // unproject, but pind dimension data is missing
                                    ofs = outer_product((repeat(plane[3], len(a))-a*normal)/plane[pind],I[pind])
                                 )
                                 a+ofs]    // ofs computes the missing pind dimension data and adds it back in
            )
            poly_list
    ]);





// Section: Turning a VNF into geometry


// Module: vnf_polyhedron()
// Synopsis: Returns a polyhedron from a VNF or list of VNFs.
// SynTags: Geom
// Topics: VNF Manipulation
// See Also: vnf_wireframe()
// Usage:
//   vnf_polyhedron(vnf) [ATTACHMENTS];
//   vnf_polyhedron([VNF, VNF, VNF, ...]) [ATTACHMENTS];
// Description:
//   Given a VNF structure, or a list of VNF structures, creates a polyhedron from them.
// Arguments:
//   vnf = A VNF structure, or list of VNF structures.
//   convexity = Max number of times a line could intersect a wall of the shape.
//   cp = Centerpoint for determining intersection anchors or centering the shape.  Determines the base of the anchor vector.  Can be "centroid", "mean", "box" or a 3D point.  Default: "centroid"
//   anchor = Translate so anchor point is at origin (0,0,0).  See [anchor](attachments.scad#subsection-anchor).  Default: `"origin"`
//   spin = Rotate this many degrees around the Z axis after anchor.  See [spin](attachments.scad#subsection-spin).  Default: `0`
//   orient = Vector to rotate top toward, after spin. See [orient](attachments.scad#subsection-orient).  Default: `UP`
//   atype = Select "hull" or "intersect" anchor type.  Default: "hull"
// Anchor Types:
//   "hull" = Anchors to the virtual convex hull of the shape.
//   "intersect" = Anchors to the surface of the shape.
// Named Anchors:
//   "origin" = Anchor at the origin, oriented UP.