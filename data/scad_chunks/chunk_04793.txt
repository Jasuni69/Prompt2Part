function svgTweenPath(path1="", path2="", factor=0) = let(
    f = max(0, min(1, factor)),
    commandList1 = pb_tokenizeSvgPath(path1),
    commandList2 = pb_tokenizeSvgPath(path2),
    a = assert(len(commandList1) == len(commandList2), "path1 and path2 must have an equal number of commands."),
    commandList = [for (i=[0:1:len(commandList1)-1]) let(
        a = assert(commandList1[i][0] == commandList2[i][0], "Command mismatch. The command sequence of path1 and path2 must be identical.")
        ) [commandList1[i][0],
        len(commandList1[i][1])==0? [] : [for(j=[0:len(commandList1[i][1])-1]) let(
            v1 = commandList1[i][1][j],
            v2 = commandList2[i][1][j]
        ) v1 + ((v2-v1) * f)]]]
) pb_commandListToPath(commandList);



//  Helper functions:

//  function pb_angle(p1,p2)
//
//  Calculates the angle of line between vector v1 and v2
//  v1      (list)   2D vector with x and y value.
//  v1      (list)   2D vector with x and y value.
//  return  (number) Angle between the two vectors in degrees.