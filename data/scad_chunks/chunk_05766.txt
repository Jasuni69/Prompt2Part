function vnf_sheet(vnf, delta, style="default", merge=true, thickness=undef) =
  assert(is_num(delta) || is_vector(delta,2,zero=false), "\ndelta must be a 2-vector designating two different offset distances.")
  let(
       dumwarn = is_def(thickness) || is_num(delta) ? echo("\nThe 'thickness' parameter is deprecated and has been replaced by 'delta'. Use the range [0,-thickness] or [-thickness,0] to reproduce the former behavior.") : 0,
       del = is_def(thickness) ? [0,-thickness] : is_num(delta) ? [0,-delta] : delta,
       vnf = merge ? vnf_merge_points(vnf) : vnf,
       offset0 = vnf_small_offset(vnf, del[0], merge=false),
       offset1 = vnf_small_offset(vnf, del[1], merge=false),
       boundary = vnf_boundary(offset0,merge=false,idx=true),
       newvnf = vnf_join([
            offset0,
            vnf_reverse_faces(offset1),
            for(p=boundary)
                vnf_vertex_array([select(offset1[0],p),select(offset0[0],p)],col_wrap=true,style=style)
        ])
  )
  del[0]<del[1] ? vnf_reverse_faces(newvnf) : newvnf;



// Section: Debugging Polyhedrons

/// Internal Module: _show_vertices()
/// Usage:
///   _show_vertices(vertices, [size], [filter=])
/// Description:
///   Draws all the vertices in an array, at their 3D position, numbered by their
///   position in the vertex array.  Also draws any children of this module with
///   transparency.
/// Arguments:
///   vertices = Array of point vertices.
///   size = The size of the text used to label the vertices.  Default: 1
/// Example:
///   verts = [for (z=[-10,10], y=[-10,10], x=[-10,10]) [x,y,z]];
///   faces = [[0,1,2], [1,3,2], [0,4,5], [0,5,1], [1,5,7], [1,7,3], [3,7,6], [3,6,2], [2,6,4], [2,4,0], [4,6,7], [4,7,5]];
///   _show_vertices(vertices=verts, size=2) {
///       polyhedron(points=verts, faces=faces);
///   }