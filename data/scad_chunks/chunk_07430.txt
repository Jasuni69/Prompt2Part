module QuadAnschluss(rad=5,rad2,size=[0,0],size2=[0,0],h=10,l=1,l2,dicke=0,dicke2,t=[0,0],chamfer=0,chamferDeg=45,fn,fs=fs,r,r2,name,help){

interRad=assert(!is_undef(size))is_undef(r)? is_list(rad)?rad:is_undef(rad)?min(size)/2*[1,1,1,1]:rad*[1,1,1,1]:is_list(r)?r:r*[1,1,1,1];
interRad2=is_undef(r2)? is_list(rad2)?rad2
                              :is_undef(rad2)?size==size2?interRad
                                                         :min(size2)/2*[1,1,1,1]
                                             :rad2*[1,1,1,1]
                :is_list(r2)?r2
                            :r2*[1,1,1,1];

  t=is_list(t)?t:[t,0];

  //ensure 4 vector
  r=[for(i=[0:3])interRad[i%len(interRad)]];
  r2=[for(i=[0:3])interRad2[i%len(interRad2)]];

  fnH=is_num(fn)&&fn?fn:ceil(h/fs);
  dicke2=is_undef(dicke2)?dicke:dicke2;
  l2=is_undef(l2)?l:l2;

  ichamferDeg=is_list(chamferDeg)?[is_list(chamferDeg[0])?chamferDeg[0]
                                                        :chamferDeg[0]*[1,1],
                                  is_list(chamferDeg[1])?chamferDeg[1]
                                                        :chamferDeg[1]*[1,1]
                                 ]
                                :chamferDeg*[[1,1], [1,1]];

  l=is_num(l)?[l,l2]:l;

  chamfer=is_list(chamfer)?chamfer
                          :dicke?[min(chamfer,l[0],abs(dicke/2)), min(chamfer , l[1], abs(dicke2/2))]
                                :[ min(chamfer,l[0]), min(chamfer,l[1]) ];
                                
  chamferBot=is_list(chamfer[0])?chamfer[0]:chamfer[0]*[1,1];
  chamferTop=is_list(chamfer[1])?chamfer[1]:chamfer[1]*[1,1];


  //height [out, in] for bottom
  chamferBotH=[abs(chamferBot[0])*tan(ichamferDeg[0][0]), abs(chamferBot[1])*tan(ichamferDeg[0][1])];
  //height [out, in]for top
  chamferTopH=[abs(chamferTop[0])*tan(ichamferDeg[1][0]), abs(chamferTop[1])*tan(ichamferDeg[1][1])];

  Echo(str(name," chamfer Deg too big ",chamferDeg," limited by l=",l),color="warning",condition=
  l[0]<max(chamferBotH)||l[1]<max(chamferTopH));

  chamferBotHmin=vMin(chamferBotH,l[0]);
  chamferTopHmin=vMin(chamferTopH,l[1]);


  function delta(i,fn=fnH,angle=180)=
  let(step=angle/fn)
  .5 - cos( i*step ) /2;// S übergang i = [0:fnH] ↦ 0⇒1


  size=is_list(size)?[max(r[0]+r[1],r[2]+r[3],size.x), max(r[0]+r[3],r[1]+r[2],size.y)]
                    :[max(r[0]+r[1],r[2]+r[3], size ), max(r[0]+r[3],r[1]+r[2], size )];
  size2=is_list(size2)?[max(r2[0]+r2[1],r2[2]+r2[3],size2.x), max(r2[0]+r2[3],r2[1]+r2[2],size2.y)]
                    :[max(r2[0]+r2[1],r2[2]+r2[3], size2 ), max(r2[0]+r2[3],r2[1]+r2[2], size2 )];


  ifn=is_num(fn)&&fn?ceil(fn/4)*4:ceil(fs2fn(r=max(max(r),max(r2)),fs=fs,minf=36)/4)*4;

  HelpTxt("QuadAnschluss",["rad",rad,"rad2",rad2,"size",size,"size2",size2,"h",h,"l",l,"l2",l2,"dicke",dicke,"dicke2",dicke2,"t",t,"chamfer",chamfer,"chamferDeg",chamferDeg,"fn",fn,"fs",fs],help);

  function points(ofs=[0,0],h=h,l=l,fn=ifn,chamfer=[0,0],chamferH=[0,0],r=is_list(r)?r:[r,r,r,r],r2=is_list(r2)?r2:[r2,r2,r2,r2])=[

    if(l[0]&&chamfer[0])each quad(size+[2,2]*(ofs[0]-chamfer[0]),r=vMax(vAdd(r,ofs[0]-chamfer[0]),0),z=0,fn=fn), // l[0] base
    if(l[0])each quad(size+[2,2]*ofs[0],r=vMax(vAdd(r,ofs[0]), 0 ),z=chamfer[0]?abs(chamferH[0]):0,fn=fn), // l[0] base

    for(i=[0:fnH])each quad(
        size.x+ofs[0]*2 + (size2.x-size.x + (ofs[1]-ofs[0])*2) * delta(i),
        size.y+ofs[0]*2 + (size2.y-size.y + (ofs[1]-ofs[0])*2) * delta(i),
        r=vMax(v=vAdd(r+(r2-r)*delta(i),ofs[0]+(ofs[1]-ofs[0])*delta(i) ), 0),
        t=t*delta(i),
        z=i*h/fnH+l[0],fn=fn),
    if(l[1])each quad(size2+ofs[1]*[2,2],r=vMax(v=vAdd(v=r2,ofs[1]),0),t=t,z=h+vSum(l)-(chamfer[1]?abs(chamferH[1]):0),fn=fn), // l[1] top
    if(l[1]&&chamfer[1])each quad(size2+(ofs[1]-chamfer[1])*[2,2],r=vMax(v=r2+[1,1,1,1]*(ofs[1]-chamfer[1]) ),t=t,z=h+vSum(l),fn=fn) // l[1] top

  ];

 if(dicke>=0)difference(){
  
   PolyH( points(h=h, l=l, chamfer=[chamferBot[0],chamferTop[0]],
                 chamferH=[chamferBotHmin[0],chamferTopHmin[0]]),
          loop=ifn +4,flip=0,name=false);
          
  if(dicke>0)Tz(-.01)
    PolyH(points(ofs=-[dicke,dicke2], h=h, l=l+[.01,.01],
                 chamfer=-[chamferBot[1],chamferTop[1]],
                 chamferH=[chamferBotHmin[1],chamferTopHmin[1]]),
          loop=ifn+4,flip=0,name=false);
  }

 if(dicke<0)difference(){
   PolyH(points(ofs=-[dicke,dicke2], h=h, l=l,
                chamfer=[chamferBot[0],chamferTop[0]],
                chamferH=[chamferBotHmin[0],chamferTopHmin[0]]),
         loop=ifn+4,flip=0,name=false);
         
   Tz(-.01)PolyH(points(h=h, l=l+[.01,.01],
                        chamfer=-[chamferBot[1],chamferTop[1]],
                        chamferH=[chamferBotHmin[1],chamferTopHmin[1]]),
                 loop=ifn+4,flip=0,name=false);
  }
  
  
}
/** \name Anschluss \page Objects
Anschluss() creates a transision between diameter or thickness
\param h height 
\param d1 d2  in out diameter
\param rad rad2  radius of the bend
\param grad  degree of the transition
\param r1 r2  optional to d1 d2
\param center center height -1 1 0
\param grad2 end section angle
\param wand thickness 
\param 2D  make 2D
\param x0  move x start
\param hRef reference for h 0=center, -1/1 lower\upper tangential, -2/2 tang+grad2 , -3/3 rad center
\param fn,fs,fa fragments
*/


//Anschluss(wand=1);