function mb_stadium(size, cutoff=INF, influence=1, negative=false, hide_debug=false) =
    assert(is_num(cutoff) && cutoff>0, "\ncutoff must be a positive number.")
    assert(is_finite(influence) && influence>0, "\ninfluence must be a positive number.")
    assert((is_finite(size) && size>0) || (is_vector(size) && all_positive(size)), "\nsize must be a positive number or a 2-vector of positive values.")
    let(
        siz = is_num(size) ? [size,size] : [size[0],size[1]],
        shape = siz[1]/siz[0] - 1,
        length = shape>=0 ? siz[1] : siz[0],
        r = shape>=0 ? siz[0]/2 : siz[1]/2,
        sl = length-2*r, // straight side length
        //dum3 = assert(sl>=0, "\nTotal length must accommodate rounded ends of rectangle."),
        neg = negative ? -1 : 1,
        poly = abs(shape)<=EPSILON ? [neg, hide_debug ? circle(r=0.02, $fn=3) : circle(r=r, $fn=20)]
        : shape>0 ? [neg, hide_debug ? square(0.02,center=true) : rect([2*r,length], rounding=0.999*r, $fn=20)]
        : [neg, hide_debug ? square(0.02,center=true) : rect([length,2*r], rounding=0.999*r, $fn=20)]
   ) abs(shape)<EPSILON ?
    [function (dv) _mb_circle_full(dv, r, cutoff, 1/influence, neg), poly]
    : shape>0 ? [function (dv) _mb_stadium_full(dv, sl/2, r, cutoff, 1/influence, neg), poly]
    : [function (dv) _mb_stadium_sideways_full(dv, sl/2, r, cutoff, 1/influence, neg), poly];


/// metaball 2D connector - calls mb_stadium after transform