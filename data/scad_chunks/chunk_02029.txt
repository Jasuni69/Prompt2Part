module psu_shroud(type, cable_d, name, cables = 1) { //! Generate the STL file for a specified ssr and cable
    extent = psu_shroud_extent(type);
    depth = psu_shroud_depth(type);
    width = psu_shroud_width(type);
    height = psu_shroud_height(type);
    centre_x = -psu_length(type) / 2 -  psu_shroud_extent(type) + psu_shroud_depth(type) / 2;
    centre_y = psu_shroud_centre_y(type);
    terminal_clearance = 0.5;
    tb = psu_terminals(type).z;

    module shape() {
        difference() {
            round(or = wall / 2 - eps, ir = 0) difference() {
                rounded_square([depth, width], rad);

                rounded_square([depth - 2 * wall, width - 2 * wall], rad - wall);

                translate([depth / 2, 0])
                    square([2 * rad, width], center = true);

                translate([depth / 2, width / 2 - 5])
                    square([2 * (overlap + terminal_clearance), 10], center = true);
            }
            for(i = [0 : 1 : cables - 1])
                translate([0, (i - cables / 2 + 0.5) *  psu_shroud_cable_pitch(cable_d)])
                    square([depth + 1, cable_d], center = true);
        }
    }

    stl(str("psu_shroud_", name)) {
        // base and sides
        translate([centre_x, -centre_y]) {
            rounded_rectangle([depth - eps, width - eps, top], rad);

            linear_extrude(height)
                difference() {
                    shape();

                    translate([depth / 2, width / 2 - 5])
                        square([2 * (depth - extent + terminal_clearance), 10], center = true);
            }
            linear_extrude(height - terminal_block_height(tb) - psu_terminal_block_z(type) - terminal_clearance)
                shape();
        }
        // cable slots
        for(i = [0 : 1 : cables - 1])
            translate([centre_x - depth / 2 + wall / 2, -centre_y + (i - cables / 2 + 0.5) *  psu_shroud_cable_pitch(cable_d), height / 2])
                rotate([90, 0, 90])
                    linear_extrude(wall, center = true)
                        difference() {
                            square([cable_d + eps, height], center = true);

                            translate([0, height / 2])
                                    vertical_tearslot(h = 0, r = cable_d / 2, l = cable_d);
                    }
        // insert lugs
        mirror([0, 1, 0])
            psu_shroud_hole_positions(type)
                translate_z(height)
                    rotate($side * 90)
                        insert_lug(insert, wall, counter_bore);
     }
}