module tray(dimensions, n_columns=1, n_rows=1, columns=false, rows=false, thickness=2, curved=true,
                  bottom_thickness=undef,
                  dividers_height=undef, dividers_thickness=undef,
                  bottom_bevel_radius=undef, top_bevel_radius=undef,
                  dividers_bottom_bevel_radius=undef, dividers_top_bevel_radius=undef,
                  rows_first=false) {

	    // Main external box dimensions.
	    ext_width  = dimensions[0];
	    ext_length = dimensions[1];
	    ext_height = dimensions[2];
	    
	    // If using "rows_first" mode, tray is simply rotated with columns and rows inverted.
	    if (rows_first == true) {
	    	translate([ext_width, 0, 0])
	    	rotate([0,0,90])
	    		tray([ext_length, ext_width, ext_height], n_columns=n_rows, n_rows=n_columns, columns=rows, rows=columns,
	    		           thickness=thickness, curved=curved,
                                   dividers_height=dividers_height, dividers_thickness=dividers_thickness,
                                   bottom_bevel_radius=bottom_bevel_radius, top_bevel_radius=top_bevel_radius,
                                   dividers_bottom_bevel_radius=dividers_bottom_bevel_radius,
                                   dividers_top_bevel_radius=dividers_top_bevel_radius);
	    
            }
            
            // Default "columns_first" mode.
            else {
	    	int_width  = ext_width - 2*thickness;
	    	int_length  = ext_length - 2*thickness;
	    
	    	// Dimensions of inside trays (cells).
	    	cell_thickness = dividers_thickness!=undef ? dividers_thickness : thickness;
	    	thickness_diff = thickness - cell_thickness; // difference between exterior and interior thickness
	    	all_cells_width = (ext_width - 2*thickness_diff) + cell_thickness*(n_columns-1);
	    	cell_width = all_cells_width / n_columns;
	    	cell_bottom_bevel_radius = dividers_bottom_bevel_radius!=undef ? dividers_bottom_bevel_radius : bottom_bevel_radius;
	    	cell_top_bevel_radius    = dividers_top_bevel_radius!=undef ? dividers_top_bevel_radius : top_bevel_radius;
	    
	    	column_n_rows = n_rows[0] != undef ? n_rows : [ for (i = [0 : n_columns-1]) n_rows ];
	    	cell_height = ext_height - thickness_diff;
	    	all_cells_length = [ for (i = [0 : n_columns-1]) (ext_length - 2*thickness_diff) + cell_thickness*(column_n_rows[i]-1) ];
	    	cell_length = [ for (i = [0 : n_columns-1]) all_cells_length[i] / column_n_rows[i] ];

	    	// Draw main box.
	    	tray_outside(dimensions, thickness=thickness, curved=curved, top_bevel_radius=top_bevel_radius, bottom_thickness=bottom_thickness);

		// Create list of columns.
	    	column_width = [
			for (i = [0 : n_columns-1]) 
			    (columns == false ?
			    (i+1)*cell_width : 
			    (i != 0 && i == n_columns-1 ? 
				1 : 
				columns[i])
				* all_cells_width) 
				];
	        // Create list of rows.
	    	row_length = [
			for (i = [0 : n_columns-1]) 
			    [ for (j = [0 : column_n_rows[i]-1])
				(rows == false || rows[i] == false ?
				(j+1)*cell_length[i] : 
				(j != 0 && j == column_n_rows[i]-1 ? 
				    1 : 
				    rows[i][j]) 
				    * all_cells_length[i]) ]
			     ];

            
	        // Draw all cells.
	    	difference() {
		    translate([thickness_diff, thickness_diff, thickness_diff])
		    for (i = [0 : n_columns-1]) {
			for (j = [0 : column_n_rows[i]-1]) {
			    translate([i == 0 ? 0 : column_width[i-1] - i*cell_thickness, 
				       j == 0 ? 0 : row_length[i][j-1] - j*cell_thickness,
				       0])
			    tray_single([column_width[i] - (i == 0 ? 0 : column_width[i-1]),
				  row_length[i][j] - (j == 0 ? 0 : row_length[i][j-1]),              cell_height], 
				 thickness=cell_thickness, curved=curved, bottom_thickness=bottom_thickness, bottom_bevel_radius=cell_bottom_bevel_radius, top_bevel_radius=cell_top_bevel_radius);
			}
		    }
		    
		    // Scoop out top if dividers_height is provided.
		    if (dividers_height!=undef)
		    	tray_scoop(dimensions, dividers_height, thickness=thickness, curved=curved, top_bevel_radius=top_bevel_radius)
		    	_tray_rounded_cube([int_width, int_length, 2*(ext_height-dividers_height)],
		                     r=(top_bevel_radius >= 0 ? top_bevel_radius : (curved ? thickness : 0)), x=true, y=true, z=true);
	     	}
	     }
}

// Just creates the outside shell of main box.