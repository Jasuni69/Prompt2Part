function _delaunayBoundaries(d, badTriangles, boundaries, t, vi, _indices_hash) = 
    let(
	    triangles = delaunay_triangles(d),
	    opTri = hashmap_get(triangles, t, hash = _indices_hash)[vi]
	)
	contains(badTriangles, opTri) ?
		let(i = search([t], hashmap_get(triangles, opTri, hash = _indices_hash))[0])
		_delaunayBoundaries(d, badTriangles, boundaries, opTri, (i + 1) % 3, _indices_hash) : 
	    let(
		    nboundaries = [each boundaries, [
			    [t[(vi + 1) % 3], t[vi > 0 ? vi - 1 : (vi + 2)]], // edge
				opTri                                             // delaunayTri
			]]
		)
		nboundaries[0][0][0] == nboundaries[len(nboundaries) - 1][0][1] ? 
		    nboundaries : 
			_delaunayBoundaries(d, badTriangles, nboundaries, t, (vi + 1) % 3, _indices_hash);