function _detri_combine_faces(edgelist,faces,normals,facelist,curface) =
    curface==len(faces)? select(faces,facelist)
  : !in_list(curface,facelist) ? _detri_combine_faces(edgelist,faces,normals,facelist,curface+1)
  :
    let(
        thisface=faces[curface],
        neighbors = [for(i=idx(thisface))
                       let(
                           edgepair = search([sort(select(thisface,i,i+1))],edgelist,0)[0],
                           choices = select(edgelist,edgepair),
                           good_choice=[for(choice=choices)
                              if (choice[1]!=curface && in_list(choice[1],facelist) && normals[choice[1]]*normals[curface]>1-EPSILON)
                                choice],
                           d=assert(len(good_choice)<=1)
                       )
                       len(good_choice)==1 ? good_choice[0][1] : -1
                    ],
        // Check for duplicates in the neighbor list so we don't add them twice
        dups = search([for(n=neighbors) if (n>=0) n], neighbors,0),
        goodind = column(dups,0),
        newface = [for(i=idx(thisface))
                    each
                     !in_list(i,goodind) ? [thisface[i]]
                    :
                     let(
                         ind = search(select(thisface,i,i+1), faces[neighbors[i]])
                     )
                     select(faces[neighbors[i]],ind[0],ind[1]-1)
                   ],
        usedfaces = [for(n=neighbors) if (n>=0) n],
        faces = list_set(faces,curface,newface),
        facelist = list_remove_values(facelist,usedfaces)
     )
     _detri_combine_faces(edgelist,faces,normals,facelist,len(usedfaces)==0?curface+1:curface);




// Function: vnf_slice()
// Synopsis: Slice the faces of a VNF along an axis.
// SynTags: VNF
// Topics: VNF Manipulation
// See Also: vnf_reverse_faces(), vnf_quantize(), vnf_merge_points(), vnf_drop_unused_points(), vnf_triangulate()
// Usage:
//   sliced = vnf_slice(vnf, dir, cuts);
// Description:
//   Slice the faces of a VNF along a specified axis direction at a given list of cut points.
//   The cut points can appear in any order.  You can use this to refine the faces of a VNF before
//   applying a nonlinear transformation to its vertex set.
// Arguments:
//   vnf = VNF to slice
//   dir = normal direction to the slices, either "X", "Y" or "Z"
//   cuts = X, Y or Z values where cuts occur
// Example(3D):
//   include <BOSL2/polyhedra.scad>
//   vnf = regular_polyhedron_info("vnf", "dodecahedron", side=12);
//   vnf_polyhedron(vnf);
//   sliced = vnf_slice(vnf, "X", [-6,-1,10]);
//   color("red")vnf_wireframe(sliced,width=.3);