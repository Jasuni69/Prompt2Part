module sparse_wall2d(size=[50,100], maxang=30, strut=5, max_bridge=20, anchor=CENTER, spin=0)
{
    h = size.x;
    l = size.y;

    zoff = h/2 - strut/2;
    yoff = l/2 - strut/2;

    maxhyp = 1.5 * (max_bridge+strut)/2 / sin(maxang);
    maxz = 2 * maxhyp * cos(maxang);

    zreps = ceil(2*zoff/maxz);
    zstep = 2*zoff / zreps;

    hyp = zstep/2 / cos(maxang);
    maxy = min(2 * hyp * sin(maxang), max_bridge+strut);

    yreps = ceil(2*yoff/maxy);
    ystep = 2*yoff / yreps;

    ang = atan(ystep/zstep);
    len = zstep / cos(ang);
    attachable(anchor,spin, two_d=true, size=size) {
        union() {
            difference() {
                square([h, l], center=true);
                square([h-2*strut, l-2*strut], center=true);
            }
            ycopies(ystep, n=yreps) {
                xcopies(zstep, n=zreps) {
                    skew(syx=tan(-ang)) square([(h-strut)/zreps, strut/cos(ang)], center=true);
                    skew(syx=tan( ang)) square([(h-strut)/zreps, strut/cos(ang)], center=true);
                }
            }
        }
        children();
    }
}


// Module: sparse_cuboid()
// Synopsis: Makes an open cross-braced cuboid
// SynTags: Geom
// Topics: FDM Optimized, Walls
// See Also: sparse_wall(), hex_panel(), corrugated_wall(), thinning_wall(), thinning_triangle(), narrowing_strut(), cuboid()
// Usage:
//   sparse_cuboid(size, [dir], [maxang=], [struct=]
// Description:
//   Makes an open rectangular cuboid with X-shaped cross-bracing to reduce the need for material in 3d printing.
//   The direction of the cross bracing can be aligned with the X, Y or Z axis.  This module can be
//   used as a drop-in replacement for {{cuboid()}} if you belatedly decide that your model would benefit from
//   the sparse construction.  Note that for Z aligned bracing the max_bridge parameter contrains the gaps that are parallel
//   to the Y axis, and the angle is measured relative to the X direction.  
// Arguments:
//   size = The size of sparse wall, a number or length 3 vector.
//   dir = direction of holes through the cuboid, must be a vector parallel to the X, Y or Z axes, or one of "X", "Y" or "Z".  Default: "Y"
//   ---
//   maxang = maximum overhang angle of cross-braces, measured down from vertical.  Default: 30 
//   strut = the width of the cross-braces. Default: 5
//   max_bridge = maximum bridging distance between cross-braces.  Default: 20
//   chamfer = Size of chamfer, inset from sides.  Default: No chamfering.
//   rounding = Radius of the edge rounding.  Default: No rounding.
//   edges = Edges to mask.  See [Specifying Edges](attachments.scad#section-specifying-edges).  Default: all edges.
//   except = Edges to explicitly NOT mask.  See [Specifying Edges](attachments.scad#section-specifying-edges).  Default: No edges.
//   trimcorners = If true, rounds or chamfers corners where three chamfered/rounded edges meet.  Default: `true`
//   teardrop = If given as a number, rounding around the bottom edge of the cuboid won't exceed this many degrees from vertical.  If true, the limit angle is 45 degrees.  Default: `false`
//   anchor = Translate so anchor point is at origin (0,0,0).  See [anchor](attachments.scad#subsection-anchor).  Default: `CENTER`
//   spin = Rotate this many degrees around the Z axis.  See [spin](attachments.scad#subsection-spin).  Default: `0`
//   orient = Vector to rotate top towards.  See [orient](attachments.scad#subsection-orient).  Default: `UP`
// Examples:
//   sparse_cuboid([10,20,30], strut=1);
//   sparse_cuboid([10,20,30], "Y", strut=1);
//   sparse_cuboid([10,20,30], UP, strut=1);
//   sparse_cuboid(30, FWD, strut=2, rounding=2, $fn=24);