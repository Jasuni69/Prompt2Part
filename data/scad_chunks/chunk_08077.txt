module torus_knot_dragon() {
    phi_step = 0.0525;

    body_r = 6;
    body_fn = 12;
    scale_fn = 8;
    scale_tilt_a = 3;

    knot = torus_knot(2, 3, phi_step);
    d_path = reverse([for(i = [6:len(knot) - 4]) knot[i]]);
	
    one_body_scale_data = one_body_scale(body_r, body_fn, scale_fn, scale_tilt_a);
	along_with(d_path, scale = [0.6, 0.6, 0.85], method = "EULER_ANGLE")    
	scale(0.06)
	    one_segment(body_r, body_fn, one_body_scale_data);

    function __angy_angz(p1, p2) = 
        let(v = p2 - p1) 
        [
            atan2(v.z, norm([v.x, v.y])), 
            atan2(v.y, v.x)
        ];
		
	h_angy_angz = __angy_angz(d_path[len(d_path) - 2], d_path[len(d_path) - 1]);
	
	translate([2.5, -1.2, .6])
    scale(0.0675)    
    rotate([0, h_angy_angz[0] + 28, h_angy_angz[1] + 247])
        dragon_head();
		
	t_angy_angz = __angy_angz(d_path[1], d_path[0]);	
	
	translate([2.09, 1.56, -.8])
	rotate([0, t_angy_angz[0], t_angy_angz[1]])
	rotate([0, -98, -70])
	scale([0.038, 0.038, 0.065])
    rotate([0, 0, 200])
	    tail();
}