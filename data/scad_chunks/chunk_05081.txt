module metaballs2d(spec, bounding_box, pixel_size, pixel_count, isovalue=1, use_centers=false, smoothing=undef, exact_bounds=false, convexity=6, cp="centroid", anchor="origin", spin=0, atype="hull", show_stats=false, show_box=false, debug=false) {
    regionlist = metaballs2d(spec, bounding_box, pixel_size, pixel_count, isovalue, true, use_centers, smoothing, exact_bounds, show_stats, _debug=debug);
    $metaball_pathlist = debug ? regionlist[0] : regionlist; // for possible use with children
    if(debug) {
        // display debug polygons
        for(a=regionlist[1])
            if(len(a[1])>0)
                color(a[0]==0 ? "gray" : a[0]>0 ? "#3399FF" : "#FF9933")
                    region(a[1]);
            //else echo("WARNING: Empty metaball path found!");
        // display metaball as outline
        attachable(anchor, spin, two_d=true, region=regionlist[0], extent=atype=="hull", cp=cp) {
            wid = is_def(pixel_size) ? min(0.5, 0.5 * (is_num(pixel_size) ? pixel_size : 0.5*(pixel_size[0]+pixel_size[1]))) : 0.2;
            stroke(regionlist[0], width=wid, closed=true);
            children();
        }
    } else { // debug==false, just display the metaball polygons
        assert(len(regionlist)>0, "\nNo metaball polygons found! Check your isovalue.")
            attachable(anchor, spin, two_d=true, region=regionlist, extent=atype=="hull", cp=cp) {
                if(len(regionlist)>0)
                    region(regionlist, anchor=anchor, spin=spin, cp=cp, atype=atype);
                children();
            }
    }
    if(show_box)
        let(
            bbox0 = is_num(bounding_box)
            ? let(hb=0.5*bounding_box) [[-hb,-hb],[hb,hb]]
            : bounding_box,
            autopixsize = is_def(pixel_size) ? pixel_size : _getautopixsize(bbox0, default(pixel_count,32^2)),
            pixsize = _getpixsize(autopixsize, bbox0, exact_bounds),
            bbox = _getbbox2d(pixsize, bbox0, exact_bounds)
        ) %translate([bbox[0][0],bbox[0][1],-0.05]) linear_extrude(0.1) square(bbox[1]-bbox[0]);
}