module pocket_handle(type) { //! Generate STL for pocket_handle
    f = pocket_handle_flange(type);
    r = pocket_handle_rad(type);
    s = pocket_handle_slant(type);
    o = f.z * tan(s);
    h = pocket_handle_hand_size(type);
    t = pocket_handle_panel_t(type);
    w = pocket_handle_wall(type);
    screw = pocket_handle_screw(type) ;

    stl("pocket_handle")
        union() {
            difference() {
                hull() {
                    rounded_rectangle(f, r);

                    translate_z(f.z - eps)
                        rounded_rectangle([f.x + 2 * o, f.y + 2 * o, eps], r + o);
                }
                hull() {
                    rounded_rectangle([h.x, h.y, f.z + eps], r);

                    translate_z(-eps)
                        rounded_rectangle([h.x + 2 * o, h.y + 2 * o, eps], r + o);
                }
                pocket_handle_hole_positions(type) {
                    if(screw_head_height(screw))
                        translate_z(-eps)
                            poly_cylinder(r = screw_clearance_radius(screw), h = f.z + 2 * eps, center = false);
                    else
                        screw_polysink(screw, h = 2 * f.z + eps, alt = true);
                }
            }

            translate_z(f.z)
                linear_extrude(t)
                    difference() {
                        rounded_square([h.x + 2 * w, h.y + 2 * w], r + w);

                        rounded_square([h.x, h.y], r);
                    }

            translate_z(f.z + t)
                difference() {
                    height = h.z - f.z - t;
                    hull() {
                        rounded_rectangle([h.x + 2 * w, h.y + 2 * w, eps], r + w);

                        translate((height + w) * [0, sin(s), cos(s)])
                            rounded_rectangle([h.x + 2 * w, h.y + 2 * w, eps], r + w);
                    }

                    hull() {
                        translate_z(-eps)
                            rounded_rectangle([h.x, h.y, eps], r);

                        translate(height * [0, sin(s), cos(s)])
                            rounded_rectangle([h.x, h.y, eps], r);
                    }
                }
        }
}