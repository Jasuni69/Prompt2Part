function _cone_isect(geom,line,bounded,flip) =
   let(
       rr1=geom[1],
       rr2=geom[2],
       r1 = is_num(rr1)? [rr1,rr1] : point2d(rr1),
       r2 = is_num(rr2)? [rr2,rr2] : point2d(rr2),
       r=[r1,r2],
       length=geom[3],
       shift=point2d(geom[4]),
       axis=point3d(geom[5]),
       modline = rot(from=axis,to=UP, p=line), 

       btisect = [for(dir=[-1,1]) plane_line_intersection(plane_from_normal(UP,dir*length/2*UP), modline, RAY)],
       tbhit = [for(i=[0:1])
                  if (is_def(btisect[i]) && (btisect[i].x-shift.x)^2/r[i].x^2+(btisect[i].y-shift.y)^2/r[i].y^2<=1) i ],
       tbresult = len(tbhit)==0 ? undef
                : let(
                       anchor = rot(from=UP,to=axis,p=[0,0,2*tbhit[0]-1]),
                       anch = _find_anchor(anchor,geom),
                       z = anch[2],
                       y = rot(from=UP,to=z, p=zrot(anch[3], BACK)),
                       x = cross(y,z),
                       shift = (!flip?ident(2):[[0,1],[-1,0]])*[x,y]*(rot(from=UP,to=axis,p=btisect[tbhit[0]])-anch[1])
                   )
                   [anchor,shift]
    )
    is_def(tbresult) ? tbresult
  :
    assert(r1==r2 && r1[0]==r2[0] && shift==[0,0], "Center anchor intersects curved side of cone or shifted cylinder, which is not allowed")
    let(
        ray = modline[1]-modline[0],
        anchor = rot(from=UP,to=axis,p=point3d(unit(point2d(ray)))),
        slope = ray.z/norm([ray.x,ray.y]),
        anch = _find_anchor(anchor,geom),
        z = anch[2],
        y = rot(from=UP,to=z,p=zrot(anch[3], BACK)),
        shift = (r1[0]*slope)*(axis==UP?1:(cross(y,z)*axis))
    )
    [anchor,shift*RIGHT];