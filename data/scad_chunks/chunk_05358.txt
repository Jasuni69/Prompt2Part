function xy_to_polar(x, y) =
    y != undef
      ? assert(is_num(x) && is_num(y), "\nBad arguments.")
        [norm([x, y]), atan2(y, x)]
      : assert(is_list(x), "\nBad arguments.")
        is_num(x.x)
          ? xy_to_polar(x.x, x.y)
          : [for(p = x) xy_to_polar(p.x, p.y)];


// Function: project_plane()
// Synopsis: Project a set of points onto a specified plane, returning 2D points.  
// SynTags: Path
// Topics: Coordinates, Points, Paths
// See Also: lift_plane()
// Usage: 
//   xy = project_plane(plane, p);
// Usage: To get a transform matrix
//   M = project_plane(plane)
// Description:
//   Maps the provided 3D point(s) from 3D coordinates to a 2D coordinate system defined by `plane`.  Points that are not
//   on the specified plane are projected orthogonally onto the plane.  This coordinate system is useful if you need
//   to perform 2D operations on a coplanar set of data.  After those operations are done you can return the data
//   to 3D with `lift_plane()`.  You could also use this to force approximately coplanar data to be exactly coplanar.
//   The parameter p can be a point, path, region, bezier patch or VNF.
//   The plane can be specified as
//   - A list of three points.  The planar coordinate system should have [0,0] at plane[0], with plane[1] lying on the Y+ axis.
//   - A list of non-collinear, coplanar points that define a plane.
//   - A plane definition `[A,B,C,D]` where `Ax+By+CZ=D`.  The closest point on that plane to the origin maps to the origin in the new coordinate system.
//   .
//   If you omit the point specification then `project_plane()` returns a rotation matrix that maps the specified plane to the XY plane.
//   Note that if you apply this transformation to data lying on the plane, it produces 3D points with the Z coordinate of zero.
// Arguments:
//   plane = plane specification or point list defining the plane
//   p = 3D point, path, region, VNF or bezier patch to project
// Example:
//   pt = [5,-5,5];
//   a=[0,0,0];  b=[10,-10,0];  c=[10,0,10];
//   xy = project_plane([a,b,c],pt);
// Example(3D): The yellow points in 3D project onto the red points in 2D
//   M = [[-1, 2, -1, -2], [-1, -3, 2, -1], [2, 3, 4, 53], [0, 0, 0, 1]];
//   data = apply(M,path3d(circle(r=10, $fn=20)));
//   move_copies(data) sphere(r=1);
//   color("red") move_copies(project_plane(data, data)) sphere(r=1);
// Example:
//   xyzpath = move([10,20,30], p=yrot(25, p=path3d(circle(d=100))));
//   mat = project_plane(xyzpath);
//   xypath = path2d(apply(mat, xyzpath));
//   #stroke(xyzpath,closed=true);
//   stroke(xypath,closed=true);